// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RcNet.proto

#include "RcNet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Rc {
PROTOBUF_CONSTEXPR LaplaceMomentsStruct::LaplaceMomentsStruct(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.y1_)*/0
  , /*decltype(_impl_.y2_)*/0
  , /*decltype(_impl_.y3_)*/0} {}
struct LaplaceMomentsStructDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaplaceMomentsStructDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaplaceMomentsStructDefaultTypeInternal() {}
  union {
    LaplaceMomentsStruct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaplaceMomentsStructDefaultTypeInternal _LaplaceMomentsStruct_default_instance_;
PROTOBUF_CONSTEXPR ModeTransPairMapDoubleMatrix::ModeTransPairMapDoubleMatrix(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModeTransPairMapDoubleMatrixDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModeTransPairMapDoubleMatrixDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModeTransPairMapDoubleMatrixDefaultTypeInternal() {}
  union {
    ModeTransPairMapDoubleMatrix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModeTransPairMapDoubleMatrixDefaultTypeInternal _ModeTransPairMapDoubleMatrix_default_instance_;
PROTOBUF_CONSTEXPR RctNodeClass::RctNodeClass(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.maps_)*/{}
  , /*decltype(_impl_._fanin_)*/{}
  , /*decltype(_impl_._fanout_)*/{}
  , /*decltype(_impl_._name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._moments_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cap_)*/0
  , /*decltype(_impl_._load_)*/0
  , /*decltype(_impl_._delay_)*/0
  , /*decltype(_impl_._obj_)*/uint64_t{0u}
  , /*decltype(_impl_.property_)*/0u} {}
struct RctNodeClassDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RctNodeClassDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RctNodeClassDefaultTypeInternal() {}
  union {
    RctNodeClass _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RctNodeClassDefaultTypeInternal _RctNodeClass_default_instance_;
PROTOBUF_CONSTEXPR RctEdgeClass::RctEdgeClass(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._from_)*/uint64_t{0u}
  , /*decltype(_impl_._to_)*/uint64_t{0u}
  , /*decltype(_impl_._res_)*/0
  , /*decltype(_impl_._is_break_)*/false
  , /*decltype(_impl_._is_in_order_)*/false} {}
struct RctEdgeClassDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RctEdgeClassDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RctEdgeClassDefaultTypeInternal() {}
  union {
    RctEdgeClass _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RctEdgeClassDefaultTypeInternal _RctEdgeClass_default_instance_;
PROTOBUF_CONSTEXPR RcTreeClass::RcTreeClass(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._str2nodes_)*/{}
  , /*decltype(_impl_._edges_)*/{}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._root_)*/uint64_t{0u}} {}
struct RcTreeClassDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RcTreeClassDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RcTreeClassDefaultTypeInternal() {}
  union {
    RcTreeClass _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RcTreeClassDefaultTypeInternal _RcTreeClass_default_instance_;
PROTOBUF_CONSTEXPR RcNetCommonInfoClass::RcNetCommonInfoClass(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._spef_cap_unit_)*/nullptr
  , /*decltype(_impl_._spef_resistance_unit_)*/nullptr} {}
struct RcNetCommonInfoClassDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RcNetCommonInfoClassDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RcNetCommonInfoClassDefaultTypeInternal() {}
  union {
    RcNetCommonInfoClass _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RcNetCommonInfoClassDefaultTypeInternal _RcNetCommonInfoClass_default_instance_;
PROTOBUF_CONSTEXPR EmptyRctClass::EmptyRctClass(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.load_)*/0} {}
struct EmptyRctClassDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyRctClassDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyRctClassDefaultTypeInternal() {}
  union {
    EmptyRctClass _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyRctClassDefaultTypeInternal _EmptyRctClass_default_instance_;
PROTOBUF_CONSTEXPR RcNetClass::RcNetClass(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._rc_loop_)*/{}
  , /*decltype(_impl_._rc_net_common_info_)*/nullptr
  , /*decltype(_impl_._net_)*/uint64_t{0u}
  , /*decltype(_impl_._is_found_loop_)*/false
  , /*decltype(_impl_._rct_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RcNetClassDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RcNetClassDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RcNetClassDefaultTypeInternal() {}
  union {
    RcNetClass _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RcNetClassDefaultTypeInternal _RcNetClass_default_instance_;
PROTOBUF_CONSTEXPR ArnoldiNetClass::ArnoldiNetClass(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.node_id_pair_)*/{}
  , /*decltype(_impl_._nodal_caps_)*/{}
  , /*decltype(_impl_._conductances_)*/nullptr
  , /*decltype(_impl_._diag_b_w_)*/nullptr
  , /*decltype(_impl_._input_slew_)*/0
  , /*decltype(_impl_._lib_arc_)*/uint64_t{0u}} {}
struct ArnoldiNetClassDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArnoldiNetClassDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArnoldiNetClassDefaultTypeInternal() {}
  union {
    ArnoldiNetClass _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArnoldiNetClassDefaultTypeInternal _ArnoldiNetClass_default_instance_;
PROTOBUF_CONSTEXPR RcNetSyn::RcNetSyn(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.child_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0u} {}
struct RcNetSynDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RcNetSynDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RcNetSynDefaultTypeInternal() {}
  union {
    RcNetSyn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RcNetSynDefaultTypeInternal _RcNetSyn_default_instance_;
}  // namespace Rc
static ::_pb::Metadata file_level_metadata_RcNet_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_RcNet_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_RcNet_2eproto = nullptr;

const uint32_t TableStruct_RcNet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Rc::LaplaceMomentsStruct, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Rc::LaplaceMomentsStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rc::LaplaceMomentsStruct, _impl_.y1_),
  PROTOBUF_FIELD_OFFSET(::Rc::LaplaceMomentsStruct, _impl_.y2_),
  PROTOBUF_FIELD_OFFSET(::Rc::LaplaceMomentsStruct, _impl_.y3_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rc::ModeTransPairMapDoubleMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rc::ModeTransPairMapDoubleMatrix, _impl_.map_),
  PROTOBUF_FIELD_OFFSET(::Rc::RctNodeClass, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Rc::RctNodeClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rc::RctNodeClass, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Rc::RctNodeClass, _impl_._name_),
  PROTOBUF_FIELD_OFFSET(::Rc::RctNodeClass, _impl_._cap_),
  PROTOBUF_FIELD_OFFSET(::Rc::RctNodeClass, _impl_._load_),
  PROTOBUF_FIELD_OFFSET(::Rc::RctNodeClass, _impl_._delay_),
  PROTOBUF_FIELD_OFFSET(::Rc::RctNodeClass, _impl_.property_),
  PROTOBUF_FIELD_OFFSET(::Rc::RctNodeClass, _impl_.maps_),
  PROTOBUF_FIELD_OFFSET(::Rc::RctNodeClass, _impl_._fanin_),
  PROTOBUF_FIELD_OFFSET(::Rc::RctNodeClass, _impl_._fanout_),
  PROTOBUF_FIELD_OFFSET(::Rc::RctNodeClass, _impl_._obj_),
  PROTOBUF_FIELD_OFFSET(::Rc::RctNodeClass, _impl_._moments_),
  2,
  0,
  3,
  4,
  5,
  7,
  ~0u,
  ~0u,
  ~0u,
  6,
  1,
  PROTOBUF_FIELD_OFFSET(::Rc::RctEdgeClass, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Rc::RctEdgeClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rc::RctEdgeClass, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Rc::RctEdgeClass, _impl_._from_),
  PROTOBUF_FIELD_OFFSET(::Rc::RctEdgeClass, _impl_._to_),
  PROTOBUF_FIELD_OFFSET(::Rc::RctEdgeClass, _impl_._is_break_),
  PROTOBUF_FIELD_OFFSET(::Rc::RctEdgeClass, _impl_._res_),
  PROTOBUF_FIELD_OFFSET(::Rc::RctEdgeClass, _impl_._is_in_order_),
  0,
  1,
  2,
  4,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::Rc::RcTreeClass, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Rc::RcTreeClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rc::RcTreeClass, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Rc::RcTreeClass, _impl_._root_),
  PROTOBUF_FIELD_OFFSET(::Rc::RcTreeClass, _impl_._str2nodes_),
  PROTOBUF_FIELD_OFFSET(::Rc::RcTreeClass, _impl_._edges_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Rc::RcNetCommonInfoClass, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Rc::RcNetCommonInfoClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rc::RcNetCommonInfoClass, _impl_._spef_cap_unit_),
  PROTOBUF_FIELD_OFFSET(::Rc::RcNetCommonInfoClass, _impl_._spef_resistance_unit_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Rc::EmptyRctClass, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Rc::EmptyRctClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rc::EmptyRctClass, _impl_.load_),
  0,
  PROTOBUF_FIELD_OFFSET(::Rc::RcNetClass, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Rc::RcNetClass, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Rc::RcNetClass, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rc::RcNetClass, _impl_._net_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Rc::RcNetClass, _impl_._rc_loop_),
  PROTOBUF_FIELD_OFFSET(::Rc::RcNetClass, _impl_._is_found_loop_),
  PROTOBUF_FIELD_OFFSET(::Rc::RcNetClass, _impl_._rc_net_common_info_),
  PROTOBUF_FIELD_OFFSET(::Rc::RcNetClass, _impl_._rct_),
  1,
  ~0u,
  ~0u,
  ~0u,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::Rc::ArnoldiNetClass, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Rc::ArnoldiNetClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rc::ArnoldiNetClass, _impl_.node_id_pair_),
  PROTOBUF_FIELD_OFFSET(::Rc::ArnoldiNetClass, _impl_._input_slew_),
  PROTOBUF_FIELD_OFFSET(::Rc::ArnoldiNetClass, _impl_._lib_arc_),
  PROTOBUF_FIELD_OFFSET(::Rc::ArnoldiNetClass, _impl_._nodal_caps_),
  PROTOBUF_FIELD_OFFSET(::Rc::ArnoldiNetClass, _impl_._conductances_),
  PROTOBUF_FIELD_OFFSET(::Rc::ArnoldiNetClass, _impl_._diag_b_w_),
  ~0u,
  2,
  3,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Rc::RcNetSyn, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Rc::RcNetSyn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rc::RcNetSyn, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Rc::RcNetSyn, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::Rc::RcNetSyn, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::Rc::RcNetSyn, _impl_.child_),
  2,
  3,
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::Rc::LaplaceMomentsStruct)},
  { 12, -1, -1, sizeof(::Rc::ModeTransPairMapDoubleMatrix)},
  { 19, 36, -1, sizeof(::Rc::RctNodeClass)},
  { 47, 59, -1, sizeof(::Rc::RctEdgeClass)},
  { 65, 75, -1, sizeof(::Rc::RcTreeClass)},
  { 79, 87, -1, sizeof(::Rc::RcNetCommonInfoClass)},
  { 89, 96, -1, sizeof(::Rc::EmptyRctClass)},
  { 97, 110, -1, sizeof(::Rc::RcNetClass)},
  { 116, 128, -1, sizeof(::Rc::ArnoldiNetClass)},
  { 134, 144, -1, sizeof(::Rc::RcNetSyn)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Rc::_LaplaceMomentsStruct_default_instance_._instance,
  &::Rc::_ModeTransPairMapDoubleMatrix_default_instance_._instance,
  &::Rc::_RctNodeClass_default_instance_._instance,
  &::Rc::_RctEdgeClass_default_instance_._instance,
  &::Rc::_RcTreeClass_default_instance_._instance,
  &::Rc::_RcNetCommonInfoClass_default_instance_._instance,
  &::Rc::_EmptyRctClass_default_instance_._instance,
  &::Rc::_RcNetClass_default_instance_._instance,
  &::Rc::_ArnoldiNetClass_default_instance_._instance,
  &::Rc::_RcNetSyn_default_instance_._instance,
};

const char descriptor_table_protodef_RcNet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013RcNet.proto\022\002Rc\032\021CommonTypes.proto\":\n\024"
  "LaplaceMomentsStruct\022\n\n\002y1\030\001 \002(\001\022\n\n\002y2\030\002"
  " \002(\001\022\n\n\002y3\030\003 \002(\001\"Q\n\034ModeTransPairMapDoub"
  "leMatrix\0221\n\003map\030\007 \003(\0132$.Common.Types.Mod"
  "eTransPairMapDouble\"\363\001\n\014RctNodeClass\022\n\n\002"
  "id\030\001 \002(\004\022\r\n\005_name\030\002 \002(\t\022\014\n\004_cap\030\003 \002(\001\022\r\n"
  "\005_load\030\004 \002(\001\022\016\n\006_delay\030\005 \002(\001\022\020\n\010property"
  "\030\006 \002(\r\022.\n\004maps\030\007 \003(\0132 .Rc.ModeTransPairM"
  "apDoubleMatrix\022\016\n\006_fanin\030\016 \003(\004\022\017\n\007_fanou"
  "t\030\017 \003(\004\022\014\n\004_obj\030\020 \002(\004\022*\n\010_moments\030\021 \002(\0132"
  "\030.Rc.LaplaceMomentsStruct\"m\n\014RctEdgeClas"
  "s\022\n\n\002id\030\001 \002(\004\022\r\n\005_from\030\002 \002(\004\022\013\n\003_to\030\003 \002("
  "\004\022\021\n\t_is_break\030\004 \002(\010\022\014\n\004_res\030\005 \002(\001\022\024\n\014_i"
  "s_in_order\030\006 \002(\010\"g\n\013RcTreeClass\022\n\n\002id\030\001 "
  "\002(\004\022\r\n\005_root\030\002 \002(\004\022-\n\n_str2nodes\030\003 \003(\0132\031"
  ".Common.Types.StrULongMap\022\016\n\006_edges\030\004 \003("
  "\004\"\221\001\n\024RcNetCommonInfoClass\0228\n\016_spef_cap_"
  "unit\030\001 \002(\0132 .Common.Types.CapacitiveUnit"
  "Enum\022\?\n\025_spef_resistance_unit\030\002 \002(\0132 .Co"
  "mmon.Types.ResistanceUnitEnum\"\035\n\rEmptyRc"
  "tClass\022\014\n\004load\030\001 \002(\001\"\271\001\n\nRcNetClass\022\014\n\004_"
  "net\030\001 \002(\004\022\"\n\005first\030\002 \001(\0132\021.Rc.EmptyRctCl"
  "assH\000\022\020\n\006second\030\003 \001(\004H\000\022\020\n\010_rc_loop\030\004 \003("
  "\004\022\026\n\016_is_found_loop\030\005 \002(\010\0225\n\023_rc_net_com"
  "mon_info\030\006 \002(\0132\030.Rc.RcNetCommonInfoClass"
  "B\006\n\004_rct\"\347\001\n\017ArnoldiNetClass\0221\n\014node_id_"
  "pair\030\001 \003(\0132\033.Common.Types.ULongUintPair\022"
  "\023\n\013_input_slew\030\002 \002(\001\022\020\n\010_lib_arc\030\003 \002(\004\022\023"
  "\n\013_nodal_caps\030\004 \003(\001\0221\n\r_conductances\030\005 \002"
  "(\0132\032.Common.Types.DoubleMatrix\0222\n\t_diag_"
  "B_W\030\006 \001(\0132\037.Common.Types.DoubleMatrixTup"
  "le\"h\n\010RcNetSyn\022\n\n\002id\030\001 \002(\004\022\014\n\004type\030\002 \002(\r"
  "\022\036\n\006parent\030\003 \002(\0132\016.Rc.RcNetClass\022\"\n\005chil"
  "d\030\004 \001(\0132\023.Rc.ArnoldiNetClass2M\n\014RcNetSer"
  "vice\022=\n\010readSpef\022\030.Common.Types.StrIntPa"
  "ir\032\027.Common.Types.ULongList"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_RcNet_2eproto_deps[1] = {
  &::descriptor_table_CommonTypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_RcNet_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_RcNet_2eproto = {
    false, false, 1427, descriptor_table_protodef_RcNet_2eproto,
    "RcNet.proto",
    &descriptor_table_RcNet_2eproto_once, descriptor_table_RcNet_2eproto_deps, 1, 10,
    schemas, file_default_instances, TableStruct_RcNet_2eproto::offsets,
    file_level_metadata_RcNet_2eproto, file_level_enum_descriptors_RcNet_2eproto,
    file_level_service_descriptors_RcNet_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_RcNet_2eproto_getter() {
  return &descriptor_table_RcNet_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_RcNet_2eproto(&descriptor_table_RcNet_2eproto);
namespace Rc {

// ===================================================================

class LaplaceMomentsStruct::_Internal {
 public:
  using HasBits = decltype(std::declval<LaplaceMomentsStruct>()._impl_._has_bits_);
  static void set_has_y1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

LaplaceMomentsStruct::LaplaceMomentsStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rc.LaplaceMomentsStruct)
}
LaplaceMomentsStruct::LaplaceMomentsStruct(const LaplaceMomentsStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaplaceMomentsStruct* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.y1_){}
    , decltype(_impl_.y2_){}
    , decltype(_impl_.y3_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.y1_, &from._impl_.y1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y3_) -
    reinterpret_cast<char*>(&_impl_.y1_)) + sizeof(_impl_.y3_));
  // @@protoc_insertion_point(copy_constructor:Rc.LaplaceMomentsStruct)
}

inline void LaplaceMomentsStruct::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.y1_){0}
    , decltype(_impl_.y2_){0}
    , decltype(_impl_.y3_){0}
  };
}

LaplaceMomentsStruct::~LaplaceMomentsStruct() {
  // @@protoc_insertion_point(destructor:Rc.LaplaceMomentsStruct)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaplaceMomentsStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaplaceMomentsStruct::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaplaceMomentsStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:Rc.LaplaceMomentsStruct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.y1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y3_) -
        reinterpret_cast<char*>(&_impl_.y1_)) + sizeof(_impl_.y3_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaplaceMomentsStruct::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double y1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_y1(&has_bits);
          _impl_.y1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double y2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_y2(&has_bits);
          _impl_.y2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double y3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_y3(&has_bits);
          _impl_.y3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaplaceMomentsStruct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rc.LaplaceMomentsStruct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required double y1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_y1(), target);
  }

  // required double y2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y2(), target);
  }

  // required double y3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_y3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rc.LaplaceMomentsStruct)
  return target;
}

size_t LaplaceMomentsStruct::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Rc.LaplaceMomentsStruct)
  size_t total_size = 0;

  if (_internal_has_y1()) {
    // required double y1 = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_y2()) {
    // required double y2 = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_y3()) {
    // required double y3 = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t LaplaceMomentsStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rc.LaplaceMomentsStruct)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double y1 = 1;
    total_size += 1 + 8;

    // required double y2 = 2;
    total_size += 1 + 8;

    // required double y3 = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaplaceMomentsStruct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaplaceMomentsStruct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaplaceMomentsStruct::GetClassData() const { return &_class_data_; }


void LaplaceMomentsStruct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaplaceMomentsStruct*>(&to_msg);
  auto& from = static_cast<const LaplaceMomentsStruct&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rc.LaplaceMomentsStruct)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.y1_ = from._impl_.y1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y2_ = from._impl_.y2_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.y3_ = from._impl_.y3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaplaceMomentsStruct::CopyFrom(const LaplaceMomentsStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rc.LaplaceMomentsStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaplaceMomentsStruct::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void LaplaceMomentsStruct::InternalSwap(LaplaceMomentsStruct* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaplaceMomentsStruct, _impl_.y3_)
      + sizeof(LaplaceMomentsStruct::_impl_.y3_)
      - PROTOBUF_FIELD_OFFSET(LaplaceMomentsStruct, _impl_.y1_)>(
          reinterpret_cast<char*>(&_impl_.y1_),
          reinterpret_cast<char*>(&other->_impl_.y1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaplaceMomentsStruct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RcNet_2eproto_getter, &descriptor_table_RcNet_2eproto_once,
      file_level_metadata_RcNet_2eproto[0]);
}

// ===================================================================

class ModeTransPairMapDoubleMatrix::_Internal {
 public:
};

void ModeTransPairMapDoubleMatrix::clear_map() {
  _impl_.map_.Clear();
}
ModeTransPairMapDoubleMatrix::ModeTransPairMapDoubleMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rc.ModeTransPairMapDoubleMatrix)
}
ModeTransPairMapDoubleMatrix::ModeTransPairMapDoubleMatrix(const ModeTransPairMapDoubleMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModeTransPairMapDoubleMatrix* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.map_){from._impl_.map_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rc.ModeTransPairMapDoubleMatrix)
}

inline void ModeTransPairMapDoubleMatrix::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.map_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ModeTransPairMapDoubleMatrix::~ModeTransPairMapDoubleMatrix() {
  // @@protoc_insertion_point(destructor:Rc.ModeTransPairMapDoubleMatrix)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModeTransPairMapDoubleMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_.~RepeatedPtrField();
}

void ModeTransPairMapDoubleMatrix::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModeTransPairMapDoubleMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:Rc.ModeTransPairMapDoubleMatrix)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModeTransPairMapDoubleMatrix::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Common.Types.ModeTransPairMapDouble map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModeTransPairMapDoubleMatrix::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rc.ModeTransPairMapDoubleMatrix)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Common.Types.ModeTransPairMapDouble map = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rc.ModeTransPairMapDoubleMatrix)
  return target;
}

size_t ModeTransPairMapDoubleMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rc.ModeTransPairMapDoubleMatrix)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Common.Types.ModeTransPairMapDouble map = 7;
  total_size += 1UL * this->_internal_map_size();
  for (const auto& msg : this->_impl_.map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModeTransPairMapDoubleMatrix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModeTransPairMapDoubleMatrix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModeTransPairMapDoubleMatrix::GetClassData() const { return &_class_data_; }


void ModeTransPairMapDoubleMatrix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModeTransPairMapDoubleMatrix*>(&to_msg);
  auto& from = static_cast<const ModeTransPairMapDoubleMatrix&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rc.ModeTransPairMapDoubleMatrix)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.map_.MergeFrom(from._impl_.map_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModeTransPairMapDoubleMatrix::CopyFrom(const ModeTransPairMapDoubleMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rc.ModeTransPairMapDoubleMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModeTransPairMapDoubleMatrix::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.map_))
    return false;
  return true;
}

void ModeTransPairMapDoubleMatrix::InternalSwap(ModeTransPairMapDoubleMatrix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.map_.InternalSwap(&other->_impl_.map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModeTransPairMapDoubleMatrix::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RcNet_2eproto_getter, &descriptor_table_RcNet_2eproto_once,
      file_level_metadata_RcNet_2eproto[1]);
}

// ===================================================================

class RctNodeClass::_Internal {
 public:
  using HasBits = decltype(std::declval<RctNodeClass>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has__name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has__cap(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has__load(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has__delay(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has__obj(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::Rc::LaplaceMomentsStruct& _moments(const RctNodeClass* msg);
  static void set_has__moments(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

const ::Rc::LaplaceMomentsStruct&
RctNodeClass::_Internal::_moments(const RctNodeClass* msg) {
  return *msg->_impl_._moments_;
}
RctNodeClass::RctNodeClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rc.RctNodeClass)
}
RctNodeClass::RctNodeClass(const RctNodeClass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RctNodeClass* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.maps_){from._impl_.maps_}
    , decltype(_impl_._fanin_){from._impl_._fanin_}
    , decltype(_impl_._fanout_){from._impl_._fanout_}
    , decltype(_impl_._name_){}
    , decltype(_impl_._moments_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_._cap_){}
    , decltype(_impl_._load_){}
    , decltype(_impl_._delay_){}
    , decltype(_impl_._obj_){}
    , decltype(_impl_.property_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_._name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has__name()) {
    _this->_impl_._name_.Set(from._internal__name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has__moments()) {
    _this->_impl_._moments_ = new ::Rc::LaplaceMomentsStruct(*from._impl_._moments_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.property_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.property_));
  // @@protoc_insertion_point(copy_constructor:Rc.RctNodeClass)
}

inline void RctNodeClass::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.maps_){arena}
    , decltype(_impl_._fanin_){arena}
    , decltype(_impl_._fanout_){arena}
    , decltype(_impl_._name_){}
    , decltype(_impl_._moments_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_._cap_){0}
    , decltype(_impl_._load_){0}
    , decltype(_impl_._delay_){0}
    , decltype(_impl_._obj_){uint64_t{0u}}
    , decltype(_impl_.property_){0u}
  };
  _impl_._name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_._name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RctNodeClass::~RctNodeClass() {
  // @@protoc_insertion_point(destructor:Rc.RctNodeClass)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RctNodeClass::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.maps_.~RepeatedPtrField();
  _impl_._fanin_.~RepeatedField();
  _impl_._fanout_.~RepeatedField();
  _impl_._name_.Destroy();
  if (this != internal_default_instance()) delete _impl_._moments_;
}

void RctNodeClass::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RctNodeClass::Clear() {
// @@protoc_insertion_point(message_clear_start:Rc.RctNodeClass)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.maps_.Clear();
  _impl_._fanin_.Clear();
  _impl_._fanout_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_._name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_._moments_ != nullptr);
      _impl_._moments_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.property_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.property_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RctNodeClass::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string _name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable__name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Rc.RctNodeClass._name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required double _cap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has__cap(&has_bits);
          _impl_._cap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double _load = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has__load(&has_bits);
          _impl_._load_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double _delay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has__delay(&has_bits);
          _impl_._delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint32 property = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_property(&has_bits);
          _impl_.property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Rc.ModeTransPairMapDoubleMatrix maps = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_maps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 _fanin = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add__fanin(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<112>(ptr));
        } else if (static_cast<uint8_t>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable__fanin(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 _fanout = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add__fanout(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<120>(ptr));
        } else if (static_cast<uint8_t>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable__fanout(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 _obj = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has__obj(&has_bits);
          _impl_._obj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Rc.LaplaceMomentsStruct _moments = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable__moments(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RctNodeClass::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rc.RctNodeClass)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // required string _name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal__name().data(), static_cast<int>(this->_internal__name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Rc.RctNodeClass._name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal__name(), target);
  }

  // required double _cap = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal__cap(), target);
  }

  // required double _load = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal__load(), target);
  }

  // required double _delay = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal__delay(), target);
  }

  // required uint32 property = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_property(), target);
  }

  // repeated .Rc.ModeTransPairMapDoubleMatrix maps = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_maps_size()); i < n; i++) {
    const auto& repfield = this->_internal_maps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint64 _fanin = 14;
  for (int i = 0, n = this->_internal__fanin_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal__fanin(i), target);
  }

  // repeated uint64 _fanout = 15;
  for (int i = 0, n = this->_internal__fanout_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(15, this->_internal__fanout(i), target);
  }

  // required uint64 _obj = 16;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal__obj(), target);
  }

  // required .Rc.LaplaceMomentsStruct _moments = 17;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::_moments(this),
        _Internal::_moments(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rc.RctNodeClass)
  return target;
}

size_t RctNodeClass::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Rc.RctNodeClass)
  size_t total_size = 0;

  if (_internal_has__name()) {
    // required string _name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal__name());
  }

  if (_internal_has__moments()) {
    // required .Rc.LaplaceMomentsStruct _moments = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_._moments_);
  }

  if (_internal_has_id()) {
    // required uint64 id = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  if (_internal_has__cap()) {
    // required double _cap = 3;
    total_size += 1 + 8;
  }

  if (_internal_has__load()) {
    // required double _load = 4;
    total_size += 1 + 8;
  }

  if (_internal_has__delay()) {
    // required double _delay = 5;
    total_size += 1 + 8;
  }

  if (_internal_has__obj()) {
    // required uint64 _obj = 16;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal__obj());
  }

  if (_internal_has_property()) {
    // required uint32 property = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_property());
  }

  return total_size;
}
size_t RctNodeClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rc.RctNodeClass)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string _name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal__name());

    // required .Rc.LaplaceMomentsStruct _moments = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_._moments_);

    // required uint64 id = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());

    // required double _cap = 3;
    total_size += 1 + 8;

    // required double _load = 4;
    total_size += 1 + 8;

    // required double _delay = 5;
    total_size += 1 + 8;

    // required uint64 _obj = 16;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal__obj());

    // required uint32 property = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_property());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Rc.ModeTransPairMapDoubleMatrix maps = 7;
  total_size += 1UL * this->_internal_maps_size();
  for (const auto& msg : this->_impl_.maps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 _fanin = 14;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_._fanin_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal__fanin_size());
    total_size += data_size;
  }

  // repeated uint64 _fanout = 15;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_._fanout_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal__fanout_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RctNodeClass::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RctNodeClass::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RctNodeClass::GetClassData() const { return &_class_data_; }


void RctNodeClass::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RctNodeClass*>(&to_msg);
  auto& from = static_cast<const RctNodeClass&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rc.RctNodeClass)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.maps_.MergeFrom(from._impl_.maps_);
  _this->_impl_._fanin_.MergeFrom(from._impl_._fanin_);
  _this->_impl_._fanout_.MergeFrom(from._impl_._fanout_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set__name(from._internal__name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable__moments()->::Rc::LaplaceMomentsStruct::MergeFrom(
          from._internal__moments());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_._cap_ = from._impl_._cap_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_._load_ = from._impl_._load_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_._delay_ = from._impl_._delay_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_._obj_ = from._impl_._obj_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.property_ = from._impl_.property_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RctNodeClass::CopyFrom(const RctNodeClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rc.RctNodeClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RctNodeClass::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.maps_))
    return false;
  if (_internal_has__moments()) {
    if (!_impl_._moments_->IsInitialized()) return false;
  }
  return true;
}

void RctNodeClass::InternalSwap(RctNodeClass* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.maps_.InternalSwap(&other->_impl_.maps_);
  _impl_._fanin_.InternalSwap(&other->_impl_._fanin_);
  _impl_._fanout_.InternalSwap(&other->_impl_._fanout_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_._name_, lhs_arena,
      &other->_impl_._name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RctNodeClass, _impl_.property_)
      + sizeof(RctNodeClass::_impl_.property_)
      - PROTOBUF_FIELD_OFFSET(RctNodeClass, _impl_._moments_)>(
          reinterpret_cast<char*>(&_impl_._moments_),
          reinterpret_cast<char*>(&other->_impl_._moments_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RctNodeClass::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RcNet_2eproto_getter, &descriptor_table_RcNet_2eproto_once,
      file_level_metadata_RcNet_2eproto[2]);
}

// ===================================================================

class RctEdgeClass::_Internal {
 public:
  using HasBits = decltype(std::declval<RctEdgeClass>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has__from(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has__to(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has__is_break(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has__res(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has__is_in_order(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

RctEdgeClass::RctEdgeClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rc.RctEdgeClass)
}
RctEdgeClass::RctEdgeClass(const RctEdgeClass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RctEdgeClass* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_._from_){}
    , decltype(_impl_._to_){}
    , decltype(_impl_._res_){}
    , decltype(_impl_._is_break_){}
    , decltype(_impl_._is_in_order_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_._is_in_order_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_._is_in_order_));
  // @@protoc_insertion_point(copy_constructor:Rc.RctEdgeClass)
}

inline void RctEdgeClass::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_._from_){uint64_t{0u}}
    , decltype(_impl_._to_){uint64_t{0u}}
    , decltype(_impl_._res_){0}
    , decltype(_impl_._is_break_){false}
    , decltype(_impl_._is_in_order_){false}
  };
}

RctEdgeClass::~RctEdgeClass() {
  // @@protoc_insertion_point(destructor:Rc.RctEdgeClass)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RctEdgeClass::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RctEdgeClass::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RctEdgeClass::Clear() {
// @@protoc_insertion_point(message_clear_start:Rc.RctEdgeClass)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_._is_in_order_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_._is_in_order_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RctEdgeClass::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 _from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has__from(&has_bits);
          _impl_._from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 _to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has__to(&has_bits);
          _impl_._to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool _is_break = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has__is_break(&has_bits);
          _impl_._is_break_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double _res = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has__res(&has_bits);
          _impl_._res_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required bool _is_in_order = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has__is_in_order(&has_bits);
          _impl_._is_in_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RctEdgeClass::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rc.RctEdgeClass)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // required uint64 _from = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal__from(), target);
  }

  // required uint64 _to = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal__to(), target);
  }

  // required bool _is_break = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal__is_break(), target);
  }

  // required double _res = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal__res(), target);
  }

  // required bool _is_in_order = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal__is_in_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rc.RctEdgeClass)
  return target;
}

size_t RctEdgeClass::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Rc.RctEdgeClass)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required uint64 id = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  if (_internal_has__from()) {
    // required uint64 _from = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__from());
  }

  if (_internal_has__to()) {
    // required uint64 _to = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__to());
  }

  if (_internal_has__res()) {
    // required double _res = 5;
    total_size += 1 + 8;
  }

  if (_internal_has__is_break()) {
    // required bool _is_break = 4;
    total_size += 1 + 1;
  }

  if (_internal_has__is_in_order()) {
    // required bool _is_in_order = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t RctEdgeClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rc.RctEdgeClass)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint64 id = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());

    // required uint64 _from = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__from());

    // required uint64 _to = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__to());

    // required double _res = 5;
    total_size += 1 + 8;

    // required bool _is_break = 4;
    total_size += 1 + 1;

    // required bool _is_in_order = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RctEdgeClass::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RctEdgeClass::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RctEdgeClass::GetClassData() const { return &_class_data_; }


void RctEdgeClass::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RctEdgeClass*>(&to_msg);
  auto& from = static_cast<const RctEdgeClass&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rc.RctEdgeClass)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_._from_ = from._impl_._from_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_._to_ = from._impl_._to_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_._res_ = from._impl_._res_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_._is_break_ = from._impl_._is_break_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_._is_in_order_ = from._impl_._is_in_order_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RctEdgeClass::CopyFrom(const RctEdgeClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rc.RctEdgeClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RctEdgeClass::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RctEdgeClass::InternalSwap(RctEdgeClass* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RctEdgeClass, _impl_._is_in_order_)
      + sizeof(RctEdgeClass::_impl_._is_in_order_)
      - PROTOBUF_FIELD_OFFSET(RctEdgeClass, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RctEdgeClass::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RcNet_2eproto_getter, &descriptor_table_RcNet_2eproto_once,
      file_level_metadata_RcNet_2eproto[3]);
}

// ===================================================================

class RcTreeClass::_Internal {
 public:
  using HasBits = decltype(std::declval<RcTreeClass>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has__root(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

void RcTreeClass::clear__str2nodes() {
  _impl_._str2nodes_.Clear();
}
RcTreeClass::RcTreeClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rc.RcTreeClass)
}
RcTreeClass::RcTreeClass(const RcTreeClass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RcTreeClass* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_._str2nodes_){from._impl_._str2nodes_}
    , decltype(_impl_._edges_){from._impl_._edges_}
    , decltype(_impl_.id_){}
    , decltype(_impl_._root_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_._root_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_._root_));
  // @@protoc_insertion_point(copy_constructor:Rc.RcTreeClass)
}

inline void RcTreeClass::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_._str2nodes_){arena}
    , decltype(_impl_._edges_){arena}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_._root_){uint64_t{0u}}
  };
}

RcTreeClass::~RcTreeClass() {
  // @@protoc_insertion_point(destructor:Rc.RcTreeClass)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RcTreeClass::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._str2nodes_.~RepeatedPtrField();
  _impl_._edges_.~RepeatedField();
}

void RcTreeClass::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RcTreeClass::Clear() {
// @@protoc_insertion_point(message_clear_start:Rc.RcTreeClass)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._str2nodes_.Clear();
  _impl_._edges_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_._root_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_._root_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RcTreeClass::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 _root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has__root(&has_bits);
          _impl_._root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Common.Types.StrULongMap _str2nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add__str2nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 _edges = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add__edges(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable__edges(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RcTreeClass::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rc.RcTreeClass)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // required uint64 _root = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal__root(), target);
  }

  // repeated .Common.Types.StrULongMap _str2nodes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal__str2nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal__str2nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint64 _edges = 4;
  for (int i = 0, n = this->_internal__edges_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal__edges(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rc.RcTreeClass)
  return target;
}

size_t RcTreeClass::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Rc.RcTreeClass)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required uint64 id = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  if (_internal_has__root()) {
    // required uint64 _root = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__root());
  }

  return total_size;
}
size_t RcTreeClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rc.RcTreeClass)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 id = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());

    // required uint64 _root = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__root());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Common.Types.StrULongMap _str2nodes = 3;
  total_size += 1UL * this->_internal__str2nodes_size();
  for (const auto& msg : this->_impl_._str2nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 _edges = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_._edges_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal__edges_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RcTreeClass::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RcTreeClass::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RcTreeClass::GetClassData() const { return &_class_data_; }


void RcTreeClass::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RcTreeClass*>(&to_msg);
  auto& from = static_cast<const RcTreeClass&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rc.RcTreeClass)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_._str2nodes_.MergeFrom(from._impl_._str2nodes_);
  _this->_impl_._edges_.MergeFrom(from._impl_._edges_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_._root_ = from._impl_._root_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RcTreeClass::CopyFrom(const RcTreeClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rc.RcTreeClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RcTreeClass::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_._str2nodes_))
    return false;
  return true;
}

void RcTreeClass::InternalSwap(RcTreeClass* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_._str2nodes_.InternalSwap(&other->_impl_._str2nodes_);
  _impl_._edges_.InternalSwap(&other->_impl_._edges_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RcTreeClass, _impl_._root_)
      + sizeof(RcTreeClass::_impl_._root_)
      - PROTOBUF_FIELD_OFFSET(RcTreeClass, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RcTreeClass::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RcNet_2eproto_getter, &descriptor_table_RcNet_2eproto_once,
      file_level_metadata_RcNet_2eproto[4]);
}

// ===================================================================

class RcNetCommonInfoClass::_Internal {
 public:
  using HasBits = decltype(std::declval<RcNetCommonInfoClass>()._impl_._has_bits_);
  static const ::Common::Types::CapacitiveUnitEnum& _spef_cap_unit(const RcNetCommonInfoClass* msg);
  static void set_has__spef_cap_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Common::Types::ResistanceUnitEnum& _spef_resistance_unit(const RcNetCommonInfoClass* msg);
  static void set_has__spef_resistance_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::Common::Types::CapacitiveUnitEnum&
RcNetCommonInfoClass::_Internal::_spef_cap_unit(const RcNetCommonInfoClass* msg) {
  return *msg->_impl_._spef_cap_unit_;
}
const ::Common::Types::ResistanceUnitEnum&
RcNetCommonInfoClass::_Internal::_spef_resistance_unit(const RcNetCommonInfoClass* msg) {
  return *msg->_impl_._spef_resistance_unit_;
}
void RcNetCommonInfoClass::clear__spef_cap_unit() {
  if (_impl_._spef_cap_unit_ != nullptr) _impl_._spef_cap_unit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RcNetCommonInfoClass::clear__spef_resistance_unit() {
  if (_impl_._spef_resistance_unit_ != nullptr) _impl_._spef_resistance_unit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
RcNetCommonInfoClass::RcNetCommonInfoClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rc.RcNetCommonInfoClass)
}
RcNetCommonInfoClass::RcNetCommonInfoClass(const RcNetCommonInfoClass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RcNetCommonInfoClass* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_._spef_cap_unit_){nullptr}
    , decltype(_impl_._spef_resistance_unit_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has__spef_cap_unit()) {
    _this->_impl_._spef_cap_unit_ = new ::Common::Types::CapacitiveUnitEnum(*from._impl_._spef_cap_unit_);
  }
  if (from._internal_has__spef_resistance_unit()) {
    _this->_impl_._spef_resistance_unit_ = new ::Common::Types::ResistanceUnitEnum(*from._impl_._spef_resistance_unit_);
  }
  // @@protoc_insertion_point(copy_constructor:Rc.RcNetCommonInfoClass)
}

inline void RcNetCommonInfoClass::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_._spef_cap_unit_){nullptr}
    , decltype(_impl_._spef_resistance_unit_){nullptr}
  };
}

RcNetCommonInfoClass::~RcNetCommonInfoClass() {
  // @@protoc_insertion_point(destructor:Rc.RcNetCommonInfoClass)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RcNetCommonInfoClass::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_._spef_cap_unit_;
  if (this != internal_default_instance()) delete _impl_._spef_resistance_unit_;
}

void RcNetCommonInfoClass::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RcNetCommonInfoClass::Clear() {
// @@protoc_insertion_point(message_clear_start:Rc.RcNetCommonInfoClass)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_._spef_cap_unit_ != nullptr);
      _impl_._spef_cap_unit_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_._spef_resistance_unit_ != nullptr);
      _impl_._spef_resistance_unit_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RcNetCommonInfoClass::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Common.Types.CapacitiveUnitEnum _spef_cap_unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable__spef_cap_unit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Common.Types.ResistanceUnitEnum _spef_resistance_unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable__spef_resistance_unit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RcNetCommonInfoClass::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rc.RcNetCommonInfoClass)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Common.Types.CapacitiveUnitEnum _spef_cap_unit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::_spef_cap_unit(this),
        _Internal::_spef_cap_unit(this).GetCachedSize(), target, stream);
  }

  // required .Common.Types.ResistanceUnitEnum _spef_resistance_unit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::_spef_resistance_unit(this),
        _Internal::_spef_resistance_unit(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rc.RcNetCommonInfoClass)
  return target;
}

size_t RcNetCommonInfoClass::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Rc.RcNetCommonInfoClass)
  size_t total_size = 0;

  if (_internal_has__spef_cap_unit()) {
    // required .Common.Types.CapacitiveUnitEnum _spef_cap_unit = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_._spef_cap_unit_);
  }

  if (_internal_has__spef_resistance_unit()) {
    // required .Common.Types.ResistanceUnitEnum _spef_resistance_unit = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_._spef_resistance_unit_);
  }

  return total_size;
}
size_t RcNetCommonInfoClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rc.RcNetCommonInfoClass)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Common.Types.CapacitiveUnitEnum _spef_cap_unit = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_._spef_cap_unit_);

    // required .Common.Types.ResistanceUnitEnum _spef_resistance_unit = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_._spef_resistance_unit_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RcNetCommonInfoClass::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RcNetCommonInfoClass::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RcNetCommonInfoClass::GetClassData() const { return &_class_data_; }


void RcNetCommonInfoClass::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RcNetCommonInfoClass*>(&to_msg);
  auto& from = static_cast<const RcNetCommonInfoClass&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rc.RcNetCommonInfoClass)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable__spef_cap_unit()->::Common::Types::CapacitiveUnitEnum::MergeFrom(
          from._internal__spef_cap_unit());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable__spef_resistance_unit()->::Common::Types::ResistanceUnitEnum::MergeFrom(
          from._internal__spef_resistance_unit());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RcNetCommonInfoClass::CopyFrom(const RcNetCommonInfoClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rc.RcNetCommonInfoClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RcNetCommonInfoClass::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has__spef_cap_unit()) {
    if (!_impl_._spef_cap_unit_->IsInitialized()) return false;
  }
  if (_internal_has__spef_resistance_unit()) {
    if (!_impl_._spef_resistance_unit_->IsInitialized()) return false;
  }
  return true;
}

void RcNetCommonInfoClass::InternalSwap(RcNetCommonInfoClass* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RcNetCommonInfoClass, _impl_._spef_resistance_unit_)
      + sizeof(RcNetCommonInfoClass::_impl_._spef_resistance_unit_)
      - PROTOBUF_FIELD_OFFSET(RcNetCommonInfoClass, _impl_._spef_cap_unit_)>(
          reinterpret_cast<char*>(&_impl_._spef_cap_unit_),
          reinterpret_cast<char*>(&other->_impl_._spef_cap_unit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RcNetCommonInfoClass::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RcNet_2eproto_getter, &descriptor_table_RcNet_2eproto_once,
      file_level_metadata_RcNet_2eproto[5]);
}

// ===================================================================

class EmptyRctClass::_Internal {
 public:
  using HasBits = decltype(std::declval<EmptyRctClass>()._impl_._has_bits_);
  static void set_has_load(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

EmptyRctClass::EmptyRctClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rc.EmptyRctClass)
}
EmptyRctClass::EmptyRctClass(const EmptyRctClass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmptyRctClass* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.load_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.load_ = from._impl_.load_;
  // @@protoc_insertion_point(copy_constructor:Rc.EmptyRctClass)
}

inline void EmptyRctClass::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.load_){0}
  };
}

EmptyRctClass::~EmptyRctClass() {
  // @@protoc_insertion_point(destructor:Rc.EmptyRctClass)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmptyRctClass::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EmptyRctClass::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmptyRctClass::Clear() {
// @@protoc_insertion_point(message_clear_start:Rc.EmptyRctClass)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.load_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmptyRctClass::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double load = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_load(&has_bits);
          _impl_.load_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmptyRctClass::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rc.EmptyRctClass)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required double load = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_load(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rc.EmptyRctClass)
  return target;
}

size_t EmptyRctClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rc.EmptyRctClass)
  size_t total_size = 0;

  // required double load = 1;
  if (_internal_has_load()) {
    total_size += 1 + 8;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmptyRctClass::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmptyRctClass::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmptyRctClass::GetClassData() const { return &_class_data_; }


void EmptyRctClass::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmptyRctClass*>(&to_msg);
  auto& from = static_cast<const EmptyRctClass&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rc.EmptyRctClass)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_load()) {
    _this->_internal_set_load(from._internal_load());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmptyRctClass::CopyFrom(const EmptyRctClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rc.EmptyRctClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyRctClass::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void EmptyRctClass::InternalSwap(EmptyRctClass* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.load_, other->_impl_.load_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmptyRctClass::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RcNet_2eproto_getter, &descriptor_table_RcNet_2eproto_once,
      file_level_metadata_RcNet_2eproto[6]);
}

// ===================================================================

class RcNetClass::_Internal {
 public:
  using HasBits = decltype(std::declval<RcNetClass>()._impl_._has_bits_);
  static void set_has__net(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Rc::EmptyRctClass& first(const RcNetClass* msg);
  static void set_has__is_found_loop(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Rc::RcNetCommonInfoClass& _rc_net_common_info(const RcNetClass* msg);
  static void set_has__rc_net_common_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::Rc::EmptyRctClass&
RcNetClass::_Internal::first(const RcNetClass* msg) {
  return *msg->_impl_._rct_.first_;
}
const ::Rc::RcNetCommonInfoClass&
RcNetClass::_Internal::_rc_net_common_info(const RcNetClass* msg) {
  return *msg->_impl_._rc_net_common_info_;
}
void RcNetClass::set_allocated_first(::Rc::EmptyRctClass* first) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear__rct();
  if (first) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(first);
    if (message_arena != submessage_arena) {
      first = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, first, submessage_arena);
    }
    set_has_first();
    _impl_._rct_.first_ = first;
  }
  // @@protoc_insertion_point(field_set_allocated:Rc.RcNetClass.first)
}
RcNetClass::RcNetClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rc.RcNetClass)
}
RcNetClass::RcNetClass(const RcNetClass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RcNetClass* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_._rc_loop_){from._impl_._rc_loop_}
    , decltype(_impl_._rc_net_common_info_){nullptr}
    , decltype(_impl_._net_){}
    , decltype(_impl_._is_found_loop_){}
    , decltype(_impl_._rct_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has__rc_net_common_info()) {
    _this->_impl_._rc_net_common_info_ = new ::Rc::RcNetCommonInfoClass(*from._impl_._rc_net_common_info_);
  }
  ::memcpy(&_impl_._net_, &from._impl_._net_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_._is_found_loop_) -
    reinterpret_cast<char*>(&_impl_._net_)) + sizeof(_impl_._is_found_loop_));
  clear_has__rct();
  switch (from._rct_case()) {
    case kFirst: {
      _this->_internal_mutable_first()->::Rc::EmptyRctClass::MergeFrom(
          from._internal_first());
      break;
    }
    case kSecond: {
      _this->_internal_set_second(from._internal_second());
      break;
    }
    case _RCT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Rc.RcNetClass)
}

inline void RcNetClass::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_._rc_loop_){arena}
    , decltype(_impl_._rc_net_common_info_){nullptr}
    , decltype(_impl_._net_){uint64_t{0u}}
    , decltype(_impl_._is_found_loop_){false}
    , decltype(_impl_._rct_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has__rct();
}

RcNetClass::~RcNetClass() {
  // @@protoc_insertion_point(destructor:Rc.RcNetClass)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RcNetClass::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._rc_loop_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_._rc_net_common_info_;
  if (has__rct()) {
    clear__rct();
  }
}

void RcNetClass::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RcNetClass::clear__rct() {
// @@protoc_insertion_point(one_of_clear_start:Rc.RcNetClass)
  switch (_rct_case()) {
    case kFirst: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_._rct_.first_;
      }
      break;
    }
    case kSecond: {
      // No need to clear
      break;
    }
    case _RCT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = _RCT_NOT_SET;
}


void RcNetClass::Clear() {
// @@protoc_insertion_point(message_clear_start:Rc.RcNetClass)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._rc_loop_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_._rc_net_common_info_ != nullptr);
    _impl_._rc_net_common_info_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_._net_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_._is_found_loop_) -
        reinterpret_cast<char*>(&_impl_._net_)) + sizeof(_impl_._is_found_loop_));
  }
  clear__rct();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RcNetClass::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 _net = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has__net(&has_bits);
          _impl_._net_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Rc.EmptyRctClass first = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_first(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 second = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_second(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 _rc_loop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add__rc_loop(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable__rc_loop(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool _is_found_loop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has__is_found_loop(&has_bits);
          _impl_._is_found_loop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Rc.RcNetCommonInfoClass _rc_net_common_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable__rc_net_common_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RcNetClass::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rc.RcNetClass)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 _net = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal__net(), target);
  }

  switch (_rct_case()) {
    case kFirst: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::first(this),
          _Internal::first(this).GetCachedSize(), target, stream);
      break;
    }
    case kSecond: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_second(), target);
      break;
    }
    default: ;
  }
  // repeated uint64 _rc_loop = 4;
  for (int i = 0, n = this->_internal__rc_loop_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal__rc_loop(i), target);
  }

  // required bool _is_found_loop = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal__is_found_loop(), target);
  }

  // required .Rc.RcNetCommonInfoClass _rc_net_common_info = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::_rc_net_common_info(this),
        _Internal::_rc_net_common_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rc.RcNetClass)
  return target;
}

size_t RcNetClass::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Rc.RcNetClass)
  size_t total_size = 0;

  if (_internal_has__rc_net_common_info()) {
    // required .Rc.RcNetCommonInfoClass _rc_net_common_info = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_._rc_net_common_info_);
  }

  if (_internal_has__net()) {
    // required uint64 _net = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__net());
  }

  if (_internal_has__is_found_loop()) {
    // required bool _is_found_loop = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t RcNetClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rc.RcNetClass)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .Rc.RcNetCommonInfoClass _rc_net_common_info = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_._rc_net_common_info_);

    // required uint64 _net = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__net());

    // required bool _is_found_loop = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 _rc_loop = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_._rc_loop_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal__rc_loop_size());
    total_size += data_size;
  }

  switch (_rct_case()) {
    // .Rc.EmptyRctClass first = 2;
    case kFirst: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_._rct_.first_);
      break;
    }
    // uint64 second = 3;
    case kSecond: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_second());
      break;
    }
    case _RCT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RcNetClass::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RcNetClass::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RcNetClass::GetClassData() const { return &_class_data_; }


void RcNetClass::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RcNetClass*>(&to_msg);
  auto& from = static_cast<const RcNetClass&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rc.RcNetClass)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_._rc_loop_.MergeFrom(from._impl_._rc_loop_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable__rc_net_common_info()->::Rc::RcNetCommonInfoClass::MergeFrom(
          from._internal__rc_net_common_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_._net_ = from._impl_._net_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_._is_found_loop_ = from._impl_._is_found_loop_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from._rct_case()) {
    case kFirst: {
      _this->_internal_mutable_first()->::Rc::EmptyRctClass::MergeFrom(
          from._internal_first());
      break;
    }
    case kSecond: {
      _this->_internal_set_second(from._internal_second());
      break;
    }
    case _RCT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RcNetClass::CopyFrom(const RcNetClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rc.RcNetClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RcNetClass::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has__rc_net_common_info()) {
    if (!_impl_._rc_net_common_info_->IsInitialized()) return false;
  }
  switch (_rct_case()) {
    case kFirst: {
      if (_internal_has_first()) {
        if (!_impl_._rct_.first_->IsInitialized()) return false;
      }
      break;
    }
    case kSecond: {
      break;
    }
    case _RCT_NOT_SET: {
      break;
    }
  }
  return true;
}

void RcNetClass::InternalSwap(RcNetClass* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_._rc_loop_.InternalSwap(&other->_impl_._rc_loop_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RcNetClass, _impl_._is_found_loop_)
      + sizeof(RcNetClass::_impl_._is_found_loop_)
      - PROTOBUF_FIELD_OFFSET(RcNetClass, _impl_._rc_net_common_info_)>(
          reinterpret_cast<char*>(&_impl_._rc_net_common_info_),
          reinterpret_cast<char*>(&other->_impl_._rc_net_common_info_));
  swap(_impl_._rct_, other->_impl_._rct_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RcNetClass::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RcNet_2eproto_getter, &descriptor_table_RcNet_2eproto_once,
      file_level_metadata_RcNet_2eproto[7]);
}

// ===================================================================

class ArnoldiNetClass::_Internal {
 public:
  using HasBits = decltype(std::declval<ArnoldiNetClass>()._impl_._has_bits_);
  static void set_has__input_slew(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has__lib_arc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Common::Types::DoubleMatrix& _conductances(const ArnoldiNetClass* msg);
  static void set_has__conductances(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Common::Types::DoubleMatrixTuple& _diag_b_w(const ArnoldiNetClass* msg);
  static void set_has__diag_b_w(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000d) ^ 0x0000000d) != 0;
  }
};

const ::Common::Types::DoubleMatrix&
ArnoldiNetClass::_Internal::_conductances(const ArnoldiNetClass* msg) {
  return *msg->_impl_._conductances_;
}
const ::Common::Types::DoubleMatrixTuple&
ArnoldiNetClass::_Internal::_diag_b_w(const ArnoldiNetClass* msg) {
  return *msg->_impl_._diag_b_w_;
}
void ArnoldiNetClass::clear_node_id_pair() {
  _impl_.node_id_pair_.Clear();
}
void ArnoldiNetClass::clear__conductances() {
  if (_impl_._conductances_ != nullptr) _impl_._conductances_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ArnoldiNetClass::clear__diag_b_w() {
  if (_impl_._diag_b_w_ != nullptr) _impl_._diag_b_w_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ArnoldiNetClass::ArnoldiNetClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rc.ArnoldiNetClass)
}
ArnoldiNetClass::ArnoldiNetClass(const ArnoldiNetClass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ArnoldiNetClass* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_id_pair_){from._impl_.node_id_pair_}
    , decltype(_impl_._nodal_caps_){from._impl_._nodal_caps_}
    , decltype(_impl_._conductances_){nullptr}
    , decltype(_impl_._diag_b_w_){nullptr}
    , decltype(_impl_._input_slew_){}
    , decltype(_impl_._lib_arc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has__conductances()) {
    _this->_impl_._conductances_ = new ::Common::Types::DoubleMatrix(*from._impl_._conductances_);
  }
  if (from._internal_has__diag_b_w()) {
    _this->_impl_._diag_b_w_ = new ::Common::Types::DoubleMatrixTuple(*from._impl_._diag_b_w_);
  }
  ::memcpy(&_impl_._input_slew_, &from._impl_._input_slew_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_._lib_arc_) -
    reinterpret_cast<char*>(&_impl_._input_slew_)) + sizeof(_impl_._lib_arc_));
  // @@protoc_insertion_point(copy_constructor:Rc.ArnoldiNetClass)
}

inline void ArnoldiNetClass::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_id_pair_){arena}
    , decltype(_impl_._nodal_caps_){arena}
    , decltype(_impl_._conductances_){nullptr}
    , decltype(_impl_._diag_b_w_){nullptr}
    , decltype(_impl_._input_slew_){0}
    , decltype(_impl_._lib_arc_){uint64_t{0u}}
  };
}

ArnoldiNetClass::~ArnoldiNetClass() {
  // @@protoc_insertion_point(destructor:Rc.ArnoldiNetClass)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ArnoldiNetClass::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_id_pair_.~RepeatedPtrField();
  _impl_._nodal_caps_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_._conductances_;
  if (this != internal_default_instance()) delete _impl_._diag_b_w_;
}

void ArnoldiNetClass::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ArnoldiNetClass::Clear() {
// @@protoc_insertion_point(message_clear_start:Rc.ArnoldiNetClass)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_id_pair_.Clear();
  _impl_._nodal_caps_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_._conductances_ != nullptr);
      _impl_._conductances_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_._diag_b_w_ != nullptr);
      _impl_._diag_b_w_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_._input_slew_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_._lib_arc_) -
        reinterpret_cast<char*>(&_impl_._input_slew_)) + sizeof(_impl_._lib_arc_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArnoldiNetClass::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Common.Types.ULongUintPair node_id_pair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_id_pair(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required double _input_slew = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has__input_slew(&has_bits);
          _impl_._input_slew_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint64 _lib_arc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has__lib_arc(&has_bits);
          _impl_._lib_arc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double _nodal_caps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add__nodal_caps(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<33>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable__nodal_caps(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Common.Types.DoubleMatrix _conductances = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable__conductances(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Common.Types.DoubleMatrixTuple _diag_B_W = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable__diag_b_w(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArnoldiNetClass::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rc.ArnoldiNetClass)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Common.Types.ULongUintPair node_id_pair = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_node_id_pair_size()); i < n; i++) {
    const auto& repfield = this->_internal_node_id_pair(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required double _input_slew = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal__input_slew(), target);
  }

  // required uint64 _lib_arc = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal__lib_arc(), target);
  }

  // repeated double _nodal_caps = 4;
  for (int i = 0, n = this->_internal__nodal_caps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal__nodal_caps(i), target);
  }

  // required .Common.Types.DoubleMatrix _conductances = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::_conductances(this),
        _Internal::_conductances(this).GetCachedSize(), target, stream);
  }

  // optional .Common.Types.DoubleMatrixTuple _diag_B_W = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::_diag_b_w(this),
        _Internal::_diag_b_w(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rc.ArnoldiNetClass)
  return target;
}

size_t ArnoldiNetClass::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Rc.ArnoldiNetClass)
  size_t total_size = 0;

  if (_internal_has__conductances()) {
    // required .Common.Types.DoubleMatrix _conductances = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_._conductances_);
  }

  if (_internal_has__input_slew()) {
    // required double _input_slew = 2;
    total_size += 1 + 8;
  }

  if (_internal_has__lib_arc()) {
    // required uint64 _lib_arc = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__lib_arc());
  }

  return total_size;
}
size_t ArnoldiNetClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rc.ArnoldiNetClass)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required .Common.Types.DoubleMatrix _conductances = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_._conductances_);

    // required double _input_slew = 2;
    total_size += 1 + 8;

    // required uint64 _lib_arc = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__lib_arc());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Common.Types.ULongUintPair node_id_pair = 1;
  total_size += 1UL * this->_internal_node_id_pair_size();
  for (const auto& msg : this->_impl_.node_id_pair_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double _nodal_caps = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal__nodal_caps_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal__nodal_caps_size());
    total_size += data_size;
  }

  // optional .Common.Types.DoubleMatrixTuple _diag_B_W = 6;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_._diag_b_w_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArnoldiNetClass::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ArnoldiNetClass::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArnoldiNetClass::GetClassData() const { return &_class_data_; }


void ArnoldiNetClass::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ArnoldiNetClass*>(&to_msg);
  auto& from = static_cast<const ArnoldiNetClass&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rc.ArnoldiNetClass)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.node_id_pair_.MergeFrom(from._impl_.node_id_pair_);
  _this->_impl_._nodal_caps_.MergeFrom(from._impl_._nodal_caps_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable__conductances()->::Common::Types::DoubleMatrix::MergeFrom(
          from._internal__conductances());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable__diag_b_w()->::Common::Types::DoubleMatrixTuple::MergeFrom(
          from._internal__diag_b_w());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_._input_slew_ = from._impl_._input_slew_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_._lib_arc_ = from._impl_._lib_arc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArnoldiNetClass::CopyFrom(const ArnoldiNetClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rc.ArnoldiNetClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArnoldiNetClass::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.node_id_pair_))
    return false;
  return true;
}

void ArnoldiNetClass::InternalSwap(ArnoldiNetClass* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.node_id_pair_.InternalSwap(&other->_impl_.node_id_pair_);
  _impl_._nodal_caps_.InternalSwap(&other->_impl_._nodal_caps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArnoldiNetClass, _impl_._lib_arc_)
      + sizeof(ArnoldiNetClass::_impl_._lib_arc_)
      - PROTOBUF_FIELD_OFFSET(ArnoldiNetClass, _impl_._conductances_)>(
          reinterpret_cast<char*>(&_impl_._conductances_),
          reinterpret_cast<char*>(&other->_impl_._conductances_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArnoldiNetClass::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RcNet_2eproto_getter, &descriptor_table_RcNet_2eproto_once,
      file_level_metadata_RcNet_2eproto[8]);
}

// ===================================================================

class RcNetSyn::_Internal {
 public:
  using HasBits = decltype(std::declval<RcNetSyn>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Rc::RcNetClass& parent(const RcNetSyn* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Rc::ArnoldiNetClass& child(const RcNetSyn* msg);
  static void set_has_child(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000d) ^ 0x0000000d) != 0;
  }
};

const ::Rc::RcNetClass&
RcNetSyn::_Internal::parent(const RcNetSyn* msg) {
  return *msg->_impl_.parent_;
}
const ::Rc::ArnoldiNetClass&
RcNetSyn::_Internal::child(const RcNetSyn* msg) {
  return *msg->_impl_.child_;
}
RcNetSyn::RcNetSyn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rc.RcNetSyn)
}
RcNetSyn::RcNetSyn(const RcNetSyn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RcNetSyn* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.child_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::Rc::RcNetClass(*from._impl_.parent_);
  }
  if (from._internal_has_child()) {
    _this->_impl_.child_ = new ::Rc::ArnoldiNetClass(*from._impl_.child_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:Rc.RcNetSyn)
}

inline void RcNetSyn::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.child_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.type_){0u}
  };
}

RcNetSyn::~RcNetSyn() {
  // @@protoc_insertion_point(destructor:Rc.RcNetSyn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RcNetSyn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.child_;
}

void RcNetSyn::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RcNetSyn::Clear() {
// @@protoc_insertion_point(message_clear_start:Rc.RcNetSyn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.parent_ != nullptr);
      _impl_.parent_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.child_ != nullptr);
      _impl_.child_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RcNetSyn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Rc.RcNetClass parent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Rc.ArnoldiNetClass child = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RcNetSyn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rc.RcNetSyn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // required .Rc.RcNetClass parent = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::parent(this),
        _Internal::parent(this).GetCachedSize(), target, stream);
  }

  // optional .Rc.ArnoldiNetClass child = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::child(this),
        _Internal::child(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rc.RcNetSyn)
  return target;
}

size_t RcNetSyn::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Rc.RcNetSyn)
  size_t total_size = 0;

  if (_internal_has_parent()) {
    // required .Rc.RcNetClass parent = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parent_);
  }

  if (_internal_has_id()) {
    // required uint64 id = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  if (_internal_has_type()) {
    // required uint32 type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return total_size;
}
size_t RcNetSyn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rc.RcNetSyn)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required .Rc.RcNetClass parent = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parent_);

    // required uint64 id = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());

    // required uint32 type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Rc.ArnoldiNetClass child = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.child_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RcNetSyn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RcNetSyn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RcNetSyn::GetClassData() const { return &_class_data_; }


void RcNetSyn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RcNetSyn*>(&to_msg);
  auto& from = static_cast<const RcNetSyn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rc.RcNetSyn)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_parent()->::Rc::RcNetClass::MergeFrom(
          from._internal_parent());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_child()->::Rc::ArnoldiNetClass::MergeFrom(
          from._internal_child());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RcNetSyn::CopyFrom(const RcNetSyn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rc.RcNetSyn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RcNetSyn::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_parent()) {
    if (!_impl_.parent_->IsInitialized()) return false;
  }
  if (_internal_has_child()) {
    if (!_impl_.child_->IsInitialized()) return false;
  }
  return true;
}

void RcNetSyn::InternalSwap(RcNetSyn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RcNetSyn, _impl_.type_)
      + sizeof(RcNetSyn::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RcNetSyn, _impl_.parent_)>(
          reinterpret_cast<char*>(&_impl_.parent_),
          reinterpret_cast<char*>(&other->_impl_.parent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RcNetSyn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RcNet_2eproto_getter, &descriptor_table_RcNet_2eproto_once,
      file_level_metadata_RcNet_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Rc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Rc::LaplaceMomentsStruct*
Arena::CreateMaybeMessage< ::Rc::LaplaceMomentsStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rc::LaplaceMomentsStruct >(arena);
}
template<> PROTOBUF_NOINLINE ::Rc::ModeTransPairMapDoubleMatrix*
Arena::CreateMaybeMessage< ::Rc::ModeTransPairMapDoubleMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rc::ModeTransPairMapDoubleMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::Rc::RctNodeClass*
Arena::CreateMaybeMessage< ::Rc::RctNodeClass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rc::RctNodeClass >(arena);
}
template<> PROTOBUF_NOINLINE ::Rc::RctEdgeClass*
Arena::CreateMaybeMessage< ::Rc::RctEdgeClass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rc::RctEdgeClass >(arena);
}
template<> PROTOBUF_NOINLINE ::Rc::RcTreeClass*
Arena::CreateMaybeMessage< ::Rc::RcTreeClass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rc::RcTreeClass >(arena);
}
template<> PROTOBUF_NOINLINE ::Rc::RcNetCommonInfoClass*
Arena::CreateMaybeMessage< ::Rc::RcNetCommonInfoClass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rc::RcNetCommonInfoClass >(arena);
}
template<> PROTOBUF_NOINLINE ::Rc::EmptyRctClass*
Arena::CreateMaybeMessage< ::Rc::EmptyRctClass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rc::EmptyRctClass >(arena);
}
template<> PROTOBUF_NOINLINE ::Rc::RcNetClass*
Arena::CreateMaybeMessage< ::Rc::RcNetClass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rc::RcNetClass >(arena);
}
template<> PROTOBUF_NOINLINE ::Rc::ArnoldiNetClass*
Arena::CreateMaybeMessage< ::Rc::ArnoldiNetClass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rc::ArnoldiNetClass >(arena);
}
template<> PROTOBUF_NOINLINE ::Rc::RcNetSyn*
Arena::CreateMaybeMessage< ::Rc::RcNetSyn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rc::RcNetSyn >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
