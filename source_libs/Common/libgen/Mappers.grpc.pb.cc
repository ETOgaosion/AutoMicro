// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Mappers.proto

#include "Mappers.pb.h"
#include "Mappers.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace MapReduce {

static const char* SlewPropagationService_method_names[] = {
  "/MapReduce.SlewPropagationService/SlewPropagationRpc",
};

std::unique_ptr< SlewPropagationService::Stub> SlewPropagationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SlewPropagationService::Stub> stub(new SlewPropagationService::Stub(channel, options));
  return stub;
}

SlewPropagationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SlewPropagationRpc_(SlewPropagationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SlewPropagationService::Stub::SlewPropagationRpc(::grpc::ClientContext* context, const ::Common::Types::ULongMsg& request, ::Common::Types::DoubleMsg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Common::Types::ULongMsg, ::Common::Types::DoubleMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SlewPropagationRpc_, context, request, response);
}

void SlewPropagationService::Stub::async::SlewPropagationRpc(::grpc::ClientContext* context, const ::Common::Types::ULongMsg* request, ::Common::Types::DoubleMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Common::Types::ULongMsg, ::Common::Types::DoubleMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SlewPropagationRpc_, context, request, response, std::move(f));
}

void SlewPropagationService::Stub::async::SlewPropagationRpc(::grpc::ClientContext* context, const ::Common::Types::ULongMsg* request, ::Common::Types::DoubleMsg* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SlewPropagationRpc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Common::Types::DoubleMsg>* SlewPropagationService::Stub::PrepareAsyncSlewPropagationRpcRaw(::grpc::ClientContext* context, const ::Common::Types::ULongMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Common::Types::DoubleMsg, ::Common::Types::ULongMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SlewPropagationRpc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Common::Types::DoubleMsg>* SlewPropagationService::Stub::AsyncSlewPropagationRpcRaw(::grpc::ClientContext* context, const ::Common::Types::ULongMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSlewPropagationRpcRaw(context, request, cq);
  result->StartCall();
  return result;
}

SlewPropagationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SlewPropagationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SlewPropagationService::Service, ::Common::Types::ULongMsg, ::Common::Types::DoubleMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SlewPropagationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Common::Types::ULongMsg* req,
             ::Common::Types::DoubleMsg* resp) {
               return service->SlewPropagationRpc(ctx, req, resp);
             }, this)));
}

SlewPropagationService::Service::~Service() {
}

::grpc::Status SlewPropagationService::Service::SlewPropagationRpc(::grpc::ServerContext* context, const ::Common::Types::ULongMsg* request, ::Common::Types::DoubleMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DelayPropagationService_method_names[] = {
  "/MapReduce.DelayPropagationService/DelayPropagationRpc",
};

std::unique_ptr< DelayPropagationService::Stub> DelayPropagationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DelayPropagationService::Stub> stub(new DelayPropagationService::Stub(channel, options));
  return stub;
}

DelayPropagationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_DelayPropagationRpc_(DelayPropagationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DelayPropagationService::Stub::DelayPropagationRpc(::grpc::ClientContext* context, const ::Common::Types::ULongMsg& request, ::Common::Types::DoubleMsg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Common::Types::ULongMsg, ::Common::Types::DoubleMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DelayPropagationRpc_, context, request, response);
}

void DelayPropagationService::Stub::async::DelayPropagationRpc(::grpc::ClientContext* context, const ::Common::Types::ULongMsg* request, ::Common::Types::DoubleMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Common::Types::ULongMsg, ::Common::Types::DoubleMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelayPropagationRpc_, context, request, response, std::move(f));
}

void DelayPropagationService::Stub::async::DelayPropagationRpc(::grpc::ClientContext* context, const ::Common::Types::ULongMsg* request, ::Common::Types::DoubleMsg* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelayPropagationRpc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Common::Types::DoubleMsg>* DelayPropagationService::Stub::PrepareAsyncDelayPropagationRpcRaw(::grpc::ClientContext* context, const ::Common::Types::ULongMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Common::Types::DoubleMsg, ::Common::Types::ULongMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DelayPropagationRpc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Common::Types::DoubleMsg>* DelayPropagationService::Stub::AsyncDelayPropagationRpcRaw(::grpc::ClientContext* context, const ::Common::Types::ULongMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDelayPropagationRpcRaw(context, request, cq);
  result->StartCall();
  return result;
}

DelayPropagationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DelayPropagationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DelayPropagationService::Service, ::Common::Types::ULongMsg, ::Common::Types::DoubleMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DelayPropagationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Common::Types::ULongMsg* req,
             ::Common::Types::DoubleMsg* resp) {
               return service->DelayPropagationRpc(ctx, req, resp);
             }, this)));
}

DelayPropagationService::Service::~Service() {
}

::grpc::Status DelayPropagationService::Service::DelayPropagationRpc(::grpc::ServerContext* context, const ::Common::Types::ULongMsg* request, ::Common::Types::DoubleMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace MapReduce

