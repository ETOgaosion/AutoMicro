// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: LaunchConfig.proto
// Original file comments:
// [START declaration]
#ifndef GRPC_LaunchConfig_2eproto__INCLUDED
#define GRPC_LaunchConfig_2eproto__INCLUDED

#include "LaunchConfig.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Config {

// [START service]
class ConfigService final {
 public:
  static constexpr char const* service_full_name() {
    return "Config.ConfigService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status TransferConfig(::grpc::ClientContext* context, const ::Config::ConfigMsg& request, ::Common::Types::IntMsg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::IntMsg>> AsyncTransferConfig(::grpc::ClientContext* context, const ::Config::ConfigMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::IntMsg>>(AsyncTransferConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::IntMsg>> PrepareAsyncTransferConfig(::grpc::ClientContext* context, const ::Config::ConfigMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::IntMsg>>(PrepareAsyncTransferConfigRaw(context, request, cq));
    }
    virtual ::grpc::Status readVerilog(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::Common::Types::BoolMsg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::BoolMsg>> AsyncreadVerilog(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::BoolMsg>>(AsyncreadVerilogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::BoolMsg>> PrepareAsyncreadVerilog(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::BoolMsg>>(PrepareAsyncreadVerilogRaw(context, request, cq));
    }
    virtual ::grpc::Status readLib(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::Common::Types::BoolMsg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::BoolMsg>> AsyncreadLib(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::BoolMsg>>(AsyncreadLibRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::BoolMsg>> PrepareAsyncreadLib(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::BoolMsg>>(PrepareAsyncreadLibRaw(context, request, cq));
    }
    virtual ::grpc::Status readSdc(::grpc::ClientContext* context, const ::Common::Types::ULongMsg& request, ::Common::Types::BoolMsg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::BoolMsg>> AsyncreadSdc(::grpc::ClientContext* context, const ::Common::Types::ULongMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::BoolMsg>>(AsyncreadSdcRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::BoolMsg>> PrepareAsyncreadSdc(::grpc::ClientContext* context, const ::Common::Types::ULongMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::BoolMsg>>(PrepareAsyncreadSdcRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void TransferConfig(::grpc::ClientContext* context, const ::Config::ConfigMsg* request, ::Common::Types::IntMsg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TransferConfig(::grpc::ClientContext* context, const ::Config::ConfigMsg* request, ::Common::Types::IntMsg* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void readVerilog(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet* request, ::Common::Types::BoolMsg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void readVerilog(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet* request, ::Common::Types::BoolMsg* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void readLib(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet* request, ::Common::Types::BoolMsg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void readLib(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet* request, ::Common::Types::BoolMsg* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void readSdc(::grpc::ClientContext* context, const ::Common::Types::ULongMsg* request, ::Common::Types::BoolMsg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void readSdc(::grpc::ClientContext* context, const ::Common::Types::ULongMsg* request, ::Common::Types::BoolMsg* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::IntMsg>* AsyncTransferConfigRaw(::grpc::ClientContext* context, const ::Config::ConfigMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::IntMsg>* PrepareAsyncTransferConfigRaw(::grpc::ClientContext* context, const ::Config::ConfigMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::BoolMsg>* AsyncreadVerilogRaw(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::BoolMsg>* PrepareAsyncreadVerilogRaw(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::BoolMsg>* AsyncreadLibRaw(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::BoolMsg>* PrepareAsyncreadLibRaw(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::BoolMsg>* AsyncreadSdcRaw(::grpc::ClientContext* context, const ::Common::Types::ULongMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Common::Types::BoolMsg>* PrepareAsyncreadSdcRaw(::grpc::ClientContext* context, const ::Common::Types::ULongMsg& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status TransferConfig(::grpc::ClientContext* context, const ::Config::ConfigMsg& request, ::Common::Types::IntMsg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Common::Types::IntMsg>> AsyncTransferConfig(::grpc::ClientContext* context, const ::Config::ConfigMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Common::Types::IntMsg>>(AsyncTransferConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Common::Types::IntMsg>> PrepareAsyncTransferConfig(::grpc::ClientContext* context, const ::Config::ConfigMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Common::Types::IntMsg>>(PrepareAsyncTransferConfigRaw(context, request, cq));
    }
    ::grpc::Status readVerilog(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::Common::Types::BoolMsg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>> AsyncreadVerilog(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>>(AsyncreadVerilogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>> PrepareAsyncreadVerilog(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>>(PrepareAsyncreadVerilogRaw(context, request, cq));
    }
    ::grpc::Status readLib(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::Common::Types::BoolMsg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>> AsyncreadLib(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>>(AsyncreadLibRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>> PrepareAsyncreadLib(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>>(PrepareAsyncreadLibRaw(context, request, cq));
    }
    ::grpc::Status readSdc(::grpc::ClientContext* context, const ::Common::Types::ULongMsg& request, ::Common::Types::BoolMsg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>> AsyncreadSdc(::grpc::ClientContext* context, const ::Common::Types::ULongMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>>(AsyncreadSdcRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>> PrepareAsyncreadSdc(::grpc::ClientContext* context, const ::Common::Types::ULongMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>>(PrepareAsyncreadSdcRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void TransferConfig(::grpc::ClientContext* context, const ::Config::ConfigMsg* request, ::Common::Types::IntMsg* response, std::function<void(::grpc::Status)>) override;
      void TransferConfig(::grpc::ClientContext* context, const ::Config::ConfigMsg* request, ::Common::Types::IntMsg* response, ::grpc::ClientUnaryReactor* reactor) override;
      void readVerilog(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet* request, ::Common::Types::BoolMsg* response, std::function<void(::grpc::Status)>) override;
      void readVerilog(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet* request, ::Common::Types::BoolMsg* response, ::grpc::ClientUnaryReactor* reactor) override;
      void readLib(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet* request, ::Common::Types::BoolMsg* response, std::function<void(::grpc::Status)>) override;
      void readLib(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet* request, ::Common::Types::BoolMsg* response, ::grpc::ClientUnaryReactor* reactor) override;
      void readSdc(::grpc::ClientContext* context, const ::Common::Types::ULongMsg* request, ::Common::Types::BoolMsg* response, std::function<void(::grpc::Status)>) override;
      void readSdc(::grpc::ClientContext* context, const ::Common::Types::ULongMsg* request, ::Common::Types::BoolMsg* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Common::Types::IntMsg>* AsyncTransferConfigRaw(::grpc::ClientContext* context, const ::Config::ConfigMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Common::Types::IntMsg>* PrepareAsyncTransferConfigRaw(::grpc::ClientContext* context, const ::Config::ConfigMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>* AsyncreadVerilogRaw(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>* PrepareAsyncreadVerilogRaw(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>* AsyncreadLibRaw(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>* PrepareAsyncreadLibRaw(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>* AsyncreadSdcRaw(::grpc::ClientContext* context, const ::Common::Types::ULongMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>* PrepareAsyncreadSdcRaw(::grpc::ClientContext* context, const ::Common::Types::ULongMsg& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_TransferConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_readVerilog_;
    const ::grpc::internal::RpcMethod rpcmethod_readLib_;
    const ::grpc::internal::RpcMethod rpcmethod_readSdc_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status TransferConfig(::grpc::ServerContext* context, const ::Config::ConfigMsg* request, ::Common::Types::IntMsg* response);
    virtual ::grpc::Status readVerilog(::grpc::ServerContext* context, const ::Common::Types::StrStrIntSet* request, ::Common::Types::BoolMsg* response);
    virtual ::grpc::Status readLib(::grpc::ServerContext* context, const ::Common::Types::StrStrIntSet* request, ::Common::Types::BoolMsg* response);
    virtual ::grpc::Status readSdc(::grpc::ServerContext* context, const ::Common::Types::ULongMsg* request, ::Common::Types::BoolMsg* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_TransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TransferConfig() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_TransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferConfig(::grpc::ServerContext* /*context*/, const ::Config::ConfigMsg* /*request*/, ::Common::Types::IntMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferConfig(::grpc::ServerContext* context, ::Config::ConfigMsg* request, ::grpc::ServerAsyncResponseWriter< ::Common::Types::IntMsg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_readVerilog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_readVerilog() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_readVerilog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readVerilog(::grpc::ServerContext* /*context*/, const ::Common::Types::StrStrIntSet* /*request*/, ::Common::Types::BoolMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreadVerilog(::grpc::ServerContext* context, ::Common::Types::StrStrIntSet* request, ::grpc::ServerAsyncResponseWriter< ::Common::Types::BoolMsg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_readLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_readLib() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_readLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readLib(::grpc::ServerContext* /*context*/, const ::Common::Types::StrStrIntSet* /*request*/, ::Common::Types::BoolMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreadLib(::grpc::ServerContext* context, ::Common::Types::StrStrIntSet* request, ::grpc::ServerAsyncResponseWriter< ::Common::Types::BoolMsg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_readSdc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_readSdc() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_readSdc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readSdc(::grpc::ServerContext* /*context*/, const ::Common::Types::ULongMsg* /*request*/, ::Common::Types::BoolMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreadSdc(::grpc::ServerContext* context, ::Common::Types::ULongMsg* request, ::grpc::ServerAsyncResponseWriter< ::Common::Types::BoolMsg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_TransferConfig<WithAsyncMethod_readVerilog<WithAsyncMethod_readLib<WithAsyncMethod_readSdc<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_TransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TransferConfig() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Config::ConfigMsg, ::Common::Types::IntMsg>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Config::ConfigMsg* request, ::Common::Types::IntMsg* response) { return this->TransferConfig(context, request, response); }));}
    void SetMessageAllocatorFor_TransferConfig(
        ::grpc::MessageAllocator< ::Config::ConfigMsg, ::Common::Types::IntMsg>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Config::ConfigMsg, ::Common::Types::IntMsg>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferConfig(::grpc::ServerContext* /*context*/, const ::Config::ConfigMsg* /*request*/, ::Common::Types::IntMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TransferConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::Config::ConfigMsg* /*request*/, ::Common::Types::IntMsg* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_readVerilog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_readVerilog() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Common::Types::StrStrIntSet, ::Common::Types::BoolMsg>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Common::Types::StrStrIntSet* request, ::Common::Types::BoolMsg* response) { return this->readVerilog(context, request, response); }));}
    void SetMessageAllocatorFor_readVerilog(
        ::grpc::MessageAllocator< ::Common::Types::StrStrIntSet, ::Common::Types::BoolMsg>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Common::Types::StrStrIntSet, ::Common::Types::BoolMsg>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_readVerilog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readVerilog(::grpc::ServerContext* /*context*/, const ::Common::Types::StrStrIntSet* /*request*/, ::Common::Types::BoolMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* readVerilog(
      ::grpc::CallbackServerContext* /*context*/, const ::Common::Types::StrStrIntSet* /*request*/, ::Common::Types::BoolMsg* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_readLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_readLib() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Common::Types::StrStrIntSet, ::Common::Types::BoolMsg>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Common::Types::StrStrIntSet* request, ::Common::Types::BoolMsg* response) { return this->readLib(context, request, response); }));}
    void SetMessageAllocatorFor_readLib(
        ::grpc::MessageAllocator< ::Common::Types::StrStrIntSet, ::Common::Types::BoolMsg>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Common::Types::StrStrIntSet, ::Common::Types::BoolMsg>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_readLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readLib(::grpc::ServerContext* /*context*/, const ::Common::Types::StrStrIntSet* /*request*/, ::Common::Types::BoolMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* readLib(
      ::grpc::CallbackServerContext* /*context*/, const ::Common::Types::StrStrIntSet* /*request*/, ::Common::Types::BoolMsg* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_readSdc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_readSdc() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::Common::Types::ULongMsg, ::Common::Types::BoolMsg>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Common::Types::ULongMsg* request, ::Common::Types::BoolMsg* response) { return this->readSdc(context, request, response); }));}
    void SetMessageAllocatorFor_readSdc(
        ::grpc::MessageAllocator< ::Common::Types::ULongMsg, ::Common::Types::BoolMsg>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Common::Types::ULongMsg, ::Common::Types::BoolMsg>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_readSdc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readSdc(::grpc::ServerContext* /*context*/, const ::Common::Types::ULongMsg* /*request*/, ::Common::Types::BoolMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* readSdc(
      ::grpc::CallbackServerContext* /*context*/, const ::Common::Types::ULongMsg* /*request*/, ::Common::Types::BoolMsg* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_TransferConfig<WithCallbackMethod_readVerilog<WithCallbackMethod_readLib<WithCallbackMethod_readSdc<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_TransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TransferConfig() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_TransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferConfig(::grpc::ServerContext* /*context*/, const ::Config::ConfigMsg* /*request*/, ::Common::Types::IntMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_readVerilog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_readVerilog() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_readVerilog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readVerilog(::grpc::ServerContext* /*context*/, const ::Common::Types::StrStrIntSet* /*request*/, ::Common::Types::BoolMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_readLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_readLib() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_readLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readLib(::grpc::ServerContext* /*context*/, const ::Common::Types::StrStrIntSet* /*request*/, ::Common::Types::BoolMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_readSdc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_readSdc() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_readSdc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readSdc(::grpc::ServerContext* /*context*/, const ::Common::Types::ULongMsg* /*request*/, ::Common::Types::BoolMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_TransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TransferConfig() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_TransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferConfig(::grpc::ServerContext* /*context*/, const ::Config::ConfigMsg* /*request*/, ::Common::Types::IntMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_readVerilog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_readVerilog() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_readVerilog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readVerilog(::grpc::ServerContext* /*context*/, const ::Common::Types::StrStrIntSet* /*request*/, ::Common::Types::BoolMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreadVerilog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_readLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_readLib() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_readLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readLib(::grpc::ServerContext* /*context*/, const ::Common::Types::StrStrIntSet* /*request*/, ::Common::Types::BoolMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreadLib(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_readSdc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_readSdc() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_readSdc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readSdc(::grpc::ServerContext* /*context*/, const ::Common::Types::ULongMsg* /*request*/, ::Common::Types::BoolMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreadSdc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TransferConfig() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TransferConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_TransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferConfig(::grpc::ServerContext* /*context*/, const ::Config::ConfigMsg* /*request*/, ::Common::Types::IntMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TransferConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_readVerilog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_readVerilog() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->readVerilog(context, request, response); }));
    }
    ~WithRawCallbackMethod_readVerilog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readVerilog(::grpc::ServerContext* /*context*/, const ::Common::Types::StrStrIntSet* /*request*/, ::Common::Types::BoolMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* readVerilog(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_readLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_readLib() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->readLib(context, request, response); }));
    }
    ~WithRawCallbackMethod_readLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readLib(::grpc::ServerContext* /*context*/, const ::Common::Types::StrStrIntSet* /*request*/, ::Common::Types::BoolMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* readLib(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_readSdc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_readSdc() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->readSdc(context, request, response); }));
    }
    ~WithRawCallbackMethod_readSdc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readSdc(::grpc::ServerContext* /*context*/, const ::Common::Types::ULongMsg* /*request*/, ::Common::Types::BoolMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* readSdc(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TransferConfig() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Config::ConfigMsg, ::Common::Types::IntMsg>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Config::ConfigMsg, ::Common::Types::IntMsg>* streamer) {
                       return this->StreamedTransferConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TransferConfig(::grpc::ServerContext* /*context*/, const ::Config::ConfigMsg* /*request*/, ::Common::Types::IntMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTransferConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Config::ConfigMsg,::Common::Types::IntMsg>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_readVerilog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_readVerilog() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Common::Types::StrStrIntSet, ::Common::Types::BoolMsg>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Common::Types::StrStrIntSet, ::Common::Types::BoolMsg>* streamer) {
                       return this->StreamedreadVerilog(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_readVerilog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status readVerilog(::grpc::ServerContext* /*context*/, const ::Common::Types::StrStrIntSet* /*request*/, ::Common::Types::BoolMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedreadVerilog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Common::Types::StrStrIntSet,::Common::Types::BoolMsg>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_readLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_readLib() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Common::Types::StrStrIntSet, ::Common::Types::BoolMsg>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Common::Types::StrStrIntSet, ::Common::Types::BoolMsg>* streamer) {
                       return this->StreamedreadLib(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_readLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status readLib(::grpc::ServerContext* /*context*/, const ::Common::Types::StrStrIntSet* /*request*/, ::Common::Types::BoolMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedreadLib(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Common::Types::StrStrIntSet,::Common::Types::BoolMsg>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_readSdc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_readSdc() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Common::Types::ULongMsg, ::Common::Types::BoolMsg>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Common::Types::ULongMsg, ::Common::Types::BoolMsg>* streamer) {
                       return this->StreamedreadSdc(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_readSdc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status readSdc(::grpc::ServerContext* /*context*/, const ::Common::Types::ULongMsg* /*request*/, ::Common::Types::BoolMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedreadSdc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Common::Types::ULongMsg,::Common::Types::BoolMsg>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_TransferConfig<WithStreamedUnaryMethod_readVerilog<WithStreamedUnaryMethod_readLib<WithStreamedUnaryMethod_readSdc<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_TransferConfig<WithStreamedUnaryMethod_readVerilog<WithStreamedUnaryMethod_readLib<WithStreamedUnaryMethod_readSdc<Service > > > > StreamedService;
};

}  // namespace Config


#endif  // GRPC_LaunchConfig_2eproto__INCLUDED
