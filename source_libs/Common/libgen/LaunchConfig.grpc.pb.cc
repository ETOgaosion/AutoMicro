// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: LaunchConfig.proto

#include "LaunchConfig.pb.h"
#include "LaunchConfig.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Config {

static const char* ConfigService_method_names[] = {
  "/Config.ConfigService/TransferConfig",
  "/Config.ConfigService/readVerilog",
  "/Config.ConfigService/readLib",
  "/Config.ConfigService/readSdc",
};

std::unique_ptr< ConfigService::Stub> ConfigService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ConfigService::Stub> stub(new ConfigService::Stub(channel, options));
  return stub;
}

ConfigService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_TransferConfig_(ConfigService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_readVerilog_(ConfigService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_readLib_(ConfigService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_readSdc_(ConfigService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ConfigService::Stub::TransferConfig(::grpc::ClientContext* context, const ::Config::ConfigMsg& request, ::Common::Types::IntMsg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Config::ConfigMsg, ::Common::Types::IntMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TransferConfig_, context, request, response);
}

void ConfigService::Stub::async::TransferConfig(::grpc::ClientContext* context, const ::Config::ConfigMsg* request, ::Common::Types::IntMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Config::ConfigMsg, ::Common::Types::IntMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TransferConfig_, context, request, response, std::move(f));
}

void ConfigService::Stub::async::TransferConfig(::grpc::ClientContext* context, const ::Config::ConfigMsg* request, ::Common::Types::IntMsg* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TransferConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Common::Types::IntMsg>* ConfigService::Stub::PrepareAsyncTransferConfigRaw(::grpc::ClientContext* context, const ::Config::ConfigMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Common::Types::IntMsg, ::Config::ConfigMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TransferConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Common::Types::IntMsg>* ConfigService::Stub::AsyncTransferConfigRaw(::grpc::ClientContext* context, const ::Config::ConfigMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTransferConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigService::Stub::readVerilog(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::Common::Types::BoolMsg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Common::Types::StrStrIntSet, ::Common::Types::BoolMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_readVerilog_, context, request, response);
}

void ConfigService::Stub::async::readVerilog(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet* request, ::Common::Types::BoolMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Common::Types::StrStrIntSet, ::Common::Types::BoolMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_readVerilog_, context, request, response, std::move(f));
}

void ConfigService::Stub::async::readVerilog(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet* request, ::Common::Types::BoolMsg* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_readVerilog_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>* ConfigService::Stub::PrepareAsyncreadVerilogRaw(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Common::Types::BoolMsg, ::Common::Types::StrStrIntSet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_readVerilog_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>* ConfigService::Stub::AsyncreadVerilogRaw(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreadVerilogRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigService::Stub::readLib(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::Common::Types::BoolMsg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Common::Types::StrStrIntSet, ::Common::Types::BoolMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_readLib_, context, request, response);
}

void ConfigService::Stub::async::readLib(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet* request, ::Common::Types::BoolMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Common::Types::StrStrIntSet, ::Common::Types::BoolMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_readLib_, context, request, response, std::move(f));
}

void ConfigService::Stub::async::readLib(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet* request, ::Common::Types::BoolMsg* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_readLib_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>* ConfigService::Stub::PrepareAsyncreadLibRaw(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Common::Types::BoolMsg, ::Common::Types::StrStrIntSet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_readLib_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>* ConfigService::Stub::AsyncreadLibRaw(::grpc::ClientContext* context, const ::Common::Types::StrStrIntSet& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreadLibRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigService::Stub::readSdc(::grpc::ClientContext* context, const ::Common::Types::ULongMsg& request, ::Common::Types::BoolMsg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Common::Types::ULongMsg, ::Common::Types::BoolMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_readSdc_, context, request, response);
}

void ConfigService::Stub::async::readSdc(::grpc::ClientContext* context, const ::Common::Types::ULongMsg* request, ::Common::Types::BoolMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Common::Types::ULongMsg, ::Common::Types::BoolMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_readSdc_, context, request, response, std::move(f));
}

void ConfigService::Stub::async::readSdc(::grpc::ClientContext* context, const ::Common::Types::ULongMsg* request, ::Common::Types::BoolMsg* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_readSdc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>* ConfigService::Stub::PrepareAsyncreadSdcRaw(::grpc::ClientContext* context, const ::Common::Types::ULongMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Common::Types::BoolMsg, ::Common::Types::ULongMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_readSdc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>* ConfigService::Stub::AsyncreadSdcRaw(::grpc::ClientContext* context, const ::Common::Types::ULongMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreadSdcRaw(context, request, cq);
  result->StartCall();
  return result;
}

ConfigService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigService::Service, ::Config::ConfigMsg, ::Common::Types::IntMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Config::ConfigMsg* req,
             ::Common::Types::IntMsg* resp) {
               return service->TransferConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigService::Service, ::Common::Types::StrStrIntSet, ::Common::Types::BoolMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Common::Types::StrStrIntSet* req,
             ::Common::Types::BoolMsg* resp) {
               return service->readVerilog(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigService::Service, ::Common::Types::StrStrIntSet, ::Common::Types::BoolMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Common::Types::StrStrIntSet* req,
             ::Common::Types::BoolMsg* resp) {
               return service->readLib(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigService::Service, ::Common::Types::ULongMsg, ::Common::Types::BoolMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Common::Types::ULongMsg* req,
             ::Common::Types::BoolMsg* resp) {
               return service->readSdc(ctx, req, resp);
             }, this)));
}

ConfigService::Service::~Service() {
}

::grpc::Status ConfigService::Service::TransferConfig(::grpc::ServerContext* context, const ::Config::ConfigMsg* request, ::Common::Types::IntMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigService::Service::readVerilog(::grpc::ServerContext* context, const ::Common::Types::StrStrIntSet* request, ::Common::Types::BoolMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigService::Service::readLib(::grpc::ServerContext* context, const ::Common::Types::StrStrIntSet* request, ::Common::Types::BoolMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigService::Service::readSdc(::grpc::ServerContext* context, const ::Common::Types::ULongMsg* request, ::Common::Types::BoolMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Config

