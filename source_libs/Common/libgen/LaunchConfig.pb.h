// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LaunchConfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LaunchConfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LaunchConfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "CommonTypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LaunchConfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_LaunchConfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LaunchConfig_2eproto;
namespace Config {
class ConfigMsg;
struct ConfigMsgDefaultTypeInternal;
extern ConfigMsgDefaultTypeInternal _ConfigMsg_default_instance_;
}  // namespace Config
PROTOBUF_NAMESPACE_OPEN
template<> ::Config::ConfigMsg* Arena::CreateMaybeMessage<::Config::ConfigMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Config {

// ===================================================================

class ConfigMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Config.ConfigMsg) */ {
 public:
  inline ConfigMsg() : ConfigMsg(nullptr) {}
  ~ConfigMsg() override;
  explicit PROTOBUF_CONSTEXPR ConfigMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigMsg(const ConfigMsg& from);
  ConfigMsg(ConfigMsg&& from) noexcept
    : ConfigMsg() {
    *this = ::std::move(from);
  }

  inline ConfigMsg& operator=(const ConfigMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigMsg& operator=(ConfigMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigMsg* internal_default_instance() {
    return reinterpret_cast<const ConfigMsg*>(
               &_ConfigMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConfigMsg& a, ConfigMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfigMsg& from) {
    ConfigMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Config.ConfigMsg";
  }
  protected:
  explicit ConfigMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCornerMaxLibFilesFieldNumber = 4,
    kIdFieldNumber = 1,
    kDesignWorkSpaceFieldNumber = 2,
    kTopModuleNameFieldNumber = 6,
    kVerilogSrcFieldNumber = 7,
    kSdcSrcFieldNumber = 8,
    kSpefSrcFieldNumber = 9,
    kThreadNumsFieldNumber = 3,
    kNWorstPathPerClockFieldNumber = 5,
    kSignificantDigitsFieldNumber = 10,
  };
  // repeated string corner_max_lib_files = 4;
  int corner_max_lib_files_size() const;
  private:
  int _internal_corner_max_lib_files_size() const;
  public:
  void clear_corner_max_lib_files();
  const std::string& corner_max_lib_files(int index) const;
  std::string* mutable_corner_max_lib_files(int index);
  void set_corner_max_lib_files(int index, const std::string& value);
  void set_corner_max_lib_files(int index, std::string&& value);
  void set_corner_max_lib_files(int index, const char* value);
  void set_corner_max_lib_files(int index, const char* value, size_t size);
  std::string* add_corner_max_lib_files();
  void add_corner_max_lib_files(const std::string& value);
  void add_corner_max_lib_files(std::string&& value);
  void add_corner_max_lib_files(const char* value);
  void add_corner_max_lib_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& corner_max_lib_files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_corner_max_lib_files();
  private:
  const std::string& _internal_corner_max_lib_files(int index) const;
  std::string* _internal_add_corner_max_lib_files();
  public:

  // required string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string design_work_space = 2;
  bool has_design_work_space() const;
  private:
  bool _internal_has_design_work_space() const;
  public:
  void clear_design_work_space();
  const std::string& design_work_space() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_design_work_space(ArgT0&& arg0, ArgT... args);
  std::string* mutable_design_work_space();
  PROTOBUF_NODISCARD std::string* release_design_work_space();
  void set_allocated_design_work_space(std::string* design_work_space);
  private:
  const std::string& _internal_design_work_space() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_design_work_space(const std::string& value);
  std::string* _internal_mutable_design_work_space();
  public:

  // optional string top_module_name = 6;
  bool has_top_module_name() const;
  private:
  bool _internal_has_top_module_name() const;
  public:
  void clear_top_module_name();
  const std::string& top_module_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_top_module_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_top_module_name();
  PROTOBUF_NODISCARD std::string* release_top_module_name();
  void set_allocated_top_module_name(std::string* top_module_name);
  private:
  const std::string& _internal_top_module_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_top_module_name(const std::string& value);
  std::string* _internal_mutable_top_module_name();
  public:

  // optional string verilog_src = 7;
  bool has_verilog_src() const;
  private:
  bool _internal_has_verilog_src() const;
  public:
  void clear_verilog_src();
  const std::string& verilog_src() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verilog_src(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verilog_src();
  PROTOBUF_NODISCARD std::string* release_verilog_src();
  void set_allocated_verilog_src(std::string* verilog_src);
  private:
  const std::string& _internal_verilog_src() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verilog_src(const std::string& value);
  std::string* _internal_mutable_verilog_src();
  public:

  // optional string sdc_src = 8;
  bool has_sdc_src() const;
  private:
  bool _internal_has_sdc_src() const;
  public:
  void clear_sdc_src();
  const std::string& sdc_src() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdc_src(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdc_src();
  PROTOBUF_NODISCARD std::string* release_sdc_src();
  void set_allocated_sdc_src(std::string* sdc_src);
  private:
  const std::string& _internal_sdc_src() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdc_src(const std::string& value);
  std::string* _internal_mutable_sdc_src();
  public:

  // optional string spef_src = 9;
  bool has_spef_src() const;
  private:
  bool _internal_has_spef_src() const;
  public:
  void clear_spef_src();
  const std::string& spef_src() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spef_src(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spef_src();
  PROTOBUF_NODISCARD std::string* release_spef_src();
  void set_allocated_spef_src(std::string* spef_src);
  private:
  const std::string& _internal_spef_src() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spef_src(const std::string& value);
  std::string* _internal_mutable_spef_src();
  public:

  // optional int32 thread_nums = 3;
  bool has_thread_nums() const;
  private:
  bool _internal_has_thread_nums() const;
  public:
  void clear_thread_nums();
  int32_t thread_nums() const;
  void set_thread_nums(int32_t value);
  private:
  int32_t _internal_thread_nums() const;
  void _internal_set_thread_nums(int32_t value);
  public:

  // optional int32 n_worst_path_per_clock = 5;
  bool has_n_worst_path_per_clock() const;
  private:
  bool _internal_has_n_worst_path_per_clock() const;
  public:
  void clear_n_worst_path_per_clock();
  int32_t n_worst_path_per_clock() const;
  void set_n_worst_path_per_clock(int32_t value);
  private:
  int32_t _internal_n_worst_path_per_clock() const;
  void _internal_set_n_worst_path_per_clock(int32_t value);
  public:

  // optional int32 significant_digits = 10;
  bool has_significant_digits() const;
  private:
  bool _internal_has_significant_digits() const;
  public:
  void clear_significant_digits();
  int32_t significant_digits() const;
  void set_significant_digits(int32_t value);
  private:
  int32_t _internal_significant_digits() const;
  void _internal_set_significant_digits(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Config.ConfigMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> corner_max_lib_files_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr design_work_space_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr top_module_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verilog_src_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdc_src_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spef_src_;
    int32_t thread_nums_;
    int32_t n_worst_path_per_clock_;
    int32_t significant_digits_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LaunchConfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConfigMsg

// required string id = 1;
inline bool ConfigMsg::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConfigMsg::has_id() const {
  return _internal_has_id();
}
inline void ConfigMsg::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConfigMsg::id() const {
  // @@protoc_insertion_point(field_get:Config.ConfigMsg.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigMsg::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Config.ConfigMsg.id)
}
inline std::string* ConfigMsg::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Config.ConfigMsg.id)
  return _s;
}
inline const std::string& ConfigMsg::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ConfigMsg::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfigMsg::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfigMsg::release_id() {
  // @@protoc_insertion_point(field_release:Config.ConfigMsg.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConfigMsg::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Config.ConfigMsg.id)
}

// optional string design_work_space = 2;
inline bool ConfigMsg::_internal_has_design_work_space() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConfigMsg::has_design_work_space() const {
  return _internal_has_design_work_space();
}
inline void ConfigMsg::clear_design_work_space() {
  _impl_.design_work_space_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ConfigMsg::design_work_space() const {
  // @@protoc_insertion_point(field_get:Config.ConfigMsg.design_work_space)
  return _internal_design_work_space();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigMsg::set_design_work_space(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.design_work_space_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Config.ConfigMsg.design_work_space)
}
inline std::string* ConfigMsg::mutable_design_work_space() {
  std::string* _s = _internal_mutable_design_work_space();
  // @@protoc_insertion_point(field_mutable:Config.ConfigMsg.design_work_space)
  return _s;
}
inline const std::string& ConfigMsg::_internal_design_work_space() const {
  return _impl_.design_work_space_.Get();
}
inline void ConfigMsg::_internal_set_design_work_space(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.design_work_space_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfigMsg::_internal_mutable_design_work_space() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.design_work_space_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfigMsg::release_design_work_space() {
  // @@protoc_insertion_point(field_release:Config.ConfigMsg.design_work_space)
  if (!_internal_has_design_work_space()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.design_work_space_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.design_work_space_.IsDefault()) {
    _impl_.design_work_space_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConfigMsg::set_allocated_design_work_space(std::string* design_work_space) {
  if (design_work_space != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.design_work_space_.SetAllocated(design_work_space, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.design_work_space_.IsDefault()) {
    _impl_.design_work_space_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Config.ConfigMsg.design_work_space)
}

// optional int32 thread_nums = 3;
inline bool ConfigMsg::_internal_has_thread_nums() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ConfigMsg::has_thread_nums() const {
  return _internal_has_thread_nums();
}
inline void ConfigMsg::clear_thread_nums() {
  _impl_.thread_nums_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t ConfigMsg::_internal_thread_nums() const {
  return _impl_.thread_nums_;
}
inline int32_t ConfigMsg::thread_nums() const {
  // @@protoc_insertion_point(field_get:Config.ConfigMsg.thread_nums)
  return _internal_thread_nums();
}
inline void ConfigMsg::_internal_set_thread_nums(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.thread_nums_ = value;
}
inline void ConfigMsg::set_thread_nums(int32_t value) {
  _internal_set_thread_nums(value);
  // @@protoc_insertion_point(field_set:Config.ConfigMsg.thread_nums)
}

// repeated string corner_max_lib_files = 4;
inline int ConfigMsg::_internal_corner_max_lib_files_size() const {
  return _impl_.corner_max_lib_files_.size();
}
inline int ConfigMsg::corner_max_lib_files_size() const {
  return _internal_corner_max_lib_files_size();
}
inline void ConfigMsg::clear_corner_max_lib_files() {
  _impl_.corner_max_lib_files_.Clear();
}
inline std::string* ConfigMsg::add_corner_max_lib_files() {
  std::string* _s = _internal_add_corner_max_lib_files();
  // @@protoc_insertion_point(field_add_mutable:Config.ConfigMsg.corner_max_lib_files)
  return _s;
}
inline const std::string& ConfigMsg::_internal_corner_max_lib_files(int index) const {
  return _impl_.corner_max_lib_files_.Get(index);
}
inline const std::string& ConfigMsg::corner_max_lib_files(int index) const {
  // @@protoc_insertion_point(field_get:Config.ConfigMsg.corner_max_lib_files)
  return _internal_corner_max_lib_files(index);
}
inline std::string* ConfigMsg::mutable_corner_max_lib_files(int index) {
  // @@protoc_insertion_point(field_mutable:Config.ConfigMsg.corner_max_lib_files)
  return _impl_.corner_max_lib_files_.Mutable(index);
}
inline void ConfigMsg::set_corner_max_lib_files(int index, const std::string& value) {
  _impl_.corner_max_lib_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Config.ConfigMsg.corner_max_lib_files)
}
inline void ConfigMsg::set_corner_max_lib_files(int index, std::string&& value) {
  _impl_.corner_max_lib_files_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Config.ConfigMsg.corner_max_lib_files)
}
inline void ConfigMsg::set_corner_max_lib_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.corner_max_lib_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Config.ConfigMsg.corner_max_lib_files)
}
inline void ConfigMsg::set_corner_max_lib_files(int index, const char* value, size_t size) {
  _impl_.corner_max_lib_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Config.ConfigMsg.corner_max_lib_files)
}
inline std::string* ConfigMsg::_internal_add_corner_max_lib_files() {
  return _impl_.corner_max_lib_files_.Add();
}
inline void ConfigMsg::add_corner_max_lib_files(const std::string& value) {
  _impl_.corner_max_lib_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Config.ConfigMsg.corner_max_lib_files)
}
inline void ConfigMsg::add_corner_max_lib_files(std::string&& value) {
  _impl_.corner_max_lib_files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Config.ConfigMsg.corner_max_lib_files)
}
inline void ConfigMsg::add_corner_max_lib_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.corner_max_lib_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Config.ConfigMsg.corner_max_lib_files)
}
inline void ConfigMsg::add_corner_max_lib_files(const char* value, size_t size) {
  _impl_.corner_max_lib_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Config.ConfigMsg.corner_max_lib_files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConfigMsg::corner_max_lib_files() const {
  // @@protoc_insertion_point(field_list:Config.ConfigMsg.corner_max_lib_files)
  return _impl_.corner_max_lib_files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConfigMsg::mutable_corner_max_lib_files() {
  // @@protoc_insertion_point(field_mutable_list:Config.ConfigMsg.corner_max_lib_files)
  return &_impl_.corner_max_lib_files_;
}

// optional int32 n_worst_path_per_clock = 5;
inline bool ConfigMsg::_internal_has_n_worst_path_per_clock() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ConfigMsg::has_n_worst_path_per_clock() const {
  return _internal_has_n_worst_path_per_clock();
}
inline void ConfigMsg::clear_n_worst_path_per_clock() {
  _impl_.n_worst_path_per_clock_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t ConfigMsg::_internal_n_worst_path_per_clock() const {
  return _impl_.n_worst_path_per_clock_;
}
inline int32_t ConfigMsg::n_worst_path_per_clock() const {
  // @@protoc_insertion_point(field_get:Config.ConfigMsg.n_worst_path_per_clock)
  return _internal_n_worst_path_per_clock();
}
inline void ConfigMsg::_internal_set_n_worst_path_per_clock(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.n_worst_path_per_clock_ = value;
}
inline void ConfigMsg::set_n_worst_path_per_clock(int32_t value) {
  _internal_set_n_worst_path_per_clock(value);
  // @@protoc_insertion_point(field_set:Config.ConfigMsg.n_worst_path_per_clock)
}

// optional string top_module_name = 6;
inline bool ConfigMsg::_internal_has_top_module_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConfigMsg::has_top_module_name() const {
  return _internal_has_top_module_name();
}
inline void ConfigMsg::clear_top_module_name() {
  _impl_.top_module_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ConfigMsg::top_module_name() const {
  // @@protoc_insertion_point(field_get:Config.ConfigMsg.top_module_name)
  return _internal_top_module_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigMsg::set_top_module_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.top_module_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Config.ConfigMsg.top_module_name)
}
inline std::string* ConfigMsg::mutable_top_module_name() {
  std::string* _s = _internal_mutable_top_module_name();
  // @@protoc_insertion_point(field_mutable:Config.ConfigMsg.top_module_name)
  return _s;
}
inline const std::string& ConfigMsg::_internal_top_module_name() const {
  return _impl_.top_module_name_.Get();
}
inline void ConfigMsg::_internal_set_top_module_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.top_module_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfigMsg::_internal_mutable_top_module_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.top_module_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfigMsg::release_top_module_name() {
  // @@protoc_insertion_point(field_release:Config.ConfigMsg.top_module_name)
  if (!_internal_has_top_module_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.top_module_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.top_module_name_.IsDefault()) {
    _impl_.top_module_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConfigMsg::set_allocated_top_module_name(std::string* top_module_name) {
  if (top_module_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.top_module_name_.SetAllocated(top_module_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.top_module_name_.IsDefault()) {
    _impl_.top_module_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Config.ConfigMsg.top_module_name)
}

// optional string verilog_src = 7;
inline bool ConfigMsg::_internal_has_verilog_src() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ConfigMsg::has_verilog_src() const {
  return _internal_has_verilog_src();
}
inline void ConfigMsg::clear_verilog_src() {
  _impl_.verilog_src_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ConfigMsg::verilog_src() const {
  // @@protoc_insertion_point(field_get:Config.ConfigMsg.verilog_src)
  return _internal_verilog_src();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigMsg::set_verilog_src(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.verilog_src_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Config.ConfigMsg.verilog_src)
}
inline std::string* ConfigMsg::mutable_verilog_src() {
  std::string* _s = _internal_mutable_verilog_src();
  // @@protoc_insertion_point(field_mutable:Config.ConfigMsg.verilog_src)
  return _s;
}
inline const std::string& ConfigMsg::_internal_verilog_src() const {
  return _impl_.verilog_src_.Get();
}
inline void ConfigMsg::_internal_set_verilog_src(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.verilog_src_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfigMsg::_internal_mutable_verilog_src() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.verilog_src_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfigMsg::release_verilog_src() {
  // @@protoc_insertion_point(field_release:Config.ConfigMsg.verilog_src)
  if (!_internal_has_verilog_src()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.verilog_src_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.verilog_src_.IsDefault()) {
    _impl_.verilog_src_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConfigMsg::set_allocated_verilog_src(std::string* verilog_src) {
  if (verilog_src != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.verilog_src_.SetAllocated(verilog_src, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.verilog_src_.IsDefault()) {
    _impl_.verilog_src_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Config.ConfigMsg.verilog_src)
}

// optional string sdc_src = 8;
inline bool ConfigMsg::_internal_has_sdc_src() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ConfigMsg::has_sdc_src() const {
  return _internal_has_sdc_src();
}
inline void ConfigMsg::clear_sdc_src() {
  _impl_.sdc_src_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ConfigMsg::sdc_src() const {
  // @@protoc_insertion_point(field_get:Config.ConfigMsg.sdc_src)
  return _internal_sdc_src();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigMsg::set_sdc_src(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.sdc_src_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Config.ConfigMsg.sdc_src)
}
inline std::string* ConfigMsg::mutable_sdc_src() {
  std::string* _s = _internal_mutable_sdc_src();
  // @@protoc_insertion_point(field_mutable:Config.ConfigMsg.sdc_src)
  return _s;
}
inline const std::string& ConfigMsg::_internal_sdc_src() const {
  return _impl_.sdc_src_.Get();
}
inline void ConfigMsg::_internal_set_sdc_src(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.sdc_src_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfigMsg::_internal_mutable_sdc_src() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.sdc_src_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfigMsg::release_sdc_src() {
  // @@protoc_insertion_point(field_release:Config.ConfigMsg.sdc_src)
  if (!_internal_has_sdc_src()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.sdc_src_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sdc_src_.IsDefault()) {
    _impl_.sdc_src_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConfigMsg::set_allocated_sdc_src(std::string* sdc_src) {
  if (sdc_src != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.sdc_src_.SetAllocated(sdc_src, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sdc_src_.IsDefault()) {
    _impl_.sdc_src_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Config.ConfigMsg.sdc_src)
}

// optional string spef_src = 9;
inline bool ConfigMsg::_internal_has_spef_src() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ConfigMsg::has_spef_src() const {
  return _internal_has_spef_src();
}
inline void ConfigMsg::clear_spef_src() {
  _impl_.spef_src_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ConfigMsg::spef_src() const {
  // @@protoc_insertion_point(field_get:Config.ConfigMsg.spef_src)
  return _internal_spef_src();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigMsg::set_spef_src(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.spef_src_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Config.ConfigMsg.spef_src)
}
inline std::string* ConfigMsg::mutable_spef_src() {
  std::string* _s = _internal_mutable_spef_src();
  // @@protoc_insertion_point(field_mutable:Config.ConfigMsg.spef_src)
  return _s;
}
inline const std::string& ConfigMsg::_internal_spef_src() const {
  return _impl_.spef_src_.Get();
}
inline void ConfigMsg::_internal_set_spef_src(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.spef_src_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfigMsg::_internal_mutable_spef_src() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.spef_src_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfigMsg::release_spef_src() {
  // @@protoc_insertion_point(field_release:Config.ConfigMsg.spef_src)
  if (!_internal_has_spef_src()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.spef_src_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.spef_src_.IsDefault()) {
    _impl_.spef_src_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConfigMsg::set_allocated_spef_src(std::string* spef_src) {
  if (spef_src != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.spef_src_.SetAllocated(spef_src, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.spef_src_.IsDefault()) {
    _impl_.spef_src_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Config.ConfigMsg.spef_src)
}

// optional int32 significant_digits = 10;
inline bool ConfigMsg::_internal_has_significant_digits() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ConfigMsg::has_significant_digits() const {
  return _internal_has_significant_digits();
}
inline void ConfigMsg::clear_significant_digits() {
  _impl_.significant_digits_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t ConfigMsg::_internal_significant_digits() const {
  return _impl_.significant_digits_;
}
inline int32_t ConfigMsg::significant_digits() const {
  // @@protoc_insertion_point(field_get:Config.ConfigMsg.significant_digits)
  return _internal_significant_digits();
}
inline void ConfigMsg::_internal_set_significant_digits(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.significant_digits_ = value;
}
inline void ConfigMsg::set_significant_digits(int32_t value) {
  _internal_set_significant_digits(value);
  // @@protoc_insertion_point(field_set:Config.ConfigMsg.significant_digits)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LaunchConfig_2eproto
