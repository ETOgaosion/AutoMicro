// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonTypes.proto

#include "CommonTypes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Common {
namespace Types {
PROTOBUF_CONSTEXPR EmptyMsg::EmptyMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.e_)*/nullptr} {}
struct EmptyMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyMsgDefaultTypeInternal() {}
  union {
    EmptyMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyMsgDefaultTypeInternal _EmptyMsg_default_instance_;
PROTOBUF_CONSTEXPR IntMsg::IntMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.i_)*/0} {}
struct IntMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntMsgDefaultTypeInternal() {}
  union {
    IntMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntMsgDefaultTypeInternal _IntMsg_default_instance_;
PROTOBUF_CONSTEXPR LongMsg::LongMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.l_)*/int64_t{0}} {}
struct LongMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LongMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LongMsgDefaultTypeInternal() {}
  union {
    LongMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LongMsgDefaultTypeInternal _LongMsg_default_instance_;
PROTOBUF_CONSTEXPR UIntMsg::UIntMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ui_)*/0u} {}
struct UIntMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UIntMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UIntMsgDefaultTypeInternal() {}
  union {
    UIntMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UIntMsgDefaultTypeInternal _UIntMsg_default_instance_;
PROTOBUF_CONSTEXPR ULongMsg::ULongMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ul_)*/uint64_t{0u}} {}
struct ULongMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ULongMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ULongMsgDefaultTypeInternal() {}
  union {
    ULongMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ULongMsgDefaultTypeInternal _ULongMsg_default_instance_;
PROTOBUF_CONSTEXPR FloatMsg::FloatMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.f_)*/0} {}
struct FloatMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FloatMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FloatMsgDefaultTypeInternal() {}
  union {
    FloatMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FloatMsgDefaultTypeInternal _FloatMsg_default_instance_;
PROTOBUF_CONSTEXPR DoubleMsg::DoubleMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.d_)*/0} {}
struct DoubleMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoubleMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoubleMsgDefaultTypeInternal() {}
  union {
    DoubleMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoubleMsgDefaultTypeInternal _DoubleMsg_default_instance_;
PROTOBUF_CONSTEXPR BoolMsg::BoolMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.b_)*/false} {}
struct BoolMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoolMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoolMsgDefaultTypeInternal() {}
  union {
    BoolMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoolMsgDefaultTypeInternal _BoolMsg_default_instance_;
PROTOBUF_CONSTEXPR StringMsg::StringMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.s_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct StringMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringMsgDefaultTypeInternal() {}
  union {
    StringMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringMsgDefaultTypeInternal _StringMsg_default_instance_;
PROTOBUF_CONSTEXPR IntPair::IntPair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.first_)*/0
  , /*decltype(_impl_.second_)*/0} {}
struct IntPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntPairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntPairDefaultTypeInternal() {}
  union {
    IntPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntPairDefaultTypeInternal _IntPair_default_instance_;
PROTOBUF_CONSTEXPR DoubleList::DoubleList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.d_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DoubleListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoubleListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoubleListDefaultTypeInternal() {}
  union {
    DoubleList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoubleListDefaultTypeInternal _DoubleList_default_instance_;
PROTOBUF_CONSTEXPR DoubleMatrix::DoubleMatrix(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dl_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DoubleMatrixDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoubleMatrixDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoubleMatrixDefaultTypeInternal() {}
  union {
    DoubleMatrix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoubleMatrixDefaultTypeInternal _DoubleMatrix_default_instance_;
PROTOBUF_CONSTEXPR DoubleMatrixTuple::DoubleMatrixTuple(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dm_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DoubleMatrixTupleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoubleMatrixTupleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoubleMatrixTupleDefaultTypeInternal() {}
  union {
    DoubleMatrixTuple _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoubleMatrixTupleDefaultTypeInternal _DoubleMatrixTuple_default_instance_;
PROTOBUF_CONSTEXPR ULongPair::ULongPair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.first_)*/uint64_t{0u}
  , /*decltype(_impl_.second_)*/uint64_t{0u}} {}
struct ULongPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ULongPairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ULongPairDefaultTypeInternal() {}
  union {
    ULongPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ULongPairDefaultTypeInternal _ULongPair_default_instance_;
PROTOBUF_CONSTEXPR ULongList::ULongList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ul_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ULongListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ULongListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ULongListDefaultTypeInternal() {}
  union {
    ULongList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ULongListDefaultTypeInternal _ULongList_default_instance_;
PROTOBUF_CONSTEXPR ULongUintPair::ULongUintPair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.first_)*/uint64_t{0u}
  , /*decltype(_impl_.second_)*/0u} {}
struct ULongUintPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ULongUintPairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ULongUintPairDefaultTypeInternal() {}
  union {
    ULongUintPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ULongUintPairDefaultTypeInternal _ULongUintPair_default_instance_;
PROTOBUF_CONSTEXPR ULongDoublePair::ULongDoublePair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.first_)*/uint64_t{0u}
  , /*decltype(_impl_.second_)*/0} {}
struct ULongDoublePairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ULongDoublePairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ULongDoublePairDefaultTypeInternal() {}
  union {
    ULongDoublePair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ULongDoublePairDefaultTypeInternal _ULongDoublePair_default_instance_;
PROTOBUF_CONSTEXPR OptionalDouble::OptionalDouble(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.d_)*/0} {}
struct OptionalDoubleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionalDoubleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionalDoubleDefaultTypeInternal() {}
  union {
    OptionalDouble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionalDoubleDefaultTypeInternal _OptionalDouble_default_instance_;
PROTOBUF_CONSTEXPR StrIntPair::StrIntPair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.s_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.i_)*/0} {}
struct StrIntPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StrIntPairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StrIntPairDefaultTypeInternal() {}
  union {
    StrIntPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StrIntPairDefaultTypeInternal _StrIntPair_default_instance_;
PROTOBUF_CONSTEXPR DoubleOrStr::DoubleOrStr(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sd_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DoubleOrStrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoubleOrStrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoubleOrStrDefaultTypeInternal() {}
  union {
    DoubleOrStr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoubleOrStrDefaultTypeInternal _DoubleOrStr_default_instance_;
PROTOBUF_CONSTEXPR StrStrIntSet::StrStrIntSet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.s1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.s2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.i_)*/0} {}
struct StrStrIntSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StrStrIntSetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StrStrIntSetDefaultTypeInternal() {}
  union {
    StrStrIntSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StrStrIntSetDefaultTypeInternal _StrStrIntSet_default_instance_;
PROTOBUF_CONSTEXPR StrULongMap::StrULongMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.s_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ul_)*/uint64_t{0u}} {}
struct StrULongMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StrULongMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StrULongMapDefaultTypeInternal() {}
  union {
    StrULongMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StrULongMapDefaultTypeInternal _StrULongMap_default_instance_;
PROTOBUF_CONSTEXPR StringList::StringList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sl_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringListDefaultTypeInternal() {}
  union {
    StringList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringListDefaultTypeInternal _StringList_default_instance_;
PROTOBUF_CONSTEXPR BytesList::BytesList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bl_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BytesListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BytesListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BytesListDefaultTypeInternal() {}
  union {
    BytesList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BytesListDefaultTypeInternal _BytesList_default_instance_;
PROTOBUF_CONSTEXPR BytesListWithStartEnd::BytesListWithStartEnd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bl_)*/{}
  , /*decltype(_impl_.start_)*/uint64_t{0u}
  , /*decltype(_impl_.end_)*/uint64_t{0u}
  , /*decltype(_impl_.counter_)*/uint64_t{0u}} {}
struct BytesListWithStartEndDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BytesListWithStartEndDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BytesListWithStartEndDefaultTypeInternal() {}
  union {
    BytesListWithStartEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BytesListWithStartEndDefaultTypeInternal _BytesListWithStartEnd_default_instance_;
PROTOBUF_CONSTEXPR AnalysisModeEnum::AnalysisModeEnum(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.am_)*/1} {}
struct AnalysisModeEnumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnalysisModeEnumDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnalysisModeEnumDefaultTypeInternal() {}
  union {
    AnalysisModeEnum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnalysisModeEnumDefaultTypeInternal _AnalysisModeEnum_default_instance_;
PROTOBUF_CONSTEXPR TransTypeEnum::TransTypeEnum(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tt_)*/1} {}
struct TransTypeEnumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransTypeEnumDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransTypeEnumDefaultTypeInternal() {}
  union {
    TransTypeEnum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransTypeEnumDefaultTypeInternal _TransTypeEnum_default_instance_;
PROTOBUF_CONSTEXPR ModeTransPairClass::ModeTransPairClass(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ame_)*/nullptr
  , /*decltype(_impl_.tte_)*/nullptr} {}
struct ModeTransPairClassDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModeTransPairClassDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModeTransPairClassDefaultTypeInternal() {}
  union {
    ModeTransPairClass _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModeTransPairClassDefaultTypeInternal _ModeTransPairClass_default_instance_;
PROTOBUF_CONSTEXPR ModeTransPairMapDouble::ModeTransPairMapDouble(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.first_)*/nullptr
  , /*decltype(_impl_.second_)*/0} {}
struct ModeTransPairMapDoubleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModeTransPairMapDoubleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModeTransPairMapDoubleDefaultTypeInternal() {}
  union {
    ModeTransPairMapDouble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModeTransPairMapDoubleDefaultTypeInternal _ModeTransPairMapDouble_default_instance_;
PROTOBUF_CONSTEXPR CapacitiveUnitEnum::CapacitiveUnitEnum(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cu_)*/0} {}
struct CapacitiveUnitEnumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CapacitiveUnitEnumDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CapacitiveUnitEnumDefaultTypeInternal() {}
  union {
    CapacitiveUnitEnum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CapacitiveUnitEnumDefaultTypeInternal _CapacitiveUnitEnum_default_instance_;
PROTOBUF_CONSTEXPR ResistanceUnitEnum::ResistanceUnitEnum(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ru_)*/0} {}
struct ResistanceUnitEnumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResistanceUnitEnumDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResistanceUnitEnumDefaultTypeInternal() {}
  union {
    ResistanceUnitEnum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResistanceUnitEnumDefaultTypeInternal _ResistanceUnitEnum_default_instance_;
}  // namespace Types
}  // namespace Common
static ::_pb::Metadata file_level_metadata_CommonTypes_2eproto[31];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_CommonTypes_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_CommonTypes_2eproto = nullptr;

const uint32_t TableStruct_CommonTypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Common::Types::EmptyMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::EmptyMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::EmptyMsg, _impl_.e_),
  0,
  PROTOBUF_FIELD_OFFSET(::Common::Types::IntMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::IntMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::IntMsg, _impl_.i_),
  0,
  PROTOBUF_FIELD_OFFSET(::Common::Types::LongMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::LongMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::LongMsg, _impl_.l_),
  0,
  PROTOBUF_FIELD_OFFSET(::Common::Types::UIntMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::UIntMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::UIntMsg, _impl_.ui_),
  0,
  PROTOBUF_FIELD_OFFSET(::Common::Types::ULongMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::ULongMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::ULongMsg, _impl_.ul_),
  0,
  PROTOBUF_FIELD_OFFSET(::Common::Types::FloatMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::FloatMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::FloatMsg, _impl_.f_),
  0,
  PROTOBUF_FIELD_OFFSET(::Common::Types::DoubleMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::DoubleMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::DoubleMsg, _impl_.d_),
  0,
  PROTOBUF_FIELD_OFFSET(::Common::Types::BoolMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::BoolMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::BoolMsg, _impl_.b_),
  0,
  PROTOBUF_FIELD_OFFSET(::Common::Types::StringMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::StringMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::StringMsg, _impl_.s_),
  0,
  PROTOBUF_FIELD_OFFSET(::Common::Types::IntPair, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::IntPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::IntPair, _impl_.first_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::IntPair, _impl_.second_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Types::DoubleList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::DoubleList, _impl_.d_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Types::DoubleMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::DoubleMatrix, _impl_.dl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Types::DoubleMatrixTuple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::DoubleMatrixTuple, _impl_.dm_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::ULongPair, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::ULongPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::ULongPair, _impl_.first_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::ULongPair, _impl_.second_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Types::ULongList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::ULongList, _impl_.ul_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::ULongUintPair, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::ULongUintPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::ULongUintPair, _impl_.first_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::ULongUintPair, _impl_.second_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Common::Types::ULongDoublePair, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::ULongDoublePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::ULongDoublePair, _impl_.first_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::ULongDoublePair, _impl_.second_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Common::Types::OptionalDouble, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::OptionalDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::OptionalDouble, _impl_.d_),
  0,
  PROTOBUF_FIELD_OFFSET(::Common::Types::StrIntPair, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::StrIntPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::StrIntPair, _impl_.s_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::StrIntPair, _impl_.i_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Types::DoubleOrStr, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Common::Types::DoubleOrStr, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Common::Types::DoubleOrStr, _impl_.sd_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::StrStrIntSet, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::StrStrIntSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::StrStrIntSet, _impl_.s1_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::StrStrIntSet, _impl_.s2_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::StrStrIntSet, _impl_.i_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Common::Types::StrULongMap, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::StrULongMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::StrULongMap, _impl_.s_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::StrULongMap, _impl_.ul_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Types::StringList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::StringList, _impl_.sl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Types::BytesList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::BytesList, _impl_.bl_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::BytesListWithStartEnd, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::BytesListWithStartEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::BytesListWithStartEnd, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::BytesListWithStartEnd, _impl_.end_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::BytesListWithStartEnd, _impl_.counter_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::BytesListWithStartEnd, _impl_.bl_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Common::Types::AnalysisModeEnum, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::AnalysisModeEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::AnalysisModeEnum, _impl_.am_),
  0,
  PROTOBUF_FIELD_OFFSET(::Common::Types::TransTypeEnum, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::TransTypeEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::TransTypeEnum, _impl_.tt_),
  0,
  PROTOBUF_FIELD_OFFSET(::Common::Types::ModeTransPairClass, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::ModeTransPairClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::ModeTransPairClass, _impl_.ame_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::ModeTransPairClass, _impl_.tte_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Common::Types::ModeTransPairMapDouble, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::ModeTransPairMapDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::ModeTransPairMapDouble, _impl_.first_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::ModeTransPairMapDouble, _impl_.second_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Common::Types::CapacitiveUnitEnum, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::CapacitiveUnitEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::CapacitiveUnitEnum, _impl_.cu_),
  0,
  PROTOBUF_FIELD_OFFSET(::Common::Types::ResistanceUnitEnum, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Types::ResistanceUnitEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Types::ResistanceUnitEnum, _impl_.ru_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::Common::Types::EmptyMsg)},
  { 8, 15, -1, sizeof(::Common::Types::IntMsg)},
  { 16, 23, -1, sizeof(::Common::Types::LongMsg)},
  { 24, 31, -1, sizeof(::Common::Types::UIntMsg)},
  { 32, 39, -1, sizeof(::Common::Types::ULongMsg)},
  { 40, 47, -1, sizeof(::Common::Types::FloatMsg)},
  { 48, 55, -1, sizeof(::Common::Types::DoubleMsg)},
  { 56, 63, -1, sizeof(::Common::Types::BoolMsg)},
  { 64, 71, -1, sizeof(::Common::Types::StringMsg)},
  { 72, 80, -1, sizeof(::Common::Types::IntPair)},
  { 82, -1, -1, sizeof(::Common::Types::DoubleList)},
  { 89, -1, -1, sizeof(::Common::Types::DoubleMatrix)},
  { 96, -1, -1, sizeof(::Common::Types::DoubleMatrixTuple)},
  { 103, 111, -1, sizeof(::Common::Types::ULongPair)},
  { 113, -1, -1, sizeof(::Common::Types::ULongList)},
  { 120, 128, -1, sizeof(::Common::Types::ULongUintPair)},
  { 130, 138, -1, sizeof(::Common::Types::ULongDoublePair)},
  { 140, 147, -1, sizeof(::Common::Types::OptionalDouble)},
  { 148, 156, -1, sizeof(::Common::Types::StrIntPair)},
  { 158, -1, -1, sizeof(::Common::Types::DoubleOrStr)},
  { 167, 176, -1, sizeof(::Common::Types::StrStrIntSet)},
  { 179, 187, -1, sizeof(::Common::Types::StrULongMap)},
  { 189, -1, -1, sizeof(::Common::Types::StringList)},
  { 196, -1, -1, sizeof(::Common::Types::BytesList)},
  { 203, 213, -1, sizeof(::Common::Types::BytesListWithStartEnd)},
  { 217, 224, -1, sizeof(::Common::Types::AnalysisModeEnum)},
  { 225, 232, -1, sizeof(::Common::Types::TransTypeEnum)},
  { 233, 241, -1, sizeof(::Common::Types::ModeTransPairClass)},
  { 243, 251, -1, sizeof(::Common::Types::ModeTransPairMapDouble)},
  { 253, 260, -1, sizeof(::Common::Types::CapacitiveUnitEnum)},
  { 261, 268, -1, sizeof(::Common::Types::ResistanceUnitEnum)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Common::Types::_EmptyMsg_default_instance_._instance,
  &::Common::Types::_IntMsg_default_instance_._instance,
  &::Common::Types::_LongMsg_default_instance_._instance,
  &::Common::Types::_UIntMsg_default_instance_._instance,
  &::Common::Types::_ULongMsg_default_instance_._instance,
  &::Common::Types::_FloatMsg_default_instance_._instance,
  &::Common::Types::_DoubleMsg_default_instance_._instance,
  &::Common::Types::_BoolMsg_default_instance_._instance,
  &::Common::Types::_StringMsg_default_instance_._instance,
  &::Common::Types::_IntPair_default_instance_._instance,
  &::Common::Types::_DoubleList_default_instance_._instance,
  &::Common::Types::_DoubleMatrix_default_instance_._instance,
  &::Common::Types::_DoubleMatrixTuple_default_instance_._instance,
  &::Common::Types::_ULongPair_default_instance_._instance,
  &::Common::Types::_ULongList_default_instance_._instance,
  &::Common::Types::_ULongUintPair_default_instance_._instance,
  &::Common::Types::_ULongDoublePair_default_instance_._instance,
  &::Common::Types::_OptionalDouble_default_instance_._instance,
  &::Common::Types::_StrIntPair_default_instance_._instance,
  &::Common::Types::_DoubleOrStr_default_instance_._instance,
  &::Common::Types::_StrStrIntSet_default_instance_._instance,
  &::Common::Types::_StrULongMap_default_instance_._instance,
  &::Common::Types::_StringList_default_instance_._instance,
  &::Common::Types::_BytesList_default_instance_._instance,
  &::Common::Types::_BytesListWithStartEnd_default_instance_._instance,
  &::Common::Types::_AnalysisModeEnum_default_instance_._instance,
  &::Common::Types::_TransTypeEnum_default_instance_._instance,
  &::Common::Types::_ModeTransPairClass_default_instance_._instance,
  &::Common::Types::_ModeTransPairMapDouble_default_instance_._instance,
  &::Common::Types::_CapacitiveUnitEnum_default_instance_._instance,
  &::Common::Types::_ResistanceUnitEnum_default_instance_._instance,
};

const char descriptor_table_protodef_CommonTypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021CommonTypes.proto\022\014Common.Types\032\033googl"
  "e/protobuf/empty.proto\"-\n\010EmptyMsg\022!\n\001e\030"
  "\001 \002(\0132\026.google.protobuf.Empty\"\023\n\006IntMsg\022"
  "\t\n\001i\030\001 \002(\005\"\024\n\007LongMsg\022\t\n\001l\030\001 \002(\003\"\025\n\007UInt"
  "Msg\022\n\n\002ui\030\001 \002(\r\"\026\n\010ULongMsg\022\n\n\002ul\030\001 \002(\004\""
  "\025\n\010FloatMsg\022\t\n\001f\030\001 \002(\002\"\026\n\tDoubleMsg\022\t\n\001d"
  "\030\001 \002(\001\"\024\n\007BoolMsg\022\t\n\001b\030\001 \002(\010\"\026\n\tStringMs"
  "g\022\t\n\001s\030\001 \002(\t\"(\n\007IntPair\022\r\n\005first\030\001 \002(\005\022\016"
  "\n\006second\030\002 \002(\005\"\027\n\nDoubleList\022\t\n\001d\030\001 \003(\001\""
  "4\n\014DoubleMatrix\022$\n\002dl\030\001 \003(\0132\030.Common.Typ"
  "es.DoubleList\";\n\021DoubleMatrixTuple\022&\n\002dm"
  "\030\001 \003(\0132\032.Common.Types.DoubleMatrix\"*\n\tUL"
  "ongPair\022\r\n\005first\030\001 \002(\004\022\016\n\006second\030\002 \002(\004\"\027"
  "\n\tULongList\022\n\n\002ul\030\001 \003(\004\".\n\rULongUintPair"
  "\022\r\n\005first\030\001 \002(\004\022\016\n\006second\030\002 \002(\r\"0\n\017ULong"
  "DoublePair\022\r\n\005first\030\001 \002(\004\022\016\n\006second\030\002 \002("
  "\001\"\033\n\016OptionalDouble\022\t\n\001d\030\001 \001(\001\"\"\n\nStrInt"
  "Pair\022\t\n\001s\030\001 \002(\t\022\t\n\001i\030\002 \002(\005\"-\n\013DoubleOrSt"
  "r\022\013\n\001d\030\001 \001(\001H\000\022\013\n\001s\030\002 \001(\tH\000B\004\n\002sd\"1\n\014Str"
  "StrIntSet\022\n\n\002s1\030\001 \002(\t\022\n\n\002s2\030\002 \002(\t\022\t\n\001i\030\003"
  " \002(\005\"$\n\013StrULongMap\022\t\n\001s\030\001 \002(\t\022\n\n\002ul\030\002 \002"
  "(\004\"\030\n\nStringList\022\n\n\002sl\030\001 \003(\t\"\027\n\tBytesLis"
  "t\022\n\n\002bl\030\001 \003(\014\"P\n\025BytesListWithStartEnd\022\r"
  "\n\005start\030\001 \002(\004\022\013\n\003end\030\002 \002(\004\022\017\n\007counter\030\003 "
  "\002(\004\022\n\n\002bl\030\004 \003(\014\"|\n\020AnalysisModeEnum\0227\n\002a"
  "m\030\001 \002(\0162+.Common.Types.AnalysisModeEnum."
  "AnalysisMode\"/\n\014AnalysisMode\022\010\n\004kMax\020\001\022\010"
  "\n\004kMin\020\002\022\013\n\007kMaxMin\020\003\"e\n\rTransTypeEnum\0221"
  "\n\002tt\030\001 \002(\0162%.Common.Types.TransTypeEnum."
  "TransType\"!\n\tTransType\022\t\n\005kRise\020\001\022\t\n\005kFa"
  "ll\020\002\"k\n\022ModeTransPairClass\022+\n\003ame\030\001 \002(\0132"
  "\036.Common.Types.AnalysisModeEnum\022(\n\003tte\030\002"
  " \002(\0132\033.Common.Types.TransTypeEnum\"Y\n\026Mod"
  "eTransPairMapDouble\022/\n\005first\030\001 \002(\0132 .Com"
  "mon.Types.ModeTransPairClass\022\016\n\006second\030\002"
  " \002(\001\"u\n\022CapacitiveUnitEnum\022;\n\002cu\030\001 \002(\0162/"
  ".Common.Types.CapacitiveUnitEnum.Capacit"
  "iveUnit\"\"\n\016CapacitiveUnit\022\007\n\003kPF\020\000\022\007\n\003kF"
  "F\020\001\"x\n\022ResistanceUnitEnum\022;\n\002ru\030\001 \002(\0162/."
  "Common.Types.ResistanceUnitEnum.Resistan"
  "ceUnit\"%\n\016ResistanceUnit\022\010\n\004kOHM\020\000\022\t\n\005kk"
  "OHM\020\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_CommonTypes_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_CommonTypes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_CommonTypes_2eproto = {
    false, false, 1645, descriptor_table_protodef_CommonTypes_2eproto,
    "CommonTypes.proto",
    &descriptor_table_CommonTypes_2eproto_once, descriptor_table_CommonTypes_2eproto_deps, 1, 31,
    schemas, file_default_instances, TableStruct_CommonTypes_2eproto::offsets,
    file_level_metadata_CommonTypes_2eproto, file_level_enum_descriptors_CommonTypes_2eproto,
    file_level_service_descriptors_CommonTypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_CommonTypes_2eproto_getter() {
  return &descriptor_table_CommonTypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_CommonTypes_2eproto(&descriptor_table_CommonTypes_2eproto);
namespace Common {
namespace Types {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnalysisModeEnum_AnalysisMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CommonTypes_2eproto);
  return file_level_enum_descriptors_CommonTypes_2eproto[0];
}
bool AnalysisModeEnum_AnalysisMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AnalysisModeEnum_AnalysisMode AnalysisModeEnum::kMax;
constexpr AnalysisModeEnum_AnalysisMode AnalysisModeEnum::kMin;
constexpr AnalysisModeEnum_AnalysisMode AnalysisModeEnum::kMaxMin;
constexpr AnalysisModeEnum_AnalysisMode AnalysisModeEnum::AnalysisMode_MIN;
constexpr AnalysisModeEnum_AnalysisMode AnalysisModeEnum::AnalysisMode_MAX;
constexpr int AnalysisModeEnum::AnalysisMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransTypeEnum_TransType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CommonTypes_2eproto);
  return file_level_enum_descriptors_CommonTypes_2eproto[1];
}
bool TransTypeEnum_TransType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TransTypeEnum_TransType TransTypeEnum::kRise;
constexpr TransTypeEnum_TransType TransTypeEnum::kFall;
constexpr TransTypeEnum_TransType TransTypeEnum::TransType_MIN;
constexpr TransTypeEnum_TransType TransTypeEnum::TransType_MAX;
constexpr int TransTypeEnum::TransType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CapacitiveUnitEnum_CapacitiveUnit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CommonTypes_2eproto);
  return file_level_enum_descriptors_CommonTypes_2eproto[2];
}
bool CapacitiveUnitEnum_CapacitiveUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CapacitiveUnitEnum_CapacitiveUnit CapacitiveUnitEnum::kPF;
constexpr CapacitiveUnitEnum_CapacitiveUnit CapacitiveUnitEnum::kFF;
constexpr CapacitiveUnitEnum_CapacitiveUnit CapacitiveUnitEnum::CapacitiveUnit_MIN;
constexpr CapacitiveUnitEnum_CapacitiveUnit CapacitiveUnitEnum::CapacitiveUnit_MAX;
constexpr int CapacitiveUnitEnum::CapacitiveUnit_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResistanceUnitEnum_ResistanceUnit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CommonTypes_2eproto);
  return file_level_enum_descriptors_CommonTypes_2eproto[3];
}
bool ResistanceUnitEnum_ResistanceUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ResistanceUnitEnum_ResistanceUnit ResistanceUnitEnum::kOHM;
constexpr ResistanceUnitEnum_ResistanceUnit ResistanceUnitEnum::kkOHM;
constexpr ResistanceUnitEnum_ResistanceUnit ResistanceUnitEnum::ResistanceUnit_MIN;
constexpr ResistanceUnitEnum_ResistanceUnit ResistanceUnitEnum::ResistanceUnit_MAX;
constexpr int ResistanceUnitEnum::ResistanceUnit_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class EmptyMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<EmptyMsg>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Empty& e(const EmptyMsg* msg);
  static void set_has_e(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Empty&
EmptyMsg::_Internal::e(const EmptyMsg* msg) {
  return *msg->_impl_.e_;
}
void EmptyMsg::clear_e() {
  if (_impl_.e_ != nullptr) _impl_.e_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
EmptyMsg::EmptyMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.EmptyMsg)
}
EmptyMsg::EmptyMsg(const EmptyMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmptyMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.e_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_e()) {
    _this->_impl_.e_ = new ::PROTOBUF_NAMESPACE_ID::Empty(*from._impl_.e_);
  }
  // @@protoc_insertion_point(copy_constructor:Common.Types.EmptyMsg)
}

inline void EmptyMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.e_){nullptr}
  };
}

EmptyMsg::~EmptyMsg() {
  // @@protoc_insertion_point(destructor:Common.Types.EmptyMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmptyMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.e_;
}

void EmptyMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmptyMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.EmptyMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.e_ != nullptr);
    _impl_.e_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmptyMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .google.protobuf.Empty e = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_e(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmptyMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.EmptyMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .google.protobuf.Empty e = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::e(this),
        _Internal::e(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.EmptyMsg)
  return target;
}

size_t EmptyMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.EmptyMsg)
  size_t total_size = 0;

  // required .google.protobuf.Empty e = 1;
  if (_internal_has_e()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.e_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmptyMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmptyMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmptyMsg::GetClassData() const { return &_class_data_; }


void EmptyMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmptyMsg*>(&to_msg);
  auto& from = static_cast<const EmptyMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.EmptyMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_e()) {
    _this->_internal_mutable_e()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
        from._internal_e());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmptyMsg::CopyFrom(const EmptyMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.EmptyMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void EmptyMsg::InternalSwap(EmptyMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.e_, other->_impl_.e_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmptyMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[0]);
}

// ===================================================================

class IntMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<IntMsg>()._impl_._has_bits_);
  static void set_has_i(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

IntMsg::IntMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.IntMsg)
}
IntMsg::IntMsg(const IntMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IntMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.i_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.i_ = from._impl_.i_;
  // @@protoc_insertion_point(copy_constructor:Common.Types.IntMsg)
}

inline void IntMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.i_){0}
  };
}

IntMsg::~IntMsg() {
  // @@protoc_insertion_point(destructor:Common.Types.IntMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IntMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.IntMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.i_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 i = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_i(&has_bits);
          _impl_.i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.IntMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 i = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_i(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.IntMsg)
  return target;
}

size_t IntMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.IntMsg)
  size_t total_size = 0;

  // required int32 i = 1;
  if (_internal_has_i()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_i());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IntMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntMsg::GetClassData() const { return &_class_data_; }


void IntMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IntMsg*>(&to_msg);
  auto& from = static_cast<const IntMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.IntMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_i()) {
    _this->_internal_set_i(from._internal_i());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntMsg::CopyFrom(const IntMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.IntMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void IntMsg::InternalSwap(IntMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.i_, other->_impl_.i_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[1]);
}

// ===================================================================

class LongMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<LongMsg>()._impl_._has_bits_);
  static void set_has_l(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

LongMsg::LongMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.LongMsg)
}
LongMsg::LongMsg(const LongMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LongMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.l_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.l_ = from._impl_.l_;
  // @@protoc_insertion_point(copy_constructor:Common.Types.LongMsg)
}

inline void LongMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.l_){int64_t{0}}
  };
}

LongMsg::~LongMsg() {
  // @@protoc_insertion_point(destructor:Common.Types.LongMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LongMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LongMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LongMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.LongMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.l_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LongMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 l = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_l(&has_bits);
          _impl_.l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LongMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.LongMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 l = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_l(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.LongMsg)
  return target;
}

size_t LongMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.LongMsg)
  size_t total_size = 0;

  // required int64 l = 1;
  if (_internal_has_l()) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_l());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LongMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LongMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LongMsg::GetClassData() const { return &_class_data_; }


void LongMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LongMsg*>(&to_msg);
  auto& from = static_cast<const LongMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.LongMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_l()) {
    _this->_internal_set_l(from._internal_l());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LongMsg::CopyFrom(const LongMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.LongMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void LongMsg::InternalSwap(LongMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.l_, other->_impl_.l_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LongMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[2]);
}

// ===================================================================

class UIntMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<UIntMsg>()._impl_._has_bits_);
  static void set_has_ui(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

UIntMsg::UIntMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.UIntMsg)
}
UIntMsg::UIntMsg(const UIntMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UIntMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ui_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ui_ = from._impl_.ui_;
  // @@protoc_insertion_point(copy_constructor:Common.Types.UIntMsg)
}

inline void UIntMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ui_){0u}
  };
}

UIntMsg::~UIntMsg() {
  // @@protoc_insertion_point(destructor:Common.Types.UIntMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UIntMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UIntMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UIntMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.UIntMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ui_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UIntMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 ui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ui(&has_bits);
          _impl_.ui_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UIntMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.UIntMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 ui = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.UIntMsg)
  return target;
}

size_t UIntMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.UIntMsg)
  size_t total_size = 0;

  // required uint32 ui = 1;
  if (_internal_has_ui()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ui());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UIntMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UIntMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UIntMsg::GetClassData() const { return &_class_data_; }


void UIntMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UIntMsg*>(&to_msg);
  auto& from = static_cast<const UIntMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.UIntMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ui()) {
    _this->_internal_set_ui(from._internal_ui());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UIntMsg::CopyFrom(const UIntMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.UIntMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIntMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UIntMsg::InternalSwap(UIntMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.ui_, other->_impl_.ui_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UIntMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[3]);
}

// ===================================================================

class ULongMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<ULongMsg>()._impl_._has_bits_);
  static void set_has_ul(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ULongMsg::ULongMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.ULongMsg)
}
ULongMsg::ULongMsg(const ULongMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ULongMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ul_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ul_ = from._impl_.ul_;
  // @@protoc_insertion_point(copy_constructor:Common.Types.ULongMsg)
}

inline void ULongMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ul_){uint64_t{0u}}
  };
}

ULongMsg::~ULongMsg() {
  // @@protoc_insertion_point(destructor:Common.Types.ULongMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ULongMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ULongMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ULongMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.ULongMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ul_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ULongMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 ul = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ul(&has_bits);
          _impl_.ul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ULongMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.ULongMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 ul = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ul(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.ULongMsg)
  return target;
}

size_t ULongMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.ULongMsg)
  size_t total_size = 0;

  // required uint64 ul = 1;
  if (_internal_has_ul()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ul());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ULongMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ULongMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ULongMsg::GetClassData() const { return &_class_data_; }


void ULongMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ULongMsg*>(&to_msg);
  auto& from = static_cast<const ULongMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.ULongMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ul()) {
    _this->_internal_set_ul(from._internal_ul());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ULongMsg::CopyFrom(const ULongMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.ULongMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ULongMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ULongMsg::InternalSwap(ULongMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.ul_, other->_impl_.ul_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ULongMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[4]);
}

// ===================================================================

class FloatMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<FloatMsg>()._impl_._has_bits_);
  static void set_has_f(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FloatMsg::FloatMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.FloatMsg)
}
FloatMsg::FloatMsg(const FloatMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FloatMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.f_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.f_ = from._impl_.f_;
  // @@protoc_insertion_point(copy_constructor:Common.Types.FloatMsg)
}

inline void FloatMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.f_){0}
  };
}

FloatMsg::~FloatMsg() {
  // @@protoc_insertion_point(destructor:Common.Types.FloatMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FloatMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FloatMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FloatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.FloatMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.f_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float f = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_f(&has_bits);
          _impl_.f_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FloatMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.FloatMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float f = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_f(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.FloatMsg)
  return target;
}

size_t FloatMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.FloatMsg)
  size_t total_size = 0;

  // required float f = 1;
  if (_internal_has_f()) {
    total_size += 1 + 4;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FloatMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FloatMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FloatMsg::GetClassData() const { return &_class_data_; }


void FloatMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FloatMsg*>(&to_msg);
  auto& from = static_cast<const FloatMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.FloatMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f()) {
    _this->_internal_set_f(from._internal_f());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FloatMsg::CopyFrom(const FloatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.FloatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FloatMsg::InternalSwap(FloatMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.f_, other->_impl_.f_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[5]);
}

// ===================================================================

class DoubleMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<DoubleMsg>()._impl_._has_bits_);
  static void set_has_d(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DoubleMsg::DoubleMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.DoubleMsg)
}
DoubleMsg::DoubleMsg(const DoubleMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DoubleMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.d_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.d_ = from._impl_.d_;
  // @@protoc_insertion_point(copy_constructor:Common.Types.DoubleMsg)
}

inline void DoubleMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.d_){0}
  };
}

DoubleMsg::~DoubleMsg() {
  // @@protoc_insertion_point(destructor:Common.Types.DoubleMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DoubleMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DoubleMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DoubleMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.DoubleMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.d_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double d = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_d(&has_bits);
          _impl_.d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DoubleMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.DoubleMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required double d = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.DoubleMsg)
  return target;
}

size_t DoubleMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.DoubleMsg)
  size_t total_size = 0;

  // required double d = 1;
  if (_internal_has_d()) {
    total_size += 1 + 8;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DoubleMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DoubleMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DoubleMsg::GetClassData() const { return &_class_data_; }


void DoubleMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DoubleMsg*>(&to_msg);
  auto& from = static_cast<const DoubleMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.DoubleMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_d()) {
    _this->_internal_set_d(from._internal_d());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DoubleMsg::CopyFrom(const DoubleMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.DoubleMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DoubleMsg::InternalSwap(DoubleMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.d_, other->_impl_.d_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[6]);
}

// ===================================================================

class BoolMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<BoolMsg>()._impl_._has_bits_);
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

BoolMsg::BoolMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.BoolMsg)
}
BoolMsg::BoolMsg(const BoolMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BoolMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.b_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.b_ = from._impl_.b_;
  // @@protoc_insertion_point(copy_constructor:Common.Types.BoolMsg)
}

inline void BoolMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.b_){false}
  };
}

BoolMsg::~BoolMsg() {
  // @@protoc_insertion_point(destructor:Common.Types.BoolMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoolMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BoolMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BoolMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.BoolMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.b_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoolMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool b = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_b(&has_bits);
          _impl_.b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoolMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.BoolMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool b = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.BoolMsg)
  return target;
}

size_t BoolMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.BoolMsg)
  size_t total_size = 0;

  // required bool b = 1;
  if (_internal_has_b()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoolMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BoolMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoolMsg::GetClassData() const { return &_class_data_; }


void BoolMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BoolMsg*>(&to_msg);
  auto& from = static_cast<const BoolMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.BoolMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_b()) {
    _this->_internal_set_b(from._internal_b());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoolMsg::CopyFrom(const BoolMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.BoolMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void BoolMsg::InternalSwap(BoolMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.b_, other->_impl_.b_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoolMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[7]);
}

// ===================================================================

class StringMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<StringMsg>()._impl_._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

StringMsg::StringMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.StringMsg)
}
StringMsg::StringMsg(const StringMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_s()) {
    _this->_impl_.s_.Set(from._internal_s(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Common.Types.StringMsg)
}

inline void StringMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){}
  };
  _impl_.s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringMsg::~StringMsg() {
  // @@protoc_insertion_point(destructor:Common.Types.StringMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.s_.Destroy();
}

void StringMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.StringMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.s_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Common.Types.StringMsg.s");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.StringMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_s().data(), static_cast<int>(this->_internal_s().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Common.Types.StringMsg.s");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.StringMsg)
  return target;
}

size_t StringMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.StringMsg)
  size_t total_size = 0;

  // required string s = 1;
  if (_internal_has_s()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringMsg::GetClassData() const { return &_class_data_; }


void StringMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringMsg*>(&to_msg);
  auto& from = static_cast<const StringMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.StringMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_s()) {
    _this->_internal_set_s(from._internal_s());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringMsg::CopyFrom(const StringMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.StringMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void StringMsg::InternalSwap(StringMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.s_, lhs_arena,
      &other->_impl_.s_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StringMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[8]);
}

// ===================================================================

class IntPair::_Internal {
 public:
  using HasBits = decltype(std::declval<IntPair>()._impl_._has_bits_);
  static void set_has_first(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_second(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

IntPair::IntPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.IntPair)
}
IntPair::IntPair(const IntPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IntPair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.first_){}
    , decltype(_impl_.second_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.first_, &from._impl_.first_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.second_) -
    reinterpret_cast<char*>(&_impl_.first_)) + sizeof(_impl_.second_));
  // @@protoc_insertion_point(copy_constructor:Common.Types.IntPair)
}

inline void IntPair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.first_){0}
    , decltype(_impl_.second_){0}
  };
}

IntPair::~IntPair() {
  // @@protoc_insertion_point(destructor:Common.Types.IntPair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IntPair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntPair::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.IntPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.first_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.second_) -
        reinterpret_cast<char*>(&_impl_.first_)) + sizeof(_impl_.second_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntPair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 first = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_first(&has_bits);
          _impl_.first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 second = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_second(&has_bits);
          _impl_.second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.IntPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 first = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_first(), target);
  }

  // required int32 second = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_second(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.IntPair)
  return target;
}

size_t IntPair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Common.Types.IntPair)
  size_t total_size = 0;

  if (_internal_has_first()) {
    // required int32 first = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_first());
  }

  if (_internal_has_second()) {
    // required int32 second = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_second());
  }

  return total_size;
}
size_t IntPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.IntPair)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 first = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_first());

    // required int32 second = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_second());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IntPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntPair::GetClassData() const { return &_class_data_; }


void IntPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IntPair*>(&to_msg);
  auto& from = static_cast<const IntPair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.IntPair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.first_ = from._impl_.first_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.second_ = from._impl_.second_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntPair::CopyFrom(const IntPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.IntPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntPair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void IntPair::InternalSwap(IntPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntPair, _impl_.second_)
      + sizeof(IntPair::_impl_.second_)
      - PROTOBUF_FIELD_OFFSET(IntPair, _impl_.first_)>(
          reinterpret_cast<char*>(&_impl_.first_),
          reinterpret_cast<char*>(&other->_impl_.first_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[9]);
}

// ===================================================================

class DoubleList::_Internal {
 public:
};

DoubleList::DoubleList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.DoubleList)
}
DoubleList::DoubleList(const DoubleList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DoubleList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.d_){from._impl_.d_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Common.Types.DoubleList)
}

inline void DoubleList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.d_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DoubleList::~DoubleList() {
  // @@protoc_insertion_point(destructor:Common.Types.DoubleList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DoubleList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.d_.~RepeatedField();
}

void DoubleList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DoubleList::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.DoubleList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.d_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double d = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_d(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_d(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DoubleList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.DoubleList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double d = 1;
  for (int i = 0, n = this->_internal_d_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_d(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.DoubleList)
  return target;
}

size_t DoubleList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.DoubleList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double d = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_d_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_d_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DoubleList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DoubleList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DoubleList::GetClassData() const { return &_class_data_; }


void DoubleList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DoubleList*>(&to_msg);
  auto& from = static_cast<const DoubleList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.DoubleList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.d_.MergeFrom(from._impl_.d_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DoubleList::CopyFrom(const DoubleList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.DoubleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleList::IsInitialized() const {
  return true;
}

void DoubleList::InternalSwap(DoubleList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.d_.InternalSwap(&other->_impl_.d_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[10]);
}

// ===================================================================

class DoubleMatrix::_Internal {
 public:
};

DoubleMatrix::DoubleMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.DoubleMatrix)
}
DoubleMatrix::DoubleMatrix(const DoubleMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DoubleMatrix* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dl_){from._impl_.dl_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Common.Types.DoubleMatrix)
}

inline void DoubleMatrix::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dl_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DoubleMatrix::~DoubleMatrix() {
  // @@protoc_insertion_point(destructor:Common.Types.DoubleMatrix)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DoubleMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dl_.~RepeatedPtrField();
}

void DoubleMatrix::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DoubleMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.DoubleMatrix)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dl_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleMatrix::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Common.Types.DoubleList dl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dl(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DoubleMatrix::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.DoubleMatrix)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Common.Types.DoubleList dl = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dl_size()); i < n; i++) {
    const auto& repfield = this->_internal_dl(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.DoubleMatrix)
  return target;
}

size_t DoubleMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.DoubleMatrix)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Common.Types.DoubleList dl = 1;
  total_size += 1UL * this->_internal_dl_size();
  for (const auto& msg : this->_impl_.dl_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DoubleMatrix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DoubleMatrix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DoubleMatrix::GetClassData() const { return &_class_data_; }


void DoubleMatrix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DoubleMatrix*>(&to_msg);
  auto& from = static_cast<const DoubleMatrix&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.DoubleMatrix)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dl_.MergeFrom(from._impl_.dl_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DoubleMatrix::CopyFrom(const DoubleMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.DoubleMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleMatrix::IsInitialized() const {
  return true;
}

void DoubleMatrix::InternalSwap(DoubleMatrix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dl_.InternalSwap(&other->_impl_.dl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleMatrix::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[11]);
}

// ===================================================================

class DoubleMatrixTuple::_Internal {
 public:
};

DoubleMatrixTuple::DoubleMatrixTuple(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.DoubleMatrixTuple)
}
DoubleMatrixTuple::DoubleMatrixTuple(const DoubleMatrixTuple& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DoubleMatrixTuple* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dm_){from._impl_.dm_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Common.Types.DoubleMatrixTuple)
}

inline void DoubleMatrixTuple::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dm_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DoubleMatrixTuple::~DoubleMatrixTuple() {
  // @@protoc_insertion_point(destructor:Common.Types.DoubleMatrixTuple)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DoubleMatrixTuple::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dm_.~RepeatedPtrField();
}

void DoubleMatrixTuple::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DoubleMatrixTuple::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.DoubleMatrixTuple)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dm_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleMatrixTuple::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Common.Types.DoubleMatrix dm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DoubleMatrixTuple::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.DoubleMatrixTuple)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Common.Types.DoubleMatrix dm = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dm_size()); i < n; i++) {
    const auto& repfield = this->_internal_dm(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.DoubleMatrixTuple)
  return target;
}

size_t DoubleMatrixTuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.DoubleMatrixTuple)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Common.Types.DoubleMatrix dm = 1;
  total_size += 1UL * this->_internal_dm_size();
  for (const auto& msg : this->_impl_.dm_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DoubleMatrixTuple::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DoubleMatrixTuple::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DoubleMatrixTuple::GetClassData() const { return &_class_data_; }


void DoubleMatrixTuple::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DoubleMatrixTuple*>(&to_msg);
  auto& from = static_cast<const DoubleMatrixTuple&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.DoubleMatrixTuple)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dm_.MergeFrom(from._impl_.dm_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DoubleMatrixTuple::CopyFrom(const DoubleMatrixTuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.DoubleMatrixTuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleMatrixTuple::IsInitialized() const {
  return true;
}

void DoubleMatrixTuple::InternalSwap(DoubleMatrixTuple* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dm_.InternalSwap(&other->_impl_.dm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleMatrixTuple::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[12]);
}

// ===================================================================

class ULongPair::_Internal {
 public:
  using HasBits = decltype(std::declval<ULongPair>()._impl_._has_bits_);
  static void set_has_first(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_second(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ULongPair::ULongPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.ULongPair)
}
ULongPair::ULongPair(const ULongPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ULongPair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.first_){}
    , decltype(_impl_.second_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.first_, &from._impl_.first_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.second_) -
    reinterpret_cast<char*>(&_impl_.first_)) + sizeof(_impl_.second_));
  // @@protoc_insertion_point(copy_constructor:Common.Types.ULongPair)
}

inline void ULongPair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.first_){uint64_t{0u}}
    , decltype(_impl_.second_){uint64_t{0u}}
  };
}

ULongPair::~ULongPair() {
  // @@protoc_insertion_point(destructor:Common.Types.ULongPair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ULongPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ULongPair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ULongPair::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.ULongPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.first_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.second_) -
        reinterpret_cast<char*>(&_impl_.first_)) + sizeof(_impl_.second_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ULongPair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 first = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_first(&has_bits);
          _impl_.first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 second = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_second(&has_bits);
          _impl_.second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ULongPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.ULongPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 first = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_first(), target);
  }

  // required uint64 second = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_second(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.ULongPair)
  return target;
}

size_t ULongPair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Common.Types.ULongPair)
  size_t total_size = 0;

  if (_internal_has_first()) {
    // required uint64 first = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_first());
  }

  if (_internal_has_second()) {
    // required uint64 second = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_second());
  }

  return total_size;
}
size_t ULongPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.ULongPair)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 first = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_first());

    // required uint64 second = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_second());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ULongPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ULongPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ULongPair::GetClassData() const { return &_class_data_; }


void ULongPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ULongPair*>(&to_msg);
  auto& from = static_cast<const ULongPair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.ULongPair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.first_ = from._impl_.first_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.second_ = from._impl_.second_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ULongPair::CopyFrom(const ULongPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.ULongPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ULongPair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ULongPair::InternalSwap(ULongPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ULongPair, _impl_.second_)
      + sizeof(ULongPair::_impl_.second_)
      - PROTOBUF_FIELD_OFFSET(ULongPair, _impl_.first_)>(
          reinterpret_cast<char*>(&_impl_.first_),
          reinterpret_cast<char*>(&other->_impl_.first_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ULongPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[13]);
}

// ===================================================================

class ULongList::_Internal {
 public:
};

ULongList::ULongList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.ULongList)
}
ULongList::ULongList(const ULongList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ULongList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ul_){from._impl_.ul_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Common.Types.ULongList)
}

inline void ULongList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ul_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ULongList::~ULongList() {
  // @@protoc_insertion_point(destructor:Common.Types.ULongList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ULongList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ul_.~RepeatedField();
}

void ULongList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ULongList::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.ULongList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ul_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ULongList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 ul = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ul(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_ul(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ULongList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.ULongList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 ul = 1;
  for (int i = 0, n = this->_internal_ul_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ul(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.ULongList)
  return target;
}

size_t ULongList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.ULongList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 ul = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.ul_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_ul_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ULongList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ULongList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ULongList::GetClassData() const { return &_class_data_; }


void ULongList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ULongList*>(&to_msg);
  auto& from = static_cast<const ULongList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.ULongList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ul_.MergeFrom(from._impl_.ul_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ULongList::CopyFrom(const ULongList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.ULongList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ULongList::IsInitialized() const {
  return true;
}

void ULongList::InternalSwap(ULongList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ul_.InternalSwap(&other->_impl_.ul_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ULongList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[14]);
}

// ===================================================================

class ULongUintPair::_Internal {
 public:
  using HasBits = decltype(std::declval<ULongUintPair>()._impl_._has_bits_);
  static void set_has_first(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_second(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ULongUintPair::ULongUintPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.ULongUintPair)
}
ULongUintPair::ULongUintPair(const ULongUintPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ULongUintPair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.first_){}
    , decltype(_impl_.second_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.first_, &from._impl_.first_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.second_) -
    reinterpret_cast<char*>(&_impl_.first_)) + sizeof(_impl_.second_));
  // @@protoc_insertion_point(copy_constructor:Common.Types.ULongUintPair)
}

inline void ULongUintPair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.first_){uint64_t{0u}}
    , decltype(_impl_.second_){0u}
  };
}

ULongUintPair::~ULongUintPair() {
  // @@protoc_insertion_point(destructor:Common.Types.ULongUintPair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ULongUintPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ULongUintPair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ULongUintPair::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.ULongUintPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.first_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.second_) -
        reinterpret_cast<char*>(&_impl_.first_)) + sizeof(_impl_.second_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ULongUintPair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 first = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_first(&has_bits);
          _impl_.first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 second = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_second(&has_bits);
          _impl_.second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ULongUintPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.ULongUintPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 first = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_first(), target);
  }

  // required uint32 second = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_second(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.ULongUintPair)
  return target;
}

size_t ULongUintPair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Common.Types.ULongUintPair)
  size_t total_size = 0;

  if (_internal_has_first()) {
    // required uint64 first = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_first());
  }

  if (_internal_has_second()) {
    // required uint32 second = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_second());
  }

  return total_size;
}
size_t ULongUintPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.ULongUintPair)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 first = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_first());

    // required uint32 second = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_second());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ULongUintPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ULongUintPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ULongUintPair::GetClassData() const { return &_class_data_; }


void ULongUintPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ULongUintPair*>(&to_msg);
  auto& from = static_cast<const ULongUintPair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.ULongUintPair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.first_ = from._impl_.first_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.second_ = from._impl_.second_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ULongUintPair::CopyFrom(const ULongUintPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.ULongUintPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ULongUintPair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ULongUintPair::InternalSwap(ULongUintPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ULongUintPair, _impl_.second_)
      + sizeof(ULongUintPair::_impl_.second_)
      - PROTOBUF_FIELD_OFFSET(ULongUintPair, _impl_.first_)>(
          reinterpret_cast<char*>(&_impl_.first_),
          reinterpret_cast<char*>(&other->_impl_.first_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ULongUintPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[15]);
}

// ===================================================================

class ULongDoublePair::_Internal {
 public:
  using HasBits = decltype(std::declval<ULongDoublePair>()._impl_._has_bits_);
  static void set_has_first(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_second(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ULongDoublePair::ULongDoublePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.ULongDoublePair)
}
ULongDoublePair::ULongDoublePair(const ULongDoublePair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ULongDoublePair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.first_){}
    , decltype(_impl_.second_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.first_, &from._impl_.first_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.second_) -
    reinterpret_cast<char*>(&_impl_.first_)) + sizeof(_impl_.second_));
  // @@protoc_insertion_point(copy_constructor:Common.Types.ULongDoublePair)
}

inline void ULongDoublePair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.first_){uint64_t{0u}}
    , decltype(_impl_.second_){0}
  };
}

ULongDoublePair::~ULongDoublePair() {
  // @@protoc_insertion_point(destructor:Common.Types.ULongDoublePair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ULongDoublePair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ULongDoublePair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ULongDoublePair::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.ULongDoublePair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.first_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.second_) -
        reinterpret_cast<char*>(&_impl_.first_)) + sizeof(_impl_.second_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ULongDoublePair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 first = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_first(&has_bits);
          _impl_.first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double second = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_second(&has_bits);
          _impl_.second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ULongDoublePair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.ULongDoublePair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 first = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_first(), target);
  }

  // required double second = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_second(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.ULongDoublePair)
  return target;
}

size_t ULongDoublePair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Common.Types.ULongDoublePair)
  size_t total_size = 0;

  if (_internal_has_first()) {
    // required uint64 first = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_first());
  }

  if (_internal_has_second()) {
    // required double second = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t ULongDoublePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.ULongDoublePair)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 first = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_first());

    // required double second = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ULongDoublePair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ULongDoublePair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ULongDoublePair::GetClassData() const { return &_class_data_; }


void ULongDoublePair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ULongDoublePair*>(&to_msg);
  auto& from = static_cast<const ULongDoublePair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.ULongDoublePair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.first_ = from._impl_.first_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.second_ = from._impl_.second_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ULongDoublePair::CopyFrom(const ULongDoublePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.ULongDoublePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ULongDoublePair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ULongDoublePair::InternalSwap(ULongDoublePair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ULongDoublePair, _impl_.second_)
      + sizeof(ULongDoublePair::_impl_.second_)
      - PROTOBUF_FIELD_OFFSET(ULongDoublePair, _impl_.first_)>(
          reinterpret_cast<char*>(&_impl_.first_),
          reinterpret_cast<char*>(&other->_impl_.first_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ULongDoublePair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[16]);
}

// ===================================================================

class OptionalDouble::_Internal {
 public:
  using HasBits = decltype(std::declval<OptionalDouble>()._impl_._has_bits_);
  static void set_has_d(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OptionalDouble::OptionalDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.OptionalDouble)
}
OptionalDouble::OptionalDouble(const OptionalDouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OptionalDouble* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.d_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.d_ = from._impl_.d_;
  // @@protoc_insertion_point(copy_constructor:Common.Types.OptionalDouble)
}

inline void OptionalDouble::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.d_){0}
  };
}

OptionalDouble::~OptionalDouble() {
  // @@protoc_insertion_point(destructor:Common.Types.OptionalDouble)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OptionalDouble::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OptionalDouble::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OptionalDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.OptionalDouble)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.d_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionalDouble::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double d = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_d(&has_bits);
          _impl_.d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptionalDouble::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.OptionalDouble)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double d = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.OptionalDouble)
  return target;
}

size_t OptionalDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.OptionalDouble)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double d = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptionalDouble::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OptionalDouble::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptionalDouble::GetClassData() const { return &_class_data_; }


void OptionalDouble::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OptionalDouble*>(&to_msg);
  auto& from = static_cast<const OptionalDouble&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.OptionalDouble)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_d()) {
    _this->_internal_set_d(from._internal_d());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptionalDouble::CopyFrom(const OptionalDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.OptionalDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionalDouble::IsInitialized() const {
  return true;
}

void OptionalDouble::InternalSwap(OptionalDouble* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.d_, other->_impl_.d_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionalDouble::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[17]);
}

// ===================================================================

class StrIntPair::_Internal {
 public:
  using HasBits = decltype(std::declval<StrIntPair>()._impl_._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_i(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

StrIntPair::StrIntPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.StrIntPair)
}
StrIntPair::StrIntPair(const StrIntPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StrIntPair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){}
    , decltype(_impl_.i_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_s()) {
    _this->_impl_.s_.Set(from._internal_s(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.i_ = from._impl_.i_;
  // @@protoc_insertion_point(copy_constructor:Common.Types.StrIntPair)
}

inline void StrIntPair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){}
    , decltype(_impl_.i_){0}
  };
  _impl_.s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StrIntPair::~StrIntPair() {
  // @@protoc_insertion_point(destructor:Common.Types.StrIntPair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StrIntPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.s_.Destroy();
}

void StrIntPair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StrIntPair::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.StrIntPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.s_.ClearNonDefaultToEmpty();
  }
  _impl_.i_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrIntPair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Common.Types.StrIntPair.s");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 i = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_i(&has_bits);
          _impl_.i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StrIntPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.StrIntPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_s().data(), static_cast<int>(this->_internal_s().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Common.Types.StrIntPair.s");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s(), target);
  }

  // required int32 i = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_i(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.StrIntPair)
  return target;
}

size_t StrIntPair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Common.Types.StrIntPair)
  size_t total_size = 0;

  if (_internal_has_s()) {
    // required string s = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s());
  }

  if (_internal_has_i()) {
    // required int32 i = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_i());
  }

  return total_size;
}
size_t StrIntPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.StrIntPair)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string s = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s());

    // required int32 i = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_i());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StrIntPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StrIntPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StrIntPair::GetClassData() const { return &_class_data_; }


void StrIntPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StrIntPair*>(&to_msg);
  auto& from = static_cast<const StrIntPair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.StrIntPair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_s(from._internal_s());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.i_ = from._impl_.i_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StrIntPair::CopyFrom(const StrIntPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.StrIntPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrIntPair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void StrIntPair::InternalSwap(StrIntPair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.s_, lhs_arena,
      &other->_impl_.s_, rhs_arena
  );
  swap(_impl_.i_, other->_impl_.i_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StrIntPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[18]);
}

// ===================================================================

class DoubleOrStr::_Internal {
 public:
};

DoubleOrStr::DoubleOrStr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.DoubleOrStr)
}
DoubleOrStr::DoubleOrStr(const DoubleOrStr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DoubleOrStr* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sd_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_sd();
  switch (from.sd_case()) {
    case kD: {
      _this->_internal_set_d(from._internal_d());
      break;
    }
    case kS: {
      _this->_internal_set_s(from._internal_s());
      break;
    }
    case SD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Common.Types.DoubleOrStr)
}

inline void DoubleOrStr::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sd_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_sd();
}

DoubleOrStr::~DoubleOrStr() {
  // @@protoc_insertion_point(destructor:Common.Types.DoubleOrStr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DoubleOrStr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_sd()) {
    clear_sd();
  }
}

void DoubleOrStr::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DoubleOrStr::clear_sd() {
// @@protoc_insertion_point(one_of_clear_start:Common.Types.DoubleOrStr)
  switch (sd_case()) {
    case kD: {
      // No need to clear
      break;
    }
    case kS: {
      _impl_.sd_.s_.Destroy();
      break;
    }
    case SD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SD_NOT_SET;
}


void DoubleOrStr::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.DoubleOrStr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sd();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleOrStr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double d = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _internal_set_d(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Common.Types.DoubleOrStr.s");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DoubleOrStr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.DoubleOrStr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (sd_case()) {
    case kD: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_d(), target);
      break;
    }
    case kS: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_s().data(), static_cast<int>(this->_internal_s().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Common.Types.DoubleOrStr.s");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_s(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.DoubleOrStr)
  return target;
}

size_t DoubleOrStr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.DoubleOrStr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (sd_case()) {
    // double d = 1;
    case kD: {
      total_size += 1 + 8;
      break;
    }
    // string s = 2;
    case kS: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_s());
      break;
    }
    case SD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DoubleOrStr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DoubleOrStr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DoubleOrStr::GetClassData() const { return &_class_data_; }


void DoubleOrStr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DoubleOrStr*>(&to_msg);
  auto& from = static_cast<const DoubleOrStr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.DoubleOrStr)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.sd_case()) {
    case kD: {
      _this->_internal_set_d(from._internal_d());
      break;
    }
    case kS: {
      _this->_internal_set_s(from._internal_s());
      break;
    }
    case SD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DoubleOrStr::CopyFrom(const DoubleOrStr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.DoubleOrStr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleOrStr::IsInitialized() const {
  return true;
}

void DoubleOrStr::InternalSwap(DoubleOrStr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sd_, other->_impl_.sd_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleOrStr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[19]);
}

// ===================================================================

class StrStrIntSet::_Internal {
 public:
  using HasBits = decltype(std::declval<StrStrIntSet>()._impl_._has_bits_);
  static void set_has_s1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_s2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_i(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

StrStrIntSet::StrStrIntSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.StrStrIntSet)
}
StrStrIntSet::StrStrIntSet(const StrStrIntSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StrStrIntSet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s1_){}
    , decltype(_impl_.s2_){}
    , decltype(_impl_.i_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.s1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_s1()) {
    _this->_impl_.s1_.Set(from._internal_s1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.s2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_s2()) {
    _this->_impl_.s2_.Set(from._internal_s2(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.i_ = from._impl_.i_;
  // @@protoc_insertion_point(copy_constructor:Common.Types.StrStrIntSet)
}

inline void StrStrIntSet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s1_){}
    , decltype(_impl_.s2_){}
    , decltype(_impl_.i_){0}
  };
  _impl_.s1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.s2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StrStrIntSet::~StrStrIntSet() {
  // @@protoc_insertion_point(destructor:Common.Types.StrStrIntSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StrStrIntSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.s1_.Destroy();
  _impl_.s2_.Destroy();
}

void StrStrIntSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StrStrIntSet::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.StrStrIntSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.s1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.s2_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.i_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrStrIntSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string s1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Common.Types.StrStrIntSet.s1");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string s2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_s2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Common.Types.StrStrIntSet.s2");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 i = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_i(&has_bits);
          _impl_.i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StrStrIntSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.StrStrIntSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string s1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_s1().data(), static_cast<int>(this->_internal_s1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Common.Types.StrStrIntSet.s1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s1(), target);
  }

  // required string s2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_s2().data(), static_cast<int>(this->_internal_s2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Common.Types.StrStrIntSet.s2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_s2(), target);
  }

  // required int32 i = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_i(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.StrStrIntSet)
  return target;
}

size_t StrStrIntSet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Common.Types.StrStrIntSet)
  size_t total_size = 0;

  if (_internal_has_s1()) {
    // required string s1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s1());
  }

  if (_internal_has_s2()) {
    // required string s2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s2());
  }

  if (_internal_has_i()) {
    // required int32 i = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_i());
  }

  return total_size;
}
size_t StrStrIntSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.StrStrIntSet)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string s1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s1());

    // required string s2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s2());

    // required int32 i = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_i());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StrStrIntSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StrStrIntSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StrStrIntSet::GetClassData() const { return &_class_data_; }


void StrStrIntSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StrStrIntSet*>(&to_msg);
  auto& from = static_cast<const StrStrIntSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.StrStrIntSet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_s1(from._internal_s1());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_s2(from._internal_s2());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.i_ = from._impl_.i_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StrStrIntSet::CopyFrom(const StrStrIntSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.StrStrIntSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrStrIntSet::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void StrStrIntSet::InternalSwap(StrStrIntSet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.s1_, lhs_arena,
      &other->_impl_.s1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.s2_, lhs_arena,
      &other->_impl_.s2_, rhs_arena
  );
  swap(_impl_.i_, other->_impl_.i_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StrStrIntSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[20]);
}

// ===================================================================

class StrULongMap::_Internal {
 public:
  using HasBits = decltype(std::declval<StrULongMap>()._impl_._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ul(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

StrULongMap::StrULongMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.StrULongMap)
}
StrULongMap::StrULongMap(const StrULongMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StrULongMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){}
    , decltype(_impl_.ul_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_s()) {
    _this->_impl_.s_.Set(from._internal_s(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ul_ = from._impl_.ul_;
  // @@protoc_insertion_point(copy_constructor:Common.Types.StrULongMap)
}

inline void StrULongMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){}
    , decltype(_impl_.ul_){uint64_t{0u}}
  };
  _impl_.s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StrULongMap::~StrULongMap() {
  // @@protoc_insertion_point(destructor:Common.Types.StrULongMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StrULongMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.s_.Destroy();
}

void StrULongMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StrULongMap::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.StrULongMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.s_.ClearNonDefaultToEmpty();
  }
  _impl_.ul_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrULongMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Common.Types.StrULongMap.s");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint64 ul = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ul(&has_bits);
          _impl_.ul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StrULongMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.StrULongMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_s().data(), static_cast<int>(this->_internal_s().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Common.Types.StrULongMap.s");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s(), target);
  }

  // required uint64 ul = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_ul(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.StrULongMap)
  return target;
}

size_t StrULongMap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Common.Types.StrULongMap)
  size_t total_size = 0;

  if (_internal_has_s()) {
    // required string s = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s());
  }

  if (_internal_has_ul()) {
    // required uint64 ul = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ul());
  }

  return total_size;
}
size_t StrULongMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.StrULongMap)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string s = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s());

    // required uint64 ul = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ul());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StrULongMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StrULongMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StrULongMap::GetClassData() const { return &_class_data_; }


void StrULongMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StrULongMap*>(&to_msg);
  auto& from = static_cast<const StrULongMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.StrULongMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_s(from._internal_s());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ul_ = from._impl_.ul_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StrULongMap::CopyFrom(const StrULongMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.StrULongMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrULongMap::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void StrULongMap::InternalSwap(StrULongMap* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.s_, lhs_arena,
      &other->_impl_.s_, rhs_arena
  );
  swap(_impl_.ul_, other->_impl_.ul_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StrULongMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[21]);
}

// ===================================================================

class StringList::_Internal {
 public:
};

StringList::StringList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.StringList)
}
StringList::StringList(const StringList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sl_){from._impl_.sl_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Common.Types.StringList)
}

inline void StringList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sl_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StringList::~StringList() {
  // @@protoc_insertion_point(destructor:Common.Types.StringList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sl_.~RepeatedPtrField();
}

void StringList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringList::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.StringList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sl_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string sl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sl();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "Common.Types.StringList.sl");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.StringList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string sl = 1;
  for (int i = 0, n = this->_internal_sl_size(); i < n; i++) {
    const auto& s = this->_internal_sl(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Common.Types.StringList.sl");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.StringList)
  return target;
}

size_t StringList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.StringList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string sl = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.sl_.size());
  for (int i = 0, n = _impl_.sl_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.sl_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringList::GetClassData() const { return &_class_data_; }


void StringList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringList*>(&to_msg);
  auto& from = static_cast<const StringList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.StringList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sl_.MergeFrom(from._impl_.sl_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringList::CopyFrom(const StringList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.StringList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringList::IsInitialized() const {
  return true;
}

void StringList::InternalSwap(StringList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sl_.InternalSwap(&other->_impl_.sl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[22]);
}

// ===================================================================

class BytesList::_Internal {
 public:
};

BytesList::BytesList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.BytesList)
}
BytesList::BytesList(const BytesList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BytesList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bl_){from._impl_.bl_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Common.Types.BytesList)
}

inline void BytesList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bl_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BytesList::~BytesList() {
  // @@protoc_insertion_point(destructor:Common.Types.BytesList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BytesList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bl_.~RepeatedPtrField();
}

void BytesList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BytesList::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.BytesList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bl_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BytesList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes bl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bl();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BytesList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.BytesList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes bl = 1;
  for (int i = 0, n = this->_internal_bl_size(); i < n; i++) {
    const auto& s = this->_internal_bl(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.BytesList)
  return target;
}

size_t BytesList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.BytesList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes bl = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.bl_.size());
  for (int i = 0, n = _impl_.bl_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.bl_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BytesList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BytesList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BytesList::GetClassData() const { return &_class_data_; }


void BytesList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BytesList*>(&to_msg);
  auto& from = static_cast<const BytesList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.BytesList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bl_.MergeFrom(from._impl_.bl_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BytesList::CopyFrom(const BytesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.BytesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BytesList::IsInitialized() const {
  return true;
}

void BytesList::InternalSwap(BytesList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bl_.InternalSwap(&other->_impl_.bl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BytesList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[23]);
}

// ===================================================================

class BytesListWithStartEnd::_Internal {
 public:
  using HasBits = decltype(std::declval<BytesListWithStartEnd>()._impl_._has_bits_);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

BytesListWithStartEnd::BytesListWithStartEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.BytesListWithStartEnd)
}
BytesListWithStartEnd::BytesListWithStartEnd(const BytesListWithStartEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BytesListWithStartEnd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bl_){from._impl_.bl_}
    , decltype(_impl_.start_){}
    , decltype(_impl_.end_){}
    , decltype(_impl_.counter_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_, &from._impl_.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.counter_) -
    reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.counter_));
  // @@protoc_insertion_point(copy_constructor:Common.Types.BytesListWithStartEnd)
}

inline void BytesListWithStartEnd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bl_){arena}
    , decltype(_impl_.start_){uint64_t{0u}}
    , decltype(_impl_.end_){uint64_t{0u}}
    , decltype(_impl_.counter_){uint64_t{0u}}
  };
}

BytesListWithStartEnd::~BytesListWithStartEnd() {
  // @@protoc_insertion_point(destructor:Common.Types.BytesListWithStartEnd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BytesListWithStartEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bl_.~RepeatedPtrField();
}

void BytesListWithStartEnd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BytesListWithStartEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.BytesListWithStartEnd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bl_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.counter_) -
        reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.counter_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BytesListWithStartEnd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_start(&has_bits);
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_end(&has_bits);
          _impl_.end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 counter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_counter(&has_bits);
          _impl_.counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes bl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bl();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BytesListWithStartEnd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.BytesListWithStartEnd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_start(), target);
  }

  // required uint64 end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_end(), target);
  }

  // required uint64 counter = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_counter(), target);
  }

  // repeated bytes bl = 4;
  for (int i = 0, n = this->_internal_bl_size(); i < n; i++) {
    const auto& s = this->_internal_bl(i);
    target = stream->WriteBytes(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.BytesListWithStartEnd)
  return target;
}

size_t BytesListWithStartEnd::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Common.Types.BytesListWithStartEnd)
  size_t total_size = 0;

  if (_internal_has_start()) {
    // required uint64 start = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start());
  }

  if (_internal_has_end()) {
    // required uint64 end = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_end());
  }

  if (_internal_has_counter()) {
    // required uint64 counter = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_counter());
  }

  return total_size;
}
size_t BytesListWithStartEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.BytesListWithStartEnd)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 start = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start());

    // required uint64 end = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_end());

    // required uint64 counter = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_counter());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes bl = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.bl_.size());
  for (int i = 0, n = _impl_.bl_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.bl_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BytesListWithStartEnd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BytesListWithStartEnd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BytesListWithStartEnd::GetClassData() const { return &_class_data_; }


void BytesListWithStartEnd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BytesListWithStartEnd*>(&to_msg);
  auto& from = static_cast<const BytesListWithStartEnd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.BytesListWithStartEnd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bl_.MergeFrom(from._impl_.bl_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.start_ = from._impl_.start_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.end_ = from._impl_.end_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.counter_ = from._impl_.counter_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BytesListWithStartEnd::CopyFrom(const BytesListWithStartEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.BytesListWithStartEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BytesListWithStartEnd::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void BytesListWithStartEnd::InternalSwap(BytesListWithStartEnd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.bl_.InternalSwap(&other->_impl_.bl_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BytesListWithStartEnd, _impl_.counter_)
      + sizeof(BytesListWithStartEnd::_impl_.counter_)
      - PROTOBUF_FIELD_OFFSET(BytesListWithStartEnd, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BytesListWithStartEnd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[24]);
}

// ===================================================================

class AnalysisModeEnum::_Internal {
 public:
  using HasBits = decltype(std::declval<AnalysisModeEnum>()._impl_._has_bits_);
  static void set_has_am(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AnalysisModeEnum::AnalysisModeEnum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.AnalysisModeEnum)
}
AnalysisModeEnum::AnalysisModeEnum(const AnalysisModeEnum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnalysisModeEnum* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.am_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.am_ = from._impl_.am_;
  // @@protoc_insertion_point(copy_constructor:Common.Types.AnalysisModeEnum)
}

inline void AnalysisModeEnum::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.am_){1}
  };
}

AnalysisModeEnum::~AnalysisModeEnum() {
  // @@protoc_insertion_point(destructor:Common.Types.AnalysisModeEnum)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnalysisModeEnum::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AnalysisModeEnum::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnalysisModeEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.AnalysisModeEnum)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.am_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalysisModeEnum::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Common.Types.AnalysisModeEnum.AnalysisMode am = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Common::Types::AnalysisModeEnum_AnalysisMode_IsValid(val))) {
            _internal_set_am(static_cast<::Common::Types::AnalysisModeEnum_AnalysisMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnalysisModeEnum::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.AnalysisModeEnum)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Common.Types.AnalysisModeEnum.AnalysisMode am = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_am(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.AnalysisModeEnum)
  return target;
}

size_t AnalysisModeEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.AnalysisModeEnum)
  size_t total_size = 0;

  // required .Common.Types.AnalysisModeEnum.AnalysisMode am = 1;
  if (_internal_has_am()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_am());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnalysisModeEnum::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnalysisModeEnum::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnalysisModeEnum::GetClassData() const { return &_class_data_; }


void AnalysisModeEnum::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnalysisModeEnum*>(&to_msg);
  auto& from = static_cast<const AnalysisModeEnum&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.AnalysisModeEnum)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_am()) {
    _this->_internal_set_am(from._internal_am());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnalysisModeEnum::CopyFrom(const AnalysisModeEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.AnalysisModeEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalysisModeEnum::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AnalysisModeEnum::InternalSwap(AnalysisModeEnum* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.am_, other->_impl_.am_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalysisModeEnum::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[25]);
}

// ===================================================================

class TransTypeEnum::_Internal {
 public:
  using HasBits = decltype(std::declval<TransTypeEnum>()._impl_._has_bits_);
  static void set_has_tt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TransTypeEnum::TransTypeEnum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.TransTypeEnum)
}
TransTypeEnum::TransTypeEnum(const TransTypeEnum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransTypeEnum* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tt_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.tt_ = from._impl_.tt_;
  // @@protoc_insertion_point(copy_constructor:Common.Types.TransTypeEnum)
}

inline void TransTypeEnum::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tt_){1}
  };
}

TransTypeEnum::~TransTypeEnum() {
  // @@protoc_insertion_point(destructor:Common.Types.TransTypeEnum)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransTypeEnum::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransTypeEnum::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransTypeEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.TransTypeEnum)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tt_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransTypeEnum::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Common.Types.TransTypeEnum.TransType tt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Common::Types::TransTypeEnum_TransType_IsValid(val))) {
            _internal_set_tt(static_cast<::Common::Types::TransTypeEnum_TransType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransTypeEnum::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.TransTypeEnum)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Common.Types.TransTypeEnum.TransType tt = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_tt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.TransTypeEnum)
  return target;
}

size_t TransTypeEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.TransTypeEnum)
  size_t total_size = 0;

  // required .Common.Types.TransTypeEnum.TransType tt = 1;
  if (_internal_has_tt()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tt());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransTypeEnum::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransTypeEnum::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransTypeEnum::GetClassData() const { return &_class_data_; }


void TransTypeEnum::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransTypeEnum*>(&to_msg);
  auto& from = static_cast<const TransTypeEnum&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.TransTypeEnum)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tt()) {
    _this->_internal_set_tt(from._internal_tt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransTypeEnum::CopyFrom(const TransTypeEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.TransTypeEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransTypeEnum::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void TransTypeEnum::InternalSwap(TransTypeEnum* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.tt_, other->_impl_.tt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransTypeEnum::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[26]);
}

// ===================================================================

class ModeTransPairClass::_Internal {
 public:
  using HasBits = decltype(std::declval<ModeTransPairClass>()._impl_._has_bits_);
  static const ::Common::Types::AnalysisModeEnum& ame(const ModeTransPairClass* msg);
  static void set_has_ame(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Common::Types::TransTypeEnum& tte(const ModeTransPairClass* msg);
  static void set_has_tte(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::Common::Types::AnalysisModeEnum&
ModeTransPairClass::_Internal::ame(const ModeTransPairClass* msg) {
  return *msg->_impl_.ame_;
}
const ::Common::Types::TransTypeEnum&
ModeTransPairClass::_Internal::tte(const ModeTransPairClass* msg) {
  return *msg->_impl_.tte_;
}
ModeTransPairClass::ModeTransPairClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.ModeTransPairClass)
}
ModeTransPairClass::ModeTransPairClass(const ModeTransPairClass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModeTransPairClass* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ame_){nullptr}
    , decltype(_impl_.tte_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ame()) {
    _this->_impl_.ame_ = new ::Common::Types::AnalysisModeEnum(*from._impl_.ame_);
  }
  if (from._internal_has_tte()) {
    _this->_impl_.tte_ = new ::Common::Types::TransTypeEnum(*from._impl_.tte_);
  }
  // @@protoc_insertion_point(copy_constructor:Common.Types.ModeTransPairClass)
}

inline void ModeTransPairClass::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ame_){nullptr}
    , decltype(_impl_.tte_){nullptr}
  };
}

ModeTransPairClass::~ModeTransPairClass() {
  // @@protoc_insertion_point(destructor:Common.Types.ModeTransPairClass)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModeTransPairClass::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ame_;
  if (this != internal_default_instance()) delete _impl_.tte_;
}

void ModeTransPairClass::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModeTransPairClass::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.ModeTransPairClass)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.ame_ != nullptr);
      _impl_.ame_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tte_ != nullptr);
      _impl_.tte_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModeTransPairClass::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Common.Types.AnalysisModeEnum ame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Common.Types.TransTypeEnum tte = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tte(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModeTransPairClass::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.ModeTransPairClass)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Common.Types.AnalysisModeEnum ame = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ame(this),
        _Internal::ame(this).GetCachedSize(), target, stream);
  }

  // required .Common.Types.TransTypeEnum tte = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tte(this),
        _Internal::tte(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.ModeTransPairClass)
  return target;
}

size_t ModeTransPairClass::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Common.Types.ModeTransPairClass)
  size_t total_size = 0;

  if (_internal_has_ame()) {
    // required .Common.Types.AnalysisModeEnum ame = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ame_);
  }

  if (_internal_has_tte()) {
    // required .Common.Types.TransTypeEnum tte = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tte_);
  }

  return total_size;
}
size_t ModeTransPairClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.ModeTransPairClass)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Common.Types.AnalysisModeEnum ame = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ame_);

    // required .Common.Types.TransTypeEnum tte = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tte_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModeTransPairClass::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModeTransPairClass::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModeTransPairClass::GetClassData() const { return &_class_data_; }


void ModeTransPairClass::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModeTransPairClass*>(&to_msg);
  auto& from = static_cast<const ModeTransPairClass&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.ModeTransPairClass)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ame()->::Common::Types::AnalysisModeEnum::MergeFrom(
          from._internal_ame());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tte()->::Common::Types::TransTypeEnum::MergeFrom(
          from._internal_tte());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModeTransPairClass::CopyFrom(const ModeTransPairClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.ModeTransPairClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModeTransPairClass::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_ame()) {
    if (!_impl_.ame_->IsInitialized()) return false;
  }
  if (_internal_has_tte()) {
    if (!_impl_.tte_->IsInitialized()) return false;
  }
  return true;
}

void ModeTransPairClass::InternalSwap(ModeTransPairClass* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModeTransPairClass, _impl_.tte_)
      + sizeof(ModeTransPairClass::_impl_.tte_)
      - PROTOBUF_FIELD_OFFSET(ModeTransPairClass, _impl_.ame_)>(
          reinterpret_cast<char*>(&_impl_.ame_),
          reinterpret_cast<char*>(&other->_impl_.ame_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModeTransPairClass::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[27]);
}

// ===================================================================

class ModeTransPairMapDouble::_Internal {
 public:
  using HasBits = decltype(std::declval<ModeTransPairMapDouble>()._impl_._has_bits_);
  static const ::Common::Types::ModeTransPairClass& first(const ModeTransPairMapDouble* msg);
  static void set_has_first(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_second(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::Common::Types::ModeTransPairClass&
ModeTransPairMapDouble::_Internal::first(const ModeTransPairMapDouble* msg) {
  return *msg->_impl_.first_;
}
ModeTransPairMapDouble::ModeTransPairMapDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.ModeTransPairMapDouble)
}
ModeTransPairMapDouble::ModeTransPairMapDouble(const ModeTransPairMapDouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModeTransPairMapDouble* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.first_){nullptr}
    , decltype(_impl_.second_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_first()) {
    _this->_impl_.first_ = new ::Common::Types::ModeTransPairClass(*from._impl_.first_);
  }
  _this->_impl_.second_ = from._impl_.second_;
  // @@protoc_insertion_point(copy_constructor:Common.Types.ModeTransPairMapDouble)
}

inline void ModeTransPairMapDouble::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.first_){nullptr}
    , decltype(_impl_.second_){0}
  };
}

ModeTransPairMapDouble::~ModeTransPairMapDouble() {
  // @@protoc_insertion_point(destructor:Common.Types.ModeTransPairMapDouble)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModeTransPairMapDouble::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.first_;
}

void ModeTransPairMapDouble::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModeTransPairMapDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.ModeTransPairMapDouble)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.first_ != nullptr);
    _impl_.first_->Clear();
  }
  _impl_.second_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModeTransPairMapDouble::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Common.Types.ModeTransPairClass first = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_first(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double second = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_second(&has_bits);
          _impl_.second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModeTransPairMapDouble::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.ModeTransPairMapDouble)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Common.Types.ModeTransPairClass first = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::first(this),
        _Internal::first(this).GetCachedSize(), target, stream);
  }

  // required double second = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_second(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.ModeTransPairMapDouble)
  return target;
}

size_t ModeTransPairMapDouble::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Common.Types.ModeTransPairMapDouble)
  size_t total_size = 0;

  if (_internal_has_first()) {
    // required .Common.Types.ModeTransPairClass first = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_);
  }

  if (_internal_has_second()) {
    // required double second = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t ModeTransPairMapDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.ModeTransPairMapDouble)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Common.Types.ModeTransPairClass first = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_);

    // required double second = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModeTransPairMapDouble::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModeTransPairMapDouble::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModeTransPairMapDouble::GetClassData() const { return &_class_data_; }


void ModeTransPairMapDouble::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModeTransPairMapDouble*>(&to_msg);
  auto& from = static_cast<const ModeTransPairMapDouble&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.ModeTransPairMapDouble)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_first()->::Common::Types::ModeTransPairClass::MergeFrom(
          from._internal_first());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.second_ = from._impl_.second_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModeTransPairMapDouble::CopyFrom(const ModeTransPairMapDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.ModeTransPairMapDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModeTransPairMapDouble::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_first()) {
    if (!_impl_.first_->IsInitialized()) return false;
  }
  return true;
}

void ModeTransPairMapDouble::InternalSwap(ModeTransPairMapDouble* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModeTransPairMapDouble, _impl_.second_)
      + sizeof(ModeTransPairMapDouble::_impl_.second_)
      - PROTOBUF_FIELD_OFFSET(ModeTransPairMapDouble, _impl_.first_)>(
          reinterpret_cast<char*>(&_impl_.first_),
          reinterpret_cast<char*>(&other->_impl_.first_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModeTransPairMapDouble::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[28]);
}

// ===================================================================

class CapacitiveUnitEnum::_Internal {
 public:
  using HasBits = decltype(std::declval<CapacitiveUnitEnum>()._impl_._has_bits_);
  static void set_has_cu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CapacitiveUnitEnum::CapacitiveUnitEnum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.CapacitiveUnitEnum)
}
CapacitiveUnitEnum::CapacitiveUnitEnum(const CapacitiveUnitEnum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CapacitiveUnitEnum* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cu_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.cu_ = from._impl_.cu_;
  // @@protoc_insertion_point(copy_constructor:Common.Types.CapacitiveUnitEnum)
}

inline void CapacitiveUnitEnum::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cu_){0}
  };
}

CapacitiveUnitEnum::~CapacitiveUnitEnum() {
  // @@protoc_insertion_point(destructor:Common.Types.CapacitiveUnitEnum)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CapacitiveUnitEnum::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CapacitiveUnitEnum::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CapacitiveUnitEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.CapacitiveUnitEnum)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cu_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CapacitiveUnitEnum::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Common.Types.CapacitiveUnitEnum.CapacitiveUnit cu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Common::Types::CapacitiveUnitEnum_CapacitiveUnit_IsValid(val))) {
            _internal_set_cu(static_cast<::Common::Types::CapacitiveUnitEnum_CapacitiveUnit>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CapacitiveUnitEnum::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.CapacitiveUnitEnum)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Common.Types.CapacitiveUnitEnum.CapacitiveUnit cu = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.CapacitiveUnitEnum)
  return target;
}

size_t CapacitiveUnitEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.CapacitiveUnitEnum)
  size_t total_size = 0;

  // required .Common.Types.CapacitiveUnitEnum.CapacitiveUnit cu = 1;
  if (_internal_has_cu()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cu());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CapacitiveUnitEnum::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CapacitiveUnitEnum::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CapacitiveUnitEnum::GetClassData() const { return &_class_data_; }


void CapacitiveUnitEnum::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CapacitiveUnitEnum*>(&to_msg);
  auto& from = static_cast<const CapacitiveUnitEnum&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.CapacitiveUnitEnum)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cu()) {
    _this->_internal_set_cu(from._internal_cu());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CapacitiveUnitEnum::CopyFrom(const CapacitiveUnitEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.CapacitiveUnitEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapacitiveUnitEnum::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CapacitiveUnitEnum::InternalSwap(CapacitiveUnitEnum* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.cu_, other->_impl_.cu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CapacitiveUnitEnum::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[29]);
}

// ===================================================================

class ResistanceUnitEnum::_Internal {
 public:
  using HasBits = decltype(std::declval<ResistanceUnitEnum>()._impl_._has_bits_);
  static void set_has_ru(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ResistanceUnitEnum::ResistanceUnitEnum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Types.ResistanceUnitEnum)
}
ResistanceUnitEnum::ResistanceUnitEnum(const ResistanceUnitEnum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResistanceUnitEnum* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ru_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ru_ = from._impl_.ru_;
  // @@protoc_insertion_point(copy_constructor:Common.Types.ResistanceUnitEnum)
}

inline void ResistanceUnitEnum::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ru_){0}
  };
}

ResistanceUnitEnum::~ResistanceUnitEnum() {
  // @@protoc_insertion_point(destructor:Common.Types.ResistanceUnitEnum)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResistanceUnitEnum::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResistanceUnitEnum::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResistanceUnitEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Types.ResistanceUnitEnum)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ru_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResistanceUnitEnum::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Common.Types.ResistanceUnitEnum.ResistanceUnit ru = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Common::Types::ResistanceUnitEnum_ResistanceUnit_IsValid(val))) {
            _internal_set_ru(static_cast<::Common::Types::ResistanceUnitEnum_ResistanceUnit>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResistanceUnitEnum::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Types.ResistanceUnitEnum)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Common.Types.ResistanceUnitEnum.ResistanceUnit ru = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ru(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Types.ResistanceUnitEnum)
  return target;
}

size_t ResistanceUnitEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Types.ResistanceUnitEnum)
  size_t total_size = 0;

  // required .Common.Types.ResistanceUnitEnum.ResistanceUnit ru = 1;
  if (_internal_has_ru()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ru());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResistanceUnitEnum::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResistanceUnitEnum::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResistanceUnitEnum::GetClassData() const { return &_class_data_; }


void ResistanceUnitEnum::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResistanceUnitEnum*>(&to_msg);
  auto& from = static_cast<const ResistanceUnitEnum&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Types.ResistanceUnitEnum)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ru()) {
    _this->_internal_set_ru(from._internal_ru());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResistanceUnitEnum::CopyFrom(const ResistanceUnitEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Types.ResistanceUnitEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResistanceUnitEnum::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ResistanceUnitEnum::InternalSwap(ResistanceUnitEnum* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.ru_, other->_impl_.ru_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResistanceUnitEnum::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonTypes_2eproto_getter, &descriptor_table_CommonTypes_2eproto_once,
      file_level_metadata_CommonTypes_2eproto[30]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Types
}  // namespace Common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Common::Types::EmptyMsg*
Arena::CreateMaybeMessage< ::Common::Types::EmptyMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::EmptyMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::IntMsg*
Arena::CreateMaybeMessage< ::Common::Types::IntMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::IntMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::LongMsg*
Arena::CreateMaybeMessage< ::Common::Types::LongMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::LongMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::UIntMsg*
Arena::CreateMaybeMessage< ::Common::Types::UIntMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::UIntMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::ULongMsg*
Arena::CreateMaybeMessage< ::Common::Types::ULongMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::ULongMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::FloatMsg*
Arena::CreateMaybeMessage< ::Common::Types::FloatMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::FloatMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::DoubleMsg*
Arena::CreateMaybeMessage< ::Common::Types::DoubleMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::DoubleMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::BoolMsg*
Arena::CreateMaybeMessage< ::Common::Types::BoolMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::BoolMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::StringMsg*
Arena::CreateMaybeMessage< ::Common::Types::StringMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::StringMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::IntPair*
Arena::CreateMaybeMessage< ::Common::Types::IntPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::IntPair >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::DoubleList*
Arena::CreateMaybeMessage< ::Common::Types::DoubleList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::DoubleList >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::DoubleMatrix*
Arena::CreateMaybeMessage< ::Common::Types::DoubleMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::DoubleMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::DoubleMatrixTuple*
Arena::CreateMaybeMessage< ::Common::Types::DoubleMatrixTuple >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::DoubleMatrixTuple >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::ULongPair*
Arena::CreateMaybeMessage< ::Common::Types::ULongPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::ULongPair >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::ULongList*
Arena::CreateMaybeMessage< ::Common::Types::ULongList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::ULongList >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::ULongUintPair*
Arena::CreateMaybeMessage< ::Common::Types::ULongUintPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::ULongUintPair >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::ULongDoublePair*
Arena::CreateMaybeMessage< ::Common::Types::ULongDoublePair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::ULongDoublePair >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::OptionalDouble*
Arena::CreateMaybeMessage< ::Common::Types::OptionalDouble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::OptionalDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::StrIntPair*
Arena::CreateMaybeMessage< ::Common::Types::StrIntPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::StrIntPair >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::DoubleOrStr*
Arena::CreateMaybeMessage< ::Common::Types::DoubleOrStr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::DoubleOrStr >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::StrStrIntSet*
Arena::CreateMaybeMessage< ::Common::Types::StrStrIntSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::StrStrIntSet >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::StrULongMap*
Arena::CreateMaybeMessage< ::Common::Types::StrULongMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::StrULongMap >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::StringList*
Arena::CreateMaybeMessage< ::Common::Types::StringList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::StringList >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::BytesList*
Arena::CreateMaybeMessage< ::Common::Types::BytesList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::BytesList >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::BytesListWithStartEnd*
Arena::CreateMaybeMessage< ::Common::Types::BytesListWithStartEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::BytesListWithStartEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::AnalysisModeEnum*
Arena::CreateMaybeMessage< ::Common::Types::AnalysisModeEnum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::AnalysisModeEnum >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::TransTypeEnum*
Arena::CreateMaybeMessage< ::Common::Types::TransTypeEnum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::TransTypeEnum >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::ModeTransPairClass*
Arena::CreateMaybeMessage< ::Common::Types::ModeTransPairClass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::ModeTransPairClass >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::ModeTransPairMapDouble*
Arena::CreateMaybeMessage< ::Common::Types::ModeTransPairMapDouble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::ModeTransPairMapDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::CapacitiveUnitEnum*
Arena::CreateMaybeMessage< ::Common::Types::CapacitiveUnitEnum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::CapacitiveUnitEnum >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Types::ResistanceUnitEnum*
Arena::CreateMaybeMessage< ::Common::Types::ResistanceUnitEnum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Types::ResistanceUnitEnum >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
