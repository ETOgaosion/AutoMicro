// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RcNet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RcNet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RcNet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "CommonTypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RcNet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RcNet_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RcNet_2eproto;
namespace Rc {
class ArnoldiNetClass;
struct ArnoldiNetClassDefaultTypeInternal;
extern ArnoldiNetClassDefaultTypeInternal _ArnoldiNetClass_default_instance_;
class EmptyRctClass;
struct EmptyRctClassDefaultTypeInternal;
extern EmptyRctClassDefaultTypeInternal _EmptyRctClass_default_instance_;
class LaplaceMomentsStruct;
struct LaplaceMomentsStructDefaultTypeInternal;
extern LaplaceMomentsStructDefaultTypeInternal _LaplaceMomentsStruct_default_instance_;
class ModeTransPairMapDoubleMatrix;
struct ModeTransPairMapDoubleMatrixDefaultTypeInternal;
extern ModeTransPairMapDoubleMatrixDefaultTypeInternal _ModeTransPairMapDoubleMatrix_default_instance_;
class RcNetClass;
struct RcNetClassDefaultTypeInternal;
extern RcNetClassDefaultTypeInternal _RcNetClass_default_instance_;
class RcNetCommonInfoClass;
struct RcNetCommonInfoClassDefaultTypeInternal;
extern RcNetCommonInfoClassDefaultTypeInternal _RcNetCommonInfoClass_default_instance_;
class RcNetSyn;
struct RcNetSynDefaultTypeInternal;
extern RcNetSynDefaultTypeInternal _RcNetSyn_default_instance_;
class RcTreeClass;
struct RcTreeClassDefaultTypeInternal;
extern RcTreeClassDefaultTypeInternal _RcTreeClass_default_instance_;
class RctEdgeClass;
struct RctEdgeClassDefaultTypeInternal;
extern RctEdgeClassDefaultTypeInternal _RctEdgeClass_default_instance_;
class RctNodeClass;
struct RctNodeClassDefaultTypeInternal;
extern RctNodeClassDefaultTypeInternal _RctNodeClass_default_instance_;
}  // namespace Rc
PROTOBUF_NAMESPACE_OPEN
template<> ::Rc::ArnoldiNetClass* Arena::CreateMaybeMessage<::Rc::ArnoldiNetClass>(Arena*);
template<> ::Rc::EmptyRctClass* Arena::CreateMaybeMessage<::Rc::EmptyRctClass>(Arena*);
template<> ::Rc::LaplaceMomentsStruct* Arena::CreateMaybeMessage<::Rc::LaplaceMomentsStruct>(Arena*);
template<> ::Rc::ModeTransPairMapDoubleMatrix* Arena::CreateMaybeMessage<::Rc::ModeTransPairMapDoubleMatrix>(Arena*);
template<> ::Rc::RcNetClass* Arena::CreateMaybeMessage<::Rc::RcNetClass>(Arena*);
template<> ::Rc::RcNetCommonInfoClass* Arena::CreateMaybeMessage<::Rc::RcNetCommonInfoClass>(Arena*);
template<> ::Rc::RcNetSyn* Arena::CreateMaybeMessage<::Rc::RcNetSyn>(Arena*);
template<> ::Rc::RcTreeClass* Arena::CreateMaybeMessage<::Rc::RcTreeClass>(Arena*);
template<> ::Rc::RctEdgeClass* Arena::CreateMaybeMessage<::Rc::RctEdgeClass>(Arena*);
template<> ::Rc::RctNodeClass* Arena::CreateMaybeMessage<::Rc::RctNodeClass>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Rc {

// ===================================================================

class LaplaceMomentsStruct final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Rc.LaplaceMomentsStruct) */ {
 public:
  inline LaplaceMomentsStruct() : LaplaceMomentsStruct(nullptr) {}
  ~LaplaceMomentsStruct() override;
  explicit PROTOBUF_CONSTEXPR LaplaceMomentsStruct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaplaceMomentsStruct(const LaplaceMomentsStruct& from);
  LaplaceMomentsStruct(LaplaceMomentsStruct&& from) noexcept
    : LaplaceMomentsStruct() {
    *this = ::std::move(from);
  }

  inline LaplaceMomentsStruct& operator=(const LaplaceMomentsStruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaplaceMomentsStruct& operator=(LaplaceMomentsStruct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaplaceMomentsStruct& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaplaceMomentsStruct* internal_default_instance() {
    return reinterpret_cast<const LaplaceMomentsStruct*>(
               &_LaplaceMomentsStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LaplaceMomentsStruct& a, LaplaceMomentsStruct& b) {
    a.Swap(&b);
  }
  inline void Swap(LaplaceMomentsStruct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaplaceMomentsStruct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaplaceMomentsStruct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaplaceMomentsStruct>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LaplaceMomentsStruct& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LaplaceMomentsStruct& from) {
    LaplaceMomentsStruct::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaplaceMomentsStruct* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Rc.LaplaceMomentsStruct";
  }
  protected:
  explicit LaplaceMomentsStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kY1FieldNumber = 1,
    kY2FieldNumber = 2,
    kY3FieldNumber = 3,
  };
  // required double y1 = 1;
  bool has_y1() const;
  private:
  bool _internal_has_y1() const;
  public:
  void clear_y1();
  double y1() const;
  void set_y1(double value);
  private:
  double _internal_y1() const;
  void _internal_set_y1(double value);
  public:

  // required double y2 = 2;
  bool has_y2() const;
  private:
  bool _internal_has_y2() const;
  public:
  void clear_y2();
  double y2() const;
  void set_y2(double value);
  private:
  double _internal_y2() const;
  void _internal_set_y2(double value);
  public:

  // required double y3 = 3;
  bool has_y3() const;
  private:
  bool _internal_has_y3() const;
  public:
  void clear_y3();
  double y3() const;
  void set_y3(double value);
  private:
  double _internal_y3() const;
  void _internal_set_y3(double value);
  public:

  // @@protoc_insertion_point(class_scope:Rc.LaplaceMomentsStruct)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double y1_;
    double y2_;
    double y3_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RcNet_2eproto;
};
// -------------------------------------------------------------------

class ModeTransPairMapDoubleMatrix final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Rc.ModeTransPairMapDoubleMatrix) */ {
 public:
  inline ModeTransPairMapDoubleMatrix() : ModeTransPairMapDoubleMatrix(nullptr) {}
  ~ModeTransPairMapDoubleMatrix() override;
  explicit PROTOBUF_CONSTEXPR ModeTransPairMapDoubleMatrix(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModeTransPairMapDoubleMatrix(const ModeTransPairMapDoubleMatrix& from);
  ModeTransPairMapDoubleMatrix(ModeTransPairMapDoubleMatrix&& from) noexcept
    : ModeTransPairMapDoubleMatrix() {
    *this = ::std::move(from);
  }

  inline ModeTransPairMapDoubleMatrix& operator=(const ModeTransPairMapDoubleMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModeTransPairMapDoubleMatrix& operator=(ModeTransPairMapDoubleMatrix&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModeTransPairMapDoubleMatrix& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModeTransPairMapDoubleMatrix* internal_default_instance() {
    return reinterpret_cast<const ModeTransPairMapDoubleMatrix*>(
               &_ModeTransPairMapDoubleMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModeTransPairMapDoubleMatrix& a, ModeTransPairMapDoubleMatrix& b) {
    a.Swap(&b);
  }
  inline void Swap(ModeTransPairMapDoubleMatrix* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModeTransPairMapDoubleMatrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModeTransPairMapDoubleMatrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModeTransPairMapDoubleMatrix>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModeTransPairMapDoubleMatrix& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModeTransPairMapDoubleMatrix& from) {
    ModeTransPairMapDoubleMatrix::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModeTransPairMapDoubleMatrix* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Rc.ModeTransPairMapDoubleMatrix";
  }
  protected:
  explicit ModeTransPairMapDoubleMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 7,
  };
  // repeated .Common.Types.ModeTransPairMapDouble map = 7;
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  ::Common::Types::ModeTransPairMapDouble* mutable_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Types::ModeTransPairMapDouble >*
      mutable_map();
  private:
  const ::Common::Types::ModeTransPairMapDouble& _internal_map(int index) const;
  ::Common::Types::ModeTransPairMapDouble* _internal_add_map();
  public:
  const ::Common::Types::ModeTransPairMapDouble& map(int index) const;
  ::Common::Types::ModeTransPairMapDouble* add_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Types::ModeTransPairMapDouble >&
      map() const;

  // @@protoc_insertion_point(class_scope:Rc.ModeTransPairMapDoubleMatrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Types::ModeTransPairMapDouble > map_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RcNet_2eproto;
};
// -------------------------------------------------------------------

class RctNodeClass final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Rc.RctNodeClass) */ {
 public:
  inline RctNodeClass() : RctNodeClass(nullptr) {}
  ~RctNodeClass() override;
  explicit PROTOBUF_CONSTEXPR RctNodeClass(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RctNodeClass(const RctNodeClass& from);
  RctNodeClass(RctNodeClass&& from) noexcept
    : RctNodeClass() {
    *this = ::std::move(from);
  }

  inline RctNodeClass& operator=(const RctNodeClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline RctNodeClass& operator=(RctNodeClass&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RctNodeClass& default_instance() {
    return *internal_default_instance();
  }
  static inline const RctNodeClass* internal_default_instance() {
    return reinterpret_cast<const RctNodeClass*>(
               &_RctNodeClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RctNodeClass& a, RctNodeClass& b) {
    a.Swap(&b);
  }
  inline void Swap(RctNodeClass* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RctNodeClass* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RctNodeClass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RctNodeClass>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RctNodeClass& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RctNodeClass& from) {
    RctNodeClass::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RctNodeClass* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Rc.RctNodeClass";
  }
  protected:
  explicit RctNodeClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapsFieldNumber = 7,
    kFaninFieldNumber = 14,
    kFanoutFieldNumber = 15,
    kNameFieldNumber = 2,
    kMomentsFieldNumber = 17,
    kIdFieldNumber = 1,
    kCapFieldNumber = 3,
    kLoadFieldNumber = 4,
    kDelayFieldNumber = 5,
    kObjFieldNumber = 16,
    kPropertyFieldNumber = 6,
  };
  // repeated .Rc.ModeTransPairMapDoubleMatrix maps = 7;
  int maps_size() const;
  private:
  int _internal_maps_size() const;
  public:
  void clear_maps();
  ::Rc::ModeTransPairMapDoubleMatrix* mutable_maps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rc::ModeTransPairMapDoubleMatrix >*
      mutable_maps();
  private:
  const ::Rc::ModeTransPairMapDoubleMatrix& _internal_maps(int index) const;
  ::Rc::ModeTransPairMapDoubleMatrix* _internal_add_maps();
  public:
  const ::Rc::ModeTransPairMapDoubleMatrix& maps(int index) const;
  ::Rc::ModeTransPairMapDoubleMatrix* add_maps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rc::ModeTransPairMapDoubleMatrix >&
      maps() const;

  // repeated uint64 _fanin = 14;
  int _fanin_size() const;
  private:
  int _internal__fanin_size() const;
  public:
  void clear__fanin();
  private:
  uint64_t _internal__fanin(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal__fanin() const;
  void _internal_add__fanin(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable__fanin();
  public:
  uint64_t _fanin(int index) const;
  void set__fanin(int index, uint64_t value);
  void add__fanin(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _fanin() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable__fanin();

  // repeated uint64 _fanout = 15;
  int _fanout_size() const;
  private:
  int _internal__fanout_size() const;
  public:
  void clear__fanout();
  private:
  uint64_t _internal__fanout(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal__fanout() const;
  void _internal_add__fanout(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable__fanout();
  public:
  uint64_t _fanout(int index) const;
  void set__fanout(int index, uint64_t value);
  void add__fanout(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _fanout() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable__fanout();

  // required string _name = 2;
  bool has__name() const;
  private:
  bool _internal_has__name() const;
  public:
  void clear__name();
  const std::string& _name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set__name(ArgT0&& arg0, ArgT... args);
  std::string* mutable__name();
  PROTOBUF_NODISCARD std::string* release__name();
  void set_allocated__name(std::string* _name);
  private:
  const std::string& _internal__name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set__name(const std::string& value);
  std::string* _internal_mutable__name();
  public:

  // required .Rc.LaplaceMomentsStruct _moments = 17;
  bool has__moments() const;
  private:
  bool _internal_has__moments() const;
  public:
  void clear__moments();
  const ::Rc::LaplaceMomentsStruct& _moments() const;
  PROTOBUF_NODISCARD ::Rc::LaplaceMomentsStruct* release__moments();
  ::Rc::LaplaceMomentsStruct* mutable__moments();
  void set_allocated__moments(::Rc::LaplaceMomentsStruct* _moments);
  private:
  const ::Rc::LaplaceMomentsStruct& _internal__moments() const;
  ::Rc::LaplaceMomentsStruct* _internal_mutable__moments();
  public:
  void unsafe_arena_set_allocated__moments(
      ::Rc::LaplaceMomentsStruct* _moments);
  ::Rc::LaplaceMomentsStruct* unsafe_arena_release__moments();

  // required uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // required double _cap = 3;
  bool has__cap() const;
  private:
  bool _internal_has__cap() const;
  public:
  void clear__cap();
  double _cap() const;
  void set__cap(double value);
  private:
  double _internal__cap() const;
  void _internal_set__cap(double value);
  public:

  // required double _load = 4;
  bool has__load() const;
  private:
  bool _internal_has__load() const;
  public:
  void clear__load();
  double _load() const;
  void set__load(double value);
  private:
  double _internal__load() const;
  void _internal_set__load(double value);
  public:

  // required double _delay = 5;
  bool has__delay() const;
  private:
  bool _internal_has__delay() const;
  public:
  void clear__delay();
  double _delay() const;
  void set__delay(double value);
  private:
  double _internal__delay() const;
  void _internal_set__delay(double value);
  public:

  // required uint64 _obj = 16;
  bool has__obj() const;
  private:
  bool _internal_has__obj() const;
  public:
  void clear__obj();
  uint64_t _obj() const;
  void set__obj(uint64_t value);
  private:
  uint64_t _internal__obj() const;
  void _internal_set__obj(uint64_t value);
  public:

  // required uint32 property = 6;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  uint32_t property() const;
  void set_property(uint32_t value);
  private:
  uint32_t _internal_property() const;
  void _internal_set_property(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Rc.RctNodeClass)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rc::ModeTransPairMapDoubleMatrix > maps_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > _fanin_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > _fanout_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr _name_;
    ::Rc::LaplaceMomentsStruct* _moments_;
    uint64_t id_;
    double _cap_;
    double _load_;
    double _delay_;
    uint64_t _obj_;
    uint32_t property_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RcNet_2eproto;
};
// -------------------------------------------------------------------

class RctEdgeClass final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Rc.RctEdgeClass) */ {
 public:
  inline RctEdgeClass() : RctEdgeClass(nullptr) {}
  ~RctEdgeClass() override;
  explicit PROTOBUF_CONSTEXPR RctEdgeClass(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RctEdgeClass(const RctEdgeClass& from);
  RctEdgeClass(RctEdgeClass&& from) noexcept
    : RctEdgeClass() {
    *this = ::std::move(from);
  }

  inline RctEdgeClass& operator=(const RctEdgeClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline RctEdgeClass& operator=(RctEdgeClass&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RctEdgeClass& default_instance() {
    return *internal_default_instance();
  }
  static inline const RctEdgeClass* internal_default_instance() {
    return reinterpret_cast<const RctEdgeClass*>(
               &_RctEdgeClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RctEdgeClass& a, RctEdgeClass& b) {
    a.Swap(&b);
  }
  inline void Swap(RctEdgeClass* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RctEdgeClass* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RctEdgeClass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RctEdgeClass>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RctEdgeClass& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RctEdgeClass& from) {
    RctEdgeClass::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RctEdgeClass* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Rc.RctEdgeClass";
  }
  protected:
  explicit RctEdgeClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
    kResFieldNumber = 5,
    kIsBreakFieldNumber = 4,
    kIsInOrderFieldNumber = 6,
  };
  // required uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // required uint64 _from = 2;
  bool has__from() const;
  private:
  bool _internal_has__from() const;
  public:
  void clear__from();
  uint64_t _from() const;
  void set__from(uint64_t value);
  private:
  uint64_t _internal__from() const;
  void _internal_set__from(uint64_t value);
  public:

  // required uint64 _to = 3;
  bool has__to() const;
  private:
  bool _internal_has__to() const;
  public:
  void clear__to();
  uint64_t _to() const;
  void set__to(uint64_t value);
  private:
  uint64_t _internal__to() const;
  void _internal_set__to(uint64_t value);
  public:

  // required double _res = 5;
  bool has__res() const;
  private:
  bool _internal_has__res() const;
  public:
  void clear__res();
  double _res() const;
  void set__res(double value);
  private:
  double _internal__res() const;
  void _internal_set__res(double value);
  public:

  // required bool _is_break = 4;
  bool has__is_break() const;
  private:
  bool _internal_has__is_break() const;
  public:
  void clear__is_break();
  bool _is_break() const;
  void set__is_break(bool value);
  private:
  bool _internal__is_break() const;
  void _internal_set__is_break(bool value);
  public:

  // required bool _is_in_order = 6;
  bool has__is_in_order() const;
  private:
  bool _internal_has__is_in_order() const;
  public:
  void clear__is_in_order();
  bool _is_in_order() const;
  void set__is_in_order(bool value);
  private:
  bool _internal__is_in_order() const;
  void _internal_set__is_in_order(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Rc.RctEdgeClass)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t id_;
    uint64_t _from_;
    uint64_t _to_;
    double _res_;
    bool _is_break_;
    bool _is_in_order_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RcNet_2eproto;
};
// -------------------------------------------------------------------

class RcTreeClass final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Rc.RcTreeClass) */ {
 public:
  inline RcTreeClass() : RcTreeClass(nullptr) {}
  ~RcTreeClass() override;
  explicit PROTOBUF_CONSTEXPR RcTreeClass(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RcTreeClass(const RcTreeClass& from);
  RcTreeClass(RcTreeClass&& from) noexcept
    : RcTreeClass() {
    *this = ::std::move(from);
  }

  inline RcTreeClass& operator=(const RcTreeClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline RcTreeClass& operator=(RcTreeClass&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RcTreeClass& default_instance() {
    return *internal_default_instance();
  }
  static inline const RcTreeClass* internal_default_instance() {
    return reinterpret_cast<const RcTreeClass*>(
               &_RcTreeClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RcTreeClass& a, RcTreeClass& b) {
    a.Swap(&b);
  }
  inline void Swap(RcTreeClass* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RcTreeClass* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RcTreeClass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RcTreeClass>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RcTreeClass& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RcTreeClass& from) {
    RcTreeClass::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RcTreeClass* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Rc.RcTreeClass";
  }
  protected:
  explicit RcTreeClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStr2NodesFieldNumber = 3,
    kEdgesFieldNumber = 4,
    kIdFieldNumber = 1,
    kRootFieldNumber = 2,
  };
  // repeated .Common.Types.StrULongMap _str2nodes = 3;
  int _str2nodes_size() const;
  private:
  int _internal__str2nodes_size() const;
  public:
  void clear__str2nodes();
  ::Common::Types::StrULongMap* mutable__str2nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Types::StrULongMap >*
      mutable__str2nodes();
  private:
  const ::Common::Types::StrULongMap& _internal__str2nodes(int index) const;
  ::Common::Types::StrULongMap* _internal_add__str2nodes();
  public:
  const ::Common::Types::StrULongMap& _str2nodes(int index) const;
  ::Common::Types::StrULongMap* add__str2nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Types::StrULongMap >&
      _str2nodes() const;

  // repeated uint64 _edges = 4;
  int _edges_size() const;
  private:
  int _internal__edges_size() const;
  public:
  void clear__edges();
  private:
  uint64_t _internal__edges(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal__edges() const;
  void _internal_add__edges(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable__edges();
  public:
  uint64_t _edges(int index) const;
  void set__edges(int index, uint64_t value);
  void add__edges(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _edges() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable__edges();

  // required uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // required uint64 _root = 2;
  bool has__root() const;
  private:
  bool _internal_has__root() const;
  public:
  void clear__root();
  uint64_t _root() const;
  void set__root(uint64_t value);
  private:
  uint64_t _internal__root() const;
  void _internal_set__root(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Rc.RcTreeClass)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Types::StrULongMap > _str2nodes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > _edges_;
    uint64_t id_;
    uint64_t _root_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RcNet_2eproto;
};
// -------------------------------------------------------------------

class RcNetCommonInfoClass final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Rc.RcNetCommonInfoClass) */ {
 public:
  inline RcNetCommonInfoClass() : RcNetCommonInfoClass(nullptr) {}
  ~RcNetCommonInfoClass() override;
  explicit PROTOBUF_CONSTEXPR RcNetCommonInfoClass(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RcNetCommonInfoClass(const RcNetCommonInfoClass& from);
  RcNetCommonInfoClass(RcNetCommonInfoClass&& from) noexcept
    : RcNetCommonInfoClass() {
    *this = ::std::move(from);
  }

  inline RcNetCommonInfoClass& operator=(const RcNetCommonInfoClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline RcNetCommonInfoClass& operator=(RcNetCommonInfoClass&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RcNetCommonInfoClass& default_instance() {
    return *internal_default_instance();
  }
  static inline const RcNetCommonInfoClass* internal_default_instance() {
    return reinterpret_cast<const RcNetCommonInfoClass*>(
               &_RcNetCommonInfoClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RcNetCommonInfoClass& a, RcNetCommonInfoClass& b) {
    a.Swap(&b);
  }
  inline void Swap(RcNetCommonInfoClass* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RcNetCommonInfoClass* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RcNetCommonInfoClass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RcNetCommonInfoClass>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RcNetCommonInfoClass& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RcNetCommonInfoClass& from) {
    RcNetCommonInfoClass::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RcNetCommonInfoClass* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Rc.RcNetCommonInfoClass";
  }
  protected:
  explicit RcNetCommonInfoClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpefCapUnitFieldNumber = 1,
    kSpefResistanceUnitFieldNumber = 2,
  };
  // required .Common.Types.CapacitiveUnitEnum _spef_cap_unit = 1;
  bool has__spef_cap_unit() const;
  private:
  bool _internal_has__spef_cap_unit() const;
  public:
  void clear__spef_cap_unit();
  const ::Common::Types::CapacitiveUnitEnum& _spef_cap_unit() const;
  PROTOBUF_NODISCARD ::Common::Types::CapacitiveUnitEnum* release__spef_cap_unit();
  ::Common::Types::CapacitiveUnitEnum* mutable__spef_cap_unit();
  void set_allocated__spef_cap_unit(::Common::Types::CapacitiveUnitEnum* _spef_cap_unit);
  private:
  const ::Common::Types::CapacitiveUnitEnum& _internal__spef_cap_unit() const;
  ::Common::Types::CapacitiveUnitEnum* _internal_mutable__spef_cap_unit();
  public:
  void unsafe_arena_set_allocated__spef_cap_unit(
      ::Common::Types::CapacitiveUnitEnum* _spef_cap_unit);
  ::Common::Types::CapacitiveUnitEnum* unsafe_arena_release__spef_cap_unit();

  // required .Common.Types.ResistanceUnitEnum _spef_resistance_unit = 2;
  bool has__spef_resistance_unit() const;
  private:
  bool _internal_has__spef_resistance_unit() const;
  public:
  void clear__spef_resistance_unit();
  const ::Common::Types::ResistanceUnitEnum& _spef_resistance_unit() const;
  PROTOBUF_NODISCARD ::Common::Types::ResistanceUnitEnum* release__spef_resistance_unit();
  ::Common::Types::ResistanceUnitEnum* mutable__spef_resistance_unit();
  void set_allocated__spef_resistance_unit(::Common::Types::ResistanceUnitEnum* _spef_resistance_unit);
  private:
  const ::Common::Types::ResistanceUnitEnum& _internal__spef_resistance_unit() const;
  ::Common::Types::ResistanceUnitEnum* _internal_mutable__spef_resistance_unit();
  public:
  void unsafe_arena_set_allocated__spef_resistance_unit(
      ::Common::Types::ResistanceUnitEnum* _spef_resistance_unit);
  ::Common::Types::ResistanceUnitEnum* unsafe_arena_release__spef_resistance_unit();

  // @@protoc_insertion_point(class_scope:Rc.RcNetCommonInfoClass)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Common::Types::CapacitiveUnitEnum* _spef_cap_unit_;
    ::Common::Types::ResistanceUnitEnum* _spef_resistance_unit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RcNet_2eproto;
};
// -------------------------------------------------------------------

class EmptyRctClass final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Rc.EmptyRctClass) */ {
 public:
  inline EmptyRctClass() : EmptyRctClass(nullptr) {}
  ~EmptyRctClass() override;
  explicit PROTOBUF_CONSTEXPR EmptyRctClass(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmptyRctClass(const EmptyRctClass& from);
  EmptyRctClass(EmptyRctClass&& from) noexcept
    : EmptyRctClass() {
    *this = ::std::move(from);
  }

  inline EmptyRctClass& operator=(const EmptyRctClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyRctClass& operator=(EmptyRctClass&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmptyRctClass& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmptyRctClass* internal_default_instance() {
    return reinterpret_cast<const EmptyRctClass*>(
               &_EmptyRctClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EmptyRctClass& a, EmptyRctClass& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyRctClass* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyRctClass* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmptyRctClass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmptyRctClass>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmptyRctClass& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmptyRctClass& from) {
    EmptyRctClass::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyRctClass* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Rc.EmptyRctClass";
  }
  protected:
  explicit EmptyRctClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadFieldNumber = 1,
  };
  // required double load = 1;
  bool has_load() const;
  private:
  bool _internal_has_load() const;
  public:
  void clear_load();
  double load() const;
  void set_load(double value);
  private:
  double _internal_load() const;
  void _internal_set_load(double value);
  public:

  // @@protoc_insertion_point(class_scope:Rc.EmptyRctClass)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double load_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RcNet_2eproto;
};
// -------------------------------------------------------------------

class RcNetClass final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Rc.RcNetClass) */ {
 public:
  inline RcNetClass() : RcNetClass(nullptr) {}
  ~RcNetClass() override;
  explicit PROTOBUF_CONSTEXPR RcNetClass(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RcNetClass(const RcNetClass& from);
  RcNetClass(RcNetClass&& from) noexcept
    : RcNetClass() {
    *this = ::std::move(from);
  }

  inline RcNetClass& operator=(const RcNetClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline RcNetClass& operator=(RcNetClass&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RcNetClass& default_instance() {
    return *internal_default_instance();
  }
  enum RctCase {
    kFirst = 2,
    kSecond = 3,
    _RCT_NOT_SET = 0,
  };

  static inline const RcNetClass* internal_default_instance() {
    return reinterpret_cast<const RcNetClass*>(
               &_RcNetClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RcNetClass& a, RcNetClass& b) {
    a.Swap(&b);
  }
  inline void Swap(RcNetClass* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RcNetClass* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RcNetClass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RcNetClass>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RcNetClass& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RcNetClass& from) {
    RcNetClass::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RcNetClass* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Rc.RcNetClass";
  }
  protected:
  explicit RcNetClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRcLoopFieldNumber = 4,
    kRcNetCommonInfoFieldNumber = 6,
    kNetFieldNumber = 1,
    kIsFoundLoopFieldNumber = 5,
    kFirstFieldNumber = 2,
    kSecondFieldNumber = 3,
  };
  // repeated uint64 _rc_loop = 4;
  int _rc_loop_size() const;
  private:
  int _internal__rc_loop_size() const;
  public:
  void clear__rc_loop();
  private:
  uint64_t _internal__rc_loop(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal__rc_loop() const;
  void _internal_add__rc_loop(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable__rc_loop();
  public:
  uint64_t _rc_loop(int index) const;
  void set__rc_loop(int index, uint64_t value);
  void add__rc_loop(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _rc_loop() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable__rc_loop();

  // required .Rc.RcNetCommonInfoClass _rc_net_common_info = 6;
  bool has__rc_net_common_info() const;
  private:
  bool _internal_has__rc_net_common_info() const;
  public:
  void clear__rc_net_common_info();
  const ::Rc::RcNetCommonInfoClass& _rc_net_common_info() const;
  PROTOBUF_NODISCARD ::Rc::RcNetCommonInfoClass* release__rc_net_common_info();
  ::Rc::RcNetCommonInfoClass* mutable__rc_net_common_info();
  void set_allocated__rc_net_common_info(::Rc::RcNetCommonInfoClass* _rc_net_common_info);
  private:
  const ::Rc::RcNetCommonInfoClass& _internal__rc_net_common_info() const;
  ::Rc::RcNetCommonInfoClass* _internal_mutable__rc_net_common_info();
  public:
  void unsafe_arena_set_allocated__rc_net_common_info(
      ::Rc::RcNetCommonInfoClass* _rc_net_common_info);
  ::Rc::RcNetCommonInfoClass* unsafe_arena_release__rc_net_common_info();

  // required uint64 _net = 1;
  bool has__net() const;
  private:
  bool _internal_has__net() const;
  public:
  void clear__net();
  uint64_t _net() const;
  void set__net(uint64_t value);
  private:
  uint64_t _internal__net() const;
  void _internal_set__net(uint64_t value);
  public:

  // required bool _is_found_loop = 5;
  bool has__is_found_loop() const;
  private:
  bool _internal_has__is_found_loop() const;
  public:
  void clear__is_found_loop();
  bool _is_found_loop() const;
  void set__is_found_loop(bool value);
  private:
  bool _internal__is_found_loop() const;
  void _internal_set__is_found_loop(bool value);
  public:

  // .Rc.EmptyRctClass first = 2;
  bool has_first() const;
  private:
  bool _internal_has_first() const;
  public:
  void clear_first();
  const ::Rc::EmptyRctClass& first() const;
  PROTOBUF_NODISCARD ::Rc::EmptyRctClass* release_first();
  ::Rc::EmptyRctClass* mutable_first();
  void set_allocated_first(::Rc::EmptyRctClass* first);
  private:
  const ::Rc::EmptyRctClass& _internal_first() const;
  ::Rc::EmptyRctClass* _internal_mutable_first();
  public:
  void unsafe_arena_set_allocated_first(
      ::Rc::EmptyRctClass* first);
  ::Rc::EmptyRctClass* unsafe_arena_release_first();

  // uint64 second = 3;
  bool has_second() const;
  private:
  bool _internal_has_second() const;
  public:
  void clear_second();
  uint64_t second() const;
  void set_second(uint64_t value);
  private:
  uint64_t _internal_second() const;
  void _internal_set_second(uint64_t value);
  public:

  void clear__rct();
  RctCase _rct_case() const;
  // @@protoc_insertion_point(class_scope:Rc.RcNetClass)
 private:
  class _Internal;
  void set_has_first();
  void set_has_second();

  inline bool has__rct() const;
  inline void clear_has__rct();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > _rc_loop_;
    ::Rc::RcNetCommonInfoClass* _rc_net_common_info_;
    uint64_t _net_;
    bool _is_found_loop_;
    union RctUnion {
      constexpr RctUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Rc::EmptyRctClass* first_;
      uint64_t second_;
    } _rct_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RcNet_2eproto;
};
// -------------------------------------------------------------------

class ArnoldiNetClass final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Rc.ArnoldiNetClass) */ {
 public:
  inline ArnoldiNetClass() : ArnoldiNetClass(nullptr) {}
  ~ArnoldiNetClass() override;
  explicit PROTOBUF_CONSTEXPR ArnoldiNetClass(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArnoldiNetClass(const ArnoldiNetClass& from);
  ArnoldiNetClass(ArnoldiNetClass&& from) noexcept
    : ArnoldiNetClass() {
    *this = ::std::move(from);
  }

  inline ArnoldiNetClass& operator=(const ArnoldiNetClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArnoldiNetClass& operator=(ArnoldiNetClass&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArnoldiNetClass& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArnoldiNetClass* internal_default_instance() {
    return reinterpret_cast<const ArnoldiNetClass*>(
               &_ArnoldiNetClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ArnoldiNetClass& a, ArnoldiNetClass& b) {
    a.Swap(&b);
  }
  inline void Swap(ArnoldiNetClass* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArnoldiNetClass* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArnoldiNetClass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArnoldiNetClass>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArnoldiNetClass& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArnoldiNetClass& from) {
    ArnoldiNetClass::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArnoldiNetClass* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Rc.ArnoldiNetClass";
  }
  protected:
  explicit ArnoldiNetClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdPairFieldNumber = 1,
    kNodalCapsFieldNumber = 4,
    kConductancesFieldNumber = 5,
    kDiagBWFieldNumber = 6,
    kInputSlewFieldNumber = 2,
    kLibArcFieldNumber = 3,
  };
  // repeated .Common.Types.ULongUintPair node_id_pair = 1;
  int node_id_pair_size() const;
  private:
  int _internal_node_id_pair_size() const;
  public:
  void clear_node_id_pair();
  ::Common::Types::ULongUintPair* mutable_node_id_pair(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Types::ULongUintPair >*
      mutable_node_id_pair();
  private:
  const ::Common::Types::ULongUintPair& _internal_node_id_pair(int index) const;
  ::Common::Types::ULongUintPair* _internal_add_node_id_pair();
  public:
  const ::Common::Types::ULongUintPair& node_id_pair(int index) const;
  ::Common::Types::ULongUintPair* add_node_id_pair();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Types::ULongUintPair >&
      node_id_pair() const;

  // repeated double _nodal_caps = 4;
  int _nodal_caps_size() const;
  private:
  int _internal__nodal_caps_size() const;
  public:
  void clear__nodal_caps();
  private:
  double _internal__nodal_caps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal__nodal_caps() const;
  void _internal_add__nodal_caps(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable__nodal_caps();
  public:
  double _nodal_caps(int index) const;
  void set__nodal_caps(int index, double value);
  void add__nodal_caps(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _nodal_caps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable__nodal_caps();

  // required .Common.Types.DoubleMatrix _conductances = 5;
  bool has__conductances() const;
  private:
  bool _internal_has__conductances() const;
  public:
  void clear__conductances();
  const ::Common::Types::DoubleMatrix& _conductances() const;
  PROTOBUF_NODISCARD ::Common::Types::DoubleMatrix* release__conductances();
  ::Common::Types::DoubleMatrix* mutable__conductances();
  void set_allocated__conductances(::Common::Types::DoubleMatrix* _conductances);
  private:
  const ::Common::Types::DoubleMatrix& _internal__conductances() const;
  ::Common::Types::DoubleMatrix* _internal_mutable__conductances();
  public:
  void unsafe_arena_set_allocated__conductances(
      ::Common::Types::DoubleMatrix* _conductances);
  ::Common::Types::DoubleMatrix* unsafe_arena_release__conductances();

  // optional .Common.Types.DoubleMatrixTuple _diag_B_W = 6;
  bool has__diag_b_w() const;
  private:
  bool _internal_has__diag_b_w() const;
  public:
  void clear__diag_b_w();
  const ::Common::Types::DoubleMatrixTuple& _diag_b_w() const;
  PROTOBUF_NODISCARD ::Common::Types::DoubleMatrixTuple* release__diag_b_w();
  ::Common::Types::DoubleMatrixTuple* mutable__diag_b_w();
  void set_allocated__diag_b_w(::Common::Types::DoubleMatrixTuple* _diag_b_w);
  private:
  const ::Common::Types::DoubleMatrixTuple& _internal__diag_b_w() const;
  ::Common::Types::DoubleMatrixTuple* _internal_mutable__diag_b_w();
  public:
  void unsafe_arena_set_allocated__diag_b_w(
      ::Common::Types::DoubleMatrixTuple* _diag_b_w);
  ::Common::Types::DoubleMatrixTuple* unsafe_arena_release__diag_b_w();

  // required double _input_slew = 2;
  bool has__input_slew() const;
  private:
  bool _internal_has__input_slew() const;
  public:
  void clear__input_slew();
  double _input_slew() const;
  void set__input_slew(double value);
  private:
  double _internal__input_slew() const;
  void _internal_set__input_slew(double value);
  public:

  // required uint64 _lib_arc = 3;
  bool has__lib_arc() const;
  private:
  bool _internal_has__lib_arc() const;
  public:
  void clear__lib_arc();
  uint64_t _lib_arc() const;
  void set__lib_arc(uint64_t value);
  private:
  uint64_t _internal__lib_arc() const;
  void _internal_set__lib_arc(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Rc.ArnoldiNetClass)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Types::ULongUintPair > node_id_pair_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > _nodal_caps_;
    ::Common::Types::DoubleMatrix* _conductances_;
    ::Common::Types::DoubleMatrixTuple* _diag_b_w_;
    double _input_slew_;
    uint64_t _lib_arc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RcNet_2eproto;
};
// -------------------------------------------------------------------

class RcNetSyn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Rc.RcNetSyn) */ {
 public:
  inline RcNetSyn() : RcNetSyn(nullptr) {}
  ~RcNetSyn() override;
  explicit PROTOBUF_CONSTEXPR RcNetSyn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RcNetSyn(const RcNetSyn& from);
  RcNetSyn(RcNetSyn&& from) noexcept
    : RcNetSyn() {
    *this = ::std::move(from);
  }

  inline RcNetSyn& operator=(const RcNetSyn& from) {
    CopyFrom(from);
    return *this;
  }
  inline RcNetSyn& operator=(RcNetSyn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RcNetSyn& default_instance() {
    return *internal_default_instance();
  }
  static inline const RcNetSyn* internal_default_instance() {
    return reinterpret_cast<const RcNetSyn*>(
               &_RcNetSyn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RcNetSyn& a, RcNetSyn& b) {
    a.Swap(&b);
  }
  inline void Swap(RcNetSyn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RcNetSyn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RcNetSyn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RcNetSyn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RcNetSyn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RcNetSyn& from) {
    RcNetSyn::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RcNetSyn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Rc.RcNetSyn";
  }
  protected:
  explicit RcNetSyn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 3,
    kChildFieldNumber = 4,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // required .Rc.RcNetClass parent = 3;
  bool has_parent() const;
  private:
  bool _internal_has_parent() const;
  public:
  void clear_parent();
  const ::Rc::RcNetClass& parent() const;
  PROTOBUF_NODISCARD ::Rc::RcNetClass* release_parent();
  ::Rc::RcNetClass* mutable_parent();
  void set_allocated_parent(::Rc::RcNetClass* parent);
  private:
  const ::Rc::RcNetClass& _internal_parent() const;
  ::Rc::RcNetClass* _internal_mutable_parent();
  public:
  void unsafe_arena_set_allocated_parent(
      ::Rc::RcNetClass* parent);
  ::Rc::RcNetClass* unsafe_arena_release_parent();

  // optional .Rc.ArnoldiNetClass child = 4;
  bool has_child() const;
  private:
  bool _internal_has_child() const;
  public:
  void clear_child();
  const ::Rc::ArnoldiNetClass& child() const;
  PROTOBUF_NODISCARD ::Rc::ArnoldiNetClass* release_child();
  ::Rc::ArnoldiNetClass* mutable_child();
  void set_allocated_child(::Rc::ArnoldiNetClass* child);
  private:
  const ::Rc::ArnoldiNetClass& _internal_child() const;
  ::Rc::ArnoldiNetClass* _internal_mutable_child();
  public:
  void unsafe_arena_set_allocated_child(
      ::Rc::ArnoldiNetClass* child);
  ::Rc::ArnoldiNetClass* unsafe_arena_release_child();

  // required uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // required uint32 type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Rc.RcNetSyn)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Rc::RcNetClass* parent_;
    ::Rc::ArnoldiNetClass* child_;
    uint64_t id_;
    uint32_t type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RcNet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaplaceMomentsStruct

// required double y1 = 1;
inline bool LaplaceMomentsStruct::_internal_has_y1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LaplaceMomentsStruct::has_y1() const {
  return _internal_has_y1();
}
inline void LaplaceMomentsStruct::clear_y1() {
  _impl_.y1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double LaplaceMomentsStruct::_internal_y1() const {
  return _impl_.y1_;
}
inline double LaplaceMomentsStruct::y1() const {
  // @@protoc_insertion_point(field_get:Rc.LaplaceMomentsStruct.y1)
  return _internal_y1();
}
inline void LaplaceMomentsStruct::_internal_set_y1(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.y1_ = value;
}
inline void LaplaceMomentsStruct::set_y1(double value) {
  _internal_set_y1(value);
  // @@protoc_insertion_point(field_set:Rc.LaplaceMomentsStruct.y1)
}

// required double y2 = 2;
inline bool LaplaceMomentsStruct::_internal_has_y2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LaplaceMomentsStruct::has_y2() const {
  return _internal_has_y2();
}
inline void LaplaceMomentsStruct::clear_y2() {
  _impl_.y2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double LaplaceMomentsStruct::_internal_y2() const {
  return _impl_.y2_;
}
inline double LaplaceMomentsStruct::y2() const {
  // @@protoc_insertion_point(field_get:Rc.LaplaceMomentsStruct.y2)
  return _internal_y2();
}
inline void LaplaceMomentsStruct::_internal_set_y2(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y2_ = value;
}
inline void LaplaceMomentsStruct::set_y2(double value) {
  _internal_set_y2(value);
  // @@protoc_insertion_point(field_set:Rc.LaplaceMomentsStruct.y2)
}

// required double y3 = 3;
inline bool LaplaceMomentsStruct::_internal_has_y3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LaplaceMomentsStruct::has_y3() const {
  return _internal_has_y3();
}
inline void LaplaceMomentsStruct::clear_y3() {
  _impl_.y3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double LaplaceMomentsStruct::_internal_y3() const {
  return _impl_.y3_;
}
inline double LaplaceMomentsStruct::y3() const {
  // @@protoc_insertion_point(field_get:Rc.LaplaceMomentsStruct.y3)
  return _internal_y3();
}
inline void LaplaceMomentsStruct::_internal_set_y3(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.y3_ = value;
}
inline void LaplaceMomentsStruct::set_y3(double value) {
  _internal_set_y3(value);
  // @@protoc_insertion_point(field_set:Rc.LaplaceMomentsStruct.y3)
}

// -------------------------------------------------------------------

// ModeTransPairMapDoubleMatrix

// repeated .Common.Types.ModeTransPairMapDouble map = 7;
inline int ModeTransPairMapDoubleMatrix::_internal_map_size() const {
  return _impl_.map_.size();
}
inline int ModeTransPairMapDoubleMatrix::map_size() const {
  return _internal_map_size();
}
inline ::Common::Types::ModeTransPairMapDouble* ModeTransPairMapDoubleMatrix::mutable_map(int index) {
  // @@protoc_insertion_point(field_mutable:Rc.ModeTransPairMapDoubleMatrix.map)
  return _impl_.map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Types::ModeTransPairMapDouble >*
ModeTransPairMapDoubleMatrix::mutable_map() {
  // @@protoc_insertion_point(field_mutable_list:Rc.ModeTransPairMapDoubleMatrix.map)
  return &_impl_.map_;
}
inline const ::Common::Types::ModeTransPairMapDouble& ModeTransPairMapDoubleMatrix::_internal_map(int index) const {
  return _impl_.map_.Get(index);
}
inline const ::Common::Types::ModeTransPairMapDouble& ModeTransPairMapDoubleMatrix::map(int index) const {
  // @@protoc_insertion_point(field_get:Rc.ModeTransPairMapDoubleMatrix.map)
  return _internal_map(index);
}
inline ::Common::Types::ModeTransPairMapDouble* ModeTransPairMapDoubleMatrix::_internal_add_map() {
  return _impl_.map_.Add();
}
inline ::Common::Types::ModeTransPairMapDouble* ModeTransPairMapDoubleMatrix::add_map() {
  ::Common::Types::ModeTransPairMapDouble* _add = _internal_add_map();
  // @@protoc_insertion_point(field_add:Rc.ModeTransPairMapDoubleMatrix.map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Types::ModeTransPairMapDouble >&
ModeTransPairMapDoubleMatrix::map() const {
  // @@protoc_insertion_point(field_list:Rc.ModeTransPairMapDoubleMatrix.map)
  return _impl_.map_;
}

// -------------------------------------------------------------------

// RctNodeClass

// required uint64 id = 1;
inline bool RctNodeClass::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RctNodeClass::has_id() const {
  return _internal_has_id();
}
inline void RctNodeClass::clear_id() {
  _impl_.id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t RctNodeClass::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t RctNodeClass::id() const {
  // @@protoc_insertion_point(field_get:Rc.RctNodeClass.id)
  return _internal_id();
}
inline void RctNodeClass::_internal_set_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void RctNodeClass::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Rc.RctNodeClass.id)
}

// required string _name = 2;
inline bool RctNodeClass::_internal_has__name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RctNodeClass::has__name() const {
  return _internal_has__name();
}
inline void RctNodeClass::clear__name() {
  _impl_._name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RctNodeClass::_name() const {
  // @@protoc_insertion_point(field_get:Rc.RctNodeClass._name)
  return _internal__name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RctNodeClass::set__name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_._name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Rc.RctNodeClass._name)
}
inline std::string* RctNodeClass::mutable__name() {
  std::string* _s = _internal_mutable__name();
  // @@protoc_insertion_point(field_mutable:Rc.RctNodeClass._name)
  return _s;
}
inline const std::string& RctNodeClass::_internal__name() const {
  return _impl_._name_.Get();
}
inline void RctNodeClass::_internal_set__name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_._name_.Set(value, GetArenaForAllocation());
}
inline std::string* RctNodeClass::_internal_mutable__name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_._name_.Mutable(GetArenaForAllocation());
}
inline std::string* RctNodeClass::release__name() {
  // @@protoc_insertion_point(field_release:Rc.RctNodeClass._name)
  if (!_internal_has__name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_._name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_._name_.IsDefault()) {
    _impl_._name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RctNodeClass::set_allocated__name(std::string* _name) {
  if (_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_._name_.SetAllocated(_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_._name_.IsDefault()) {
    _impl_._name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Rc.RctNodeClass._name)
}

// required double _cap = 3;
inline bool RctNodeClass::_internal_has__cap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RctNodeClass::has__cap() const {
  return _internal_has__cap();
}
inline void RctNodeClass::clear__cap() {
  _impl_._cap_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double RctNodeClass::_internal__cap() const {
  return _impl_._cap_;
}
inline double RctNodeClass::_cap() const {
  // @@protoc_insertion_point(field_get:Rc.RctNodeClass._cap)
  return _internal__cap();
}
inline void RctNodeClass::_internal_set__cap(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_._cap_ = value;
}
inline void RctNodeClass::set__cap(double value) {
  _internal_set__cap(value);
  // @@protoc_insertion_point(field_set:Rc.RctNodeClass._cap)
}

// required double _load = 4;
inline bool RctNodeClass::_internal_has__load() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RctNodeClass::has__load() const {
  return _internal_has__load();
}
inline void RctNodeClass::clear__load() {
  _impl_._load_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double RctNodeClass::_internal__load() const {
  return _impl_._load_;
}
inline double RctNodeClass::_load() const {
  // @@protoc_insertion_point(field_get:Rc.RctNodeClass._load)
  return _internal__load();
}
inline void RctNodeClass::_internal_set__load(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_._load_ = value;
}
inline void RctNodeClass::set__load(double value) {
  _internal_set__load(value);
  // @@protoc_insertion_point(field_set:Rc.RctNodeClass._load)
}

// required double _delay = 5;
inline bool RctNodeClass::_internal_has__delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RctNodeClass::has__delay() const {
  return _internal_has__delay();
}
inline void RctNodeClass::clear__delay() {
  _impl_._delay_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double RctNodeClass::_internal__delay() const {
  return _impl_._delay_;
}
inline double RctNodeClass::_delay() const {
  // @@protoc_insertion_point(field_get:Rc.RctNodeClass._delay)
  return _internal__delay();
}
inline void RctNodeClass::_internal_set__delay(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_._delay_ = value;
}
inline void RctNodeClass::set__delay(double value) {
  _internal_set__delay(value);
  // @@protoc_insertion_point(field_set:Rc.RctNodeClass._delay)
}

// required uint32 property = 6;
inline bool RctNodeClass::_internal_has_property() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RctNodeClass::has_property() const {
  return _internal_has_property();
}
inline void RctNodeClass::clear_property() {
  _impl_.property_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t RctNodeClass::_internal_property() const {
  return _impl_.property_;
}
inline uint32_t RctNodeClass::property() const {
  // @@protoc_insertion_point(field_get:Rc.RctNodeClass.property)
  return _internal_property();
}
inline void RctNodeClass::_internal_set_property(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.property_ = value;
}
inline void RctNodeClass::set_property(uint32_t value) {
  _internal_set_property(value);
  // @@protoc_insertion_point(field_set:Rc.RctNodeClass.property)
}

// repeated .Rc.ModeTransPairMapDoubleMatrix maps = 7;
inline int RctNodeClass::_internal_maps_size() const {
  return _impl_.maps_.size();
}
inline int RctNodeClass::maps_size() const {
  return _internal_maps_size();
}
inline void RctNodeClass::clear_maps() {
  _impl_.maps_.Clear();
}
inline ::Rc::ModeTransPairMapDoubleMatrix* RctNodeClass::mutable_maps(int index) {
  // @@protoc_insertion_point(field_mutable:Rc.RctNodeClass.maps)
  return _impl_.maps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rc::ModeTransPairMapDoubleMatrix >*
RctNodeClass::mutable_maps() {
  // @@protoc_insertion_point(field_mutable_list:Rc.RctNodeClass.maps)
  return &_impl_.maps_;
}
inline const ::Rc::ModeTransPairMapDoubleMatrix& RctNodeClass::_internal_maps(int index) const {
  return _impl_.maps_.Get(index);
}
inline const ::Rc::ModeTransPairMapDoubleMatrix& RctNodeClass::maps(int index) const {
  // @@protoc_insertion_point(field_get:Rc.RctNodeClass.maps)
  return _internal_maps(index);
}
inline ::Rc::ModeTransPairMapDoubleMatrix* RctNodeClass::_internal_add_maps() {
  return _impl_.maps_.Add();
}
inline ::Rc::ModeTransPairMapDoubleMatrix* RctNodeClass::add_maps() {
  ::Rc::ModeTransPairMapDoubleMatrix* _add = _internal_add_maps();
  // @@protoc_insertion_point(field_add:Rc.RctNodeClass.maps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rc::ModeTransPairMapDoubleMatrix >&
RctNodeClass::maps() const {
  // @@protoc_insertion_point(field_list:Rc.RctNodeClass.maps)
  return _impl_.maps_;
}

// repeated uint64 _fanin = 14;
inline int RctNodeClass::_internal__fanin_size() const {
  return _impl_._fanin_.size();
}
inline int RctNodeClass::_fanin_size() const {
  return _internal__fanin_size();
}
inline void RctNodeClass::clear__fanin() {
  _impl_._fanin_.Clear();
}
inline uint64_t RctNodeClass::_internal__fanin(int index) const {
  return _impl_._fanin_.Get(index);
}
inline uint64_t RctNodeClass::_fanin(int index) const {
  // @@protoc_insertion_point(field_get:Rc.RctNodeClass._fanin)
  return _internal__fanin(index);
}
inline void RctNodeClass::set__fanin(int index, uint64_t value) {
  _impl_._fanin_.Set(index, value);
  // @@protoc_insertion_point(field_set:Rc.RctNodeClass._fanin)
}
inline void RctNodeClass::_internal_add__fanin(uint64_t value) {
  _impl_._fanin_.Add(value);
}
inline void RctNodeClass::add__fanin(uint64_t value) {
  _internal_add__fanin(value);
  // @@protoc_insertion_point(field_add:Rc.RctNodeClass._fanin)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
RctNodeClass::_internal__fanin() const {
  return _impl_._fanin_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
RctNodeClass::_fanin() const {
  // @@protoc_insertion_point(field_list:Rc.RctNodeClass._fanin)
  return _internal__fanin();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
RctNodeClass::_internal_mutable__fanin() {
  return &_impl_._fanin_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
RctNodeClass::mutable__fanin() {
  // @@protoc_insertion_point(field_mutable_list:Rc.RctNodeClass._fanin)
  return _internal_mutable__fanin();
}

// repeated uint64 _fanout = 15;
inline int RctNodeClass::_internal__fanout_size() const {
  return _impl_._fanout_.size();
}
inline int RctNodeClass::_fanout_size() const {
  return _internal__fanout_size();
}
inline void RctNodeClass::clear__fanout() {
  _impl_._fanout_.Clear();
}
inline uint64_t RctNodeClass::_internal__fanout(int index) const {
  return _impl_._fanout_.Get(index);
}
inline uint64_t RctNodeClass::_fanout(int index) const {
  // @@protoc_insertion_point(field_get:Rc.RctNodeClass._fanout)
  return _internal__fanout(index);
}
inline void RctNodeClass::set__fanout(int index, uint64_t value) {
  _impl_._fanout_.Set(index, value);
  // @@protoc_insertion_point(field_set:Rc.RctNodeClass._fanout)
}
inline void RctNodeClass::_internal_add__fanout(uint64_t value) {
  _impl_._fanout_.Add(value);
}
inline void RctNodeClass::add__fanout(uint64_t value) {
  _internal_add__fanout(value);
  // @@protoc_insertion_point(field_add:Rc.RctNodeClass._fanout)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
RctNodeClass::_internal__fanout() const {
  return _impl_._fanout_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
RctNodeClass::_fanout() const {
  // @@protoc_insertion_point(field_list:Rc.RctNodeClass._fanout)
  return _internal__fanout();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
RctNodeClass::_internal_mutable__fanout() {
  return &_impl_._fanout_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
RctNodeClass::mutable__fanout() {
  // @@protoc_insertion_point(field_mutable_list:Rc.RctNodeClass._fanout)
  return _internal_mutable__fanout();
}

// required uint64 _obj = 16;
inline bool RctNodeClass::_internal_has__obj() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RctNodeClass::has__obj() const {
  return _internal_has__obj();
}
inline void RctNodeClass::clear__obj() {
  _impl_._obj_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t RctNodeClass::_internal__obj() const {
  return _impl_._obj_;
}
inline uint64_t RctNodeClass::_obj() const {
  // @@protoc_insertion_point(field_get:Rc.RctNodeClass._obj)
  return _internal__obj();
}
inline void RctNodeClass::_internal_set__obj(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_._obj_ = value;
}
inline void RctNodeClass::set__obj(uint64_t value) {
  _internal_set__obj(value);
  // @@protoc_insertion_point(field_set:Rc.RctNodeClass._obj)
}

// required .Rc.LaplaceMomentsStruct _moments = 17;
inline bool RctNodeClass::_internal_has__moments() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_._moments_ != nullptr);
  return value;
}
inline bool RctNodeClass::has__moments() const {
  return _internal_has__moments();
}
inline void RctNodeClass::clear__moments() {
  if (_impl_._moments_ != nullptr) _impl_._moments_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Rc::LaplaceMomentsStruct& RctNodeClass::_internal__moments() const {
  const ::Rc::LaplaceMomentsStruct* p = _impl_._moments_;
  return p != nullptr ? *p : reinterpret_cast<const ::Rc::LaplaceMomentsStruct&>(
      ::Rc::_LaplaceMomentsStruct_default_instance_);
}
inline const ::Rc::LaplaceMomentsStruct& RctNodeClass::_moments() const {
  // @@protoc_insertion_point(field_get:Rc.RctNodeClass._moments)
  return _internal__moments();
}
inline void RctNodeClass::unsafe_arena_set_allocated__moments(
    ::Rc::LaplaceMomentsStruct* _moments) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_._moments_);
  }
  _impl_._moments_ = _moments;
  if (_moments) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Rc.RctNodeClass._moments)
}
inline ::Rc::LaplaceMomentsStruct* RctNodeClass::release__moments() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Rc::LaplaceMomentsStruct* temp = _impl_._moments_;
  _impl_._moments_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Rc::LaplaceMomentsStruct* RctNodeClass::unsafe_arena_release__moments() {
  // @@protoc_insertion_point(field_release:Rc.RctNodeClass._moments)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Rc::LaplaceMomentsStruct* temp = _impl_._moments_;
  _impl_._moments_ = nullptr;
  return temp;
}
inline ::Rc::LaplaceMomentsStruct* RctNodeClass::_internal_mutable__moments() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_._moments_ == nullptr) {
    auto* p = CreateMaybeMessage<::Rc::LaplaceMomentsStruct>(GetArenaForAllocation());
    _impl_._moments_ = p;
  }
  return _impl_._moments_;
}
inline ::Rc::LaplaceMomentsStruct* RctNodeClass::mutable__moments() {
  ::Rc::LaplaceMomentsStruct* _msg = _internal_mutable__moments();
  // @@protoc_insertion_point(field_mutable:Rc.RctNodeClass._moments)
  return _msg;
}
inline void RctNodeClass::set_allocated__moments(::Rc::LaplaceMomentsStruct* _moments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_._moments_;
  }
  if (_moments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(_moments);
    if (message_arena != submessage_arena) {
      _moments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, _moments, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_._moments_ = _moments;
  // @@protoc_insertion_point(field_set_allocated:Rc.RctNodeClass._moments)
}

// -------------------------------------------------------------------

// RctEdgeClass

// required uint64 id = 1;
inline bool RctEdgeClass::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RctEdgeClass::has_id() const {
  return _internal_has_id();
}
inline void RctEdgeClass::clear_id() {
  _impl_.id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t RctEdgeClass::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t RctEdgeClass::id() const {
  // @@protoc_insertion_point(field_get:Rc.RctEdgeClass.id)
  return _internal_id();
}
inline void RctEdgeClass::_internal_set_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void RctEdgeClass::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Rc.RctEdgeClass.id)
}

// required uint64 _from = 2;
inline bool RctEdgeClass::_internal_has__from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RctEdgeClass::has__from() const {
  return _internal_has__from();
}
inline void RctEdgeClass::clear__from() {
  _impl_._from_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t RctEdgeClass::_internal__from() const {
  return _impl_._from_;
}
inline uint64_t RctEdgeClass::_from() const {
  // @@protoc_insertion_point(field_get:Rc.RctEdgeClass._from)
  return _internal__from();
}
inline void RctEdgeClass::_internal_set__from(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_._from_ = value;
}
inline void RctEdgeClass::set__from(uint64_t value) {
  _internal_set__from(value);
  // @@protoc_insertion_point(field_set:Rc.RctEdgeClass._from)
}

// required uint64 _to = 3;
inline bool RctEdgeClass::_internal_has__to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RctEdgeClass::has__to() const {
  return _internal_has__to();
}
inline void RctEdgeClass::clear__to() {
  _impl_._to_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t RctEdgeClass::_internal__to() const {
  return _impl_._to_;
}
inline uint64_t RctEdgeClass::_to() const {
  // @@protoc_insertion_point(field_get:Rc.RctEdgeClass._to)
  return _internal__to();
}
inline void RctEdgeClass::_internal_set__to(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_._to_ = value;
}
inline void RctEdgeClass::set__to(uint64_t value) {
  _internal_set__to(value);
  // @@protoc_insertion_point(field_set:Rc.RctEdgeClass._to)
}

// required bool _is_break = 4;
inline bool RctEdgeClass::_internal_has__is_break() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RctEdgeClass::has__is_break() const {
  return _internal_has__is_break();
}
inline void RctEdgeClass::clear__is_break() {
  _impl_._is_break_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool RctEdgeClass::_internal__is_break() const {
  return _impl_._is_break_;
}
inline bool RctEdgeClass::_is_break() const {
  // @@protoc_insertion_point(field_get:Rc.RctEdgeClass._is_break)
  return _internal__is_break();
}
inline void RctEdgeClass::_internal_set__is_break(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_._is_break_ = value;
}
inline void RctEdgeClass::set__is_break(bool value) {
  _internal_set__is_break(value);
  // @@protoc_insertion_point(field_set:Rc.RctEdgeClass._is_break)
}

// required double _res = 5;
inline bool RctEdgeClass::_internal_has__res() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RctEdgeClass::has__res() const {
  return _internal_has__res();
}
inline void RctEdgeClass::clear__res() {
  _impl_._res_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double RctEdgeClass::_internal__res() const {
  return _impl_._res_;
}
inline double RctEdgeClass::_res() const {
  // @@protoc_insertion_point(field_get:Rc.RctEdgeClass._res)
  return _internal__res();
}
inline void RctEdgeClass::_internal_set__res(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_._res_ = value;
}
inline void RctEdgeClass::set__res(double value) {
  _internal_set__res(value);
  // @@protoc_insertion_point(field_set:Rc.RctEdgeClass._res)
}

// required bool _is_in_order = 6;
inline bool RctEdgeClass::_internal_has__is_in_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RctEdgeClass::has__is_in_order() const {
  return _internal_has__is_in_order();
}
inline void RctEdgeClass::clear__is_in_order() {
  _impl_._is_in_order_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool RctEdgeClass::_internal__is_in_order() const {
  return _impl_._is_in_order_;
}
inline bool RctEdgeClass::_is_in_order() const {
  // @@protoc_insertion_point(field_get:Rc.RctEdgeClass._is_in_order)
  return _internal__is_in_order();
}
inline void RctEdgeClass::_internal_set__is_in_order(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_._is_in_order_ = value;
}
inline void RctEdgeClass::set__is_in_order(bool value) {
  _internal_set__is_in_order(value);
  // @@protoc_insertion_point(field_set:Rc.RctEdgeClass._is_in_order)
}

// -------------------------------------------------------------------

// RcTreeClass

// required uint64 id = 1;
inline bool RcTreeClass::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RcTreeClass::has_id() const {
  return _internal_has_id();
}
inline void RcTreeClass::clear_id() {
  _impl_.id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t RcTreeClass::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t RcTreeClass::id() const {
  // @@protoc_insertion_point(field_get:Rc.RcTreeClass.id)
  return _internal_id();
}
inline void RcTreeClass::_internal_set_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void RcTreeClass::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Rc.RcTreeClass.id)
}

// required uint64 _root = 2;
inline bool RcTreeClass::_internal_has__root() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RcTreeClass::has__root() const {
  return _internal_has__root();
}
inline void RcTreeClass::clear__root() {
  _impl_._root_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t RcTreeClass::_internal__root() const {
  return _impl_._root_;
}
inline uint64_t RcTreeClass::_root() const {
  // @@protoc_insertion_point(field_get:Rc.RcTreeClass._root)
  return _internal__root();
}
inline void RcTreeClass::_internal_set__root(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_._root_ = value;
}
inline void RcTreeClass::set__root(uint64_t value) {
  _internal_set__root(value);
  // @@protoc_insertion_point(field_set:Rc.RcTreeClass._root)
}

// repeated .Common.Types.StrULongMap _str2nodes = 3;
inline int RcTreeClass::_internal__str2nodes_size() const {
  return _impl_._str2nodes_.size();
}
inline int RcTreeClass::_str2nodes_size() const {
  return _internal__str2nodes_size();
}
inline ::Common::Types::StrULongMap* RcTreeClass::mutable__str2nodes(int index) {
  // @@protoc_insertion_point(field_mutable:Rc.RcTreeClass._str2nodes)
  return _impl_._str2nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Types::StrULongMap >*
RcTreeClass::mutable__str2nodes() {
  // @@protoc_insertion_point(field_mutable_list:Rc.RcTreeClass._str2nodes)
  return &_impl_._str2nodes_;
}
inline const ::Common::Types::StrULongMap& RcTreeClass::_internal__str2nodes(int index) const {
  return _impl_._str2nodes_.Get(index);
}
inline const ::Common::Types::StrULongMap& RcTreeClass::_str2nodes(int index) const {
  // @@protoc_insertion_point(field_get:Rc.RcTreeClass._str2nodes)
  return _internal__str2nodes(index);
}
inline ::Common::Types::StrULongMap* RcTreeClass::_internal_add__str2nodes() {
  return _impl_._str2nodes_.Add();
}
inline ::Common::Types::StrULongMap* RcTreeClass::add__str2nodes() {
  ::Common::Types::StrULongMap* _add = _internal_add__str2nodes();
  // @@protoc_insertion_point(field_add:Rc.RcTreeClass._str2nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Types::StrULongMap >&
RcTreeClass::_str2nodes() const {
  // @@protoc_insertion_point(field_list:Rc.RcTreeClass._str2nodes)
  return _impl_._str2nodes_;
}

// repeated uint64 _edges = 4;
inline int RcTreeClass::_internal__edges_size() const {
  return _impl_._edges_.size();
}
inline int RcTreeClass::_edges_size() const {
  return _internal__edges_size();
}
inline void RcTreeClass::clear__edges() {
  _impl_._edges_.Clear();
}
inline uint64_t RcTreeClass::_internal__edges(int index) const {
  return _impl_._edges_.Get(index);
}
inline uint64_t RcTreeClass::_edges(int index) const {
  // @@protoc_insertion_point(field_get:Rc.RcTreeClass._edges)
  return _internal__edges(index);
}
inline void RcTreeClass::set__edges(int index, uint64_t value) {
  _impl_._edges_.Set(index, value);
  // @@protoc_insertion_point(field_set:Rc.RcTreeClass._edges)
}
inline void RcTreeClass::_internal_add__edges(uint64_t value) {
  _impl_._edges_.Add(value);
}
inline void RcTreeClass::add__edges(uint64_t value) {
  _internal_add__edges(value);
  // @@protoc_insertion_point(field_add:Rc.RcTreeClass._edges)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
RcTreeClass::_internal__edges() const {
  return _impl_._edges_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
RcTreeClass::_edges() const {
  // @@protoc_insertion_point(field_list:Rc.RcTreeClass._edges)
  return _internal__edges();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
RcTreeClass::_internal_mutable__edges() {
  return &_impl_._edges_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
RcTreeClass::mutable__edges() {
  // @@protoc_insertion_point(field_mutable_list:Rc.RcTreeClass._edges)
  return _internal_mutable__edges();
}

// -------------------------------------------------------------------

// RcNetCommonInfoClass

// required .Common.Types.CapacitiveUnitEnum _spef_cap_unit = 1;
inline bool RcNetCommonInfoClass::_internal_has__spef_cap_unit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_._spef_cap_unit_ != nullptr);
  return value;
}
inline bool RcNetCommonInfoClass::has__spef_cap_unit() const {
  return _internal_has__spef_cap_unit();
}
inline const ::Common::Types::CapacitiveUnitEnum& RcNetCommonInfoClass::_internal__spef_cap_unit() const {
  const ::Common::Types::CapacitiveUnitEnum* p = _impl_._spef_cap_unit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Types::CapacitiveUnitEnum&>(
      ::Common::Types::_CapacitiveUnitEnum_default_instance_);
}
inline const ::Common::Types::CapacitiveUnitEnum& RcNetCommonInfoClass::_spef_cap_unit() const {
  // @@protoc_insertion_point(field_get:Rc.RcNetCommonInfoClass._spef_cap_unit)
  return _internal__spef_cap_unit();
}
inline void RcNetCommonInfoClass::unsafe_arena_set_allocated__spef_cap_unit(
    ::Common::Types::CapacitiveUnitEnum* _spef_cap_unit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_._spef_cap_unit_);
  }
  _impl_._spef_cap_unit_ = _spef_cap_unit;
  if (_spef_cap_unit) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Rc.RcNetCommonInfoClass._spef_cap_unit)
}
inline ::Common::Types::CapacitiveUnitEnum* RcNetCommonInfoClass::release__spef_cap_unit() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Common::Types::CapacitiveUnitEnum* temp = _impl_._spef_cap_unit_;
  _impl_._spef_cap_unit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Common::Types::CapacitiveUnitEnum* RcNetCommonInfoClass::unsafe_arena_release__spef_cap_unit() {
  // @@protoc_insertion_point(field_release:Rc.RcNetCommonInfoClass._spef_cap_unit)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Common::Types::CapacitiveUnitEnum* temp = _impl_._spef_cap_unit_;
  _impl_._spef_cap_unit_ = nullptr;
  return temp;
}
inline ::Common::Types::CapacitiveUnitEnum* RcNetCommonInfoClass::_internal_mutable__spef_cap_unit() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_._spef_cap_unit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Types::CapacitiveUnitEnum>(GetArenaForAllocation());
    _impl_._spef_cap_unit_ = p;
  }
  return _impl_._spef_cap_unit_;
}
inline ::Common::Types::CapacitiveUnitEnum* RcNetCommonInfoClass::mutable__spef_cap_unit() {
  ::Common::Types::CapacitiveUnitEnum* _msg = _internal_mutable__spef_cap_unit();
  // @@protoc_insertion_point(field_mutable:Rc.RcNetCommonInfoClass._spef_cap_unit)
  return _msg;
}
inline void RcNetCommonInfoClass::set_allocated__spef_cap_unit(::Common::Types::CapacitiveUnitEnum* _spef_cap_unit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_._spef_cap_unit_);
  }
  if (_spef_cap_unit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_spef_cap_unit));
    if (message_arena != submessage_arena) {
      _spef_cap_unit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, _spef_cap_unit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_._spef_cap_unit_ = _spef_cap_unit;
  // @@protoc_insertion_point(field_set_allocated:Rc.RcNetCommonInfoClass._spef_cap_unit)
}

// required .Common.Types.ResistanceUnitEnum _spef_resistance_unit = 2;
inline bool RcNetCommonInfoClass::_internal_has__spef_resistance_unit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_._spef_resistance_unit_ != nullptr);
  return value;
}
inline bool RcNetCommonInfoClass::has__spef_resistance_unit() const {
  return _internal_has__spef_resistance_unit();
}
inline const ::Common::Types::ResistanceUnitEnum& RcNetCommonInfoClass::_internal__spef_resistance_unit() const {
  const ::Common::Types::ResistanceUnitEnum* p = _impl_._spef_resistance_unit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Types::ResistanceUnitEnum&>(
      ::Common::Types::_ResistanceUnitEnum_default_instance_);
}
inline const ::Common::Types::ResistanceUnitEnum& RcNetCommonInfoClass::_spef_resistance_unit() const {
  // @@protoc_insertion_point(field_get:Rc.RcNetCommonInfoClass._spef_resistance_unit)
  return _internal__spef_resistance_unit();
}
inline void RcNetCommonInfoClass::unsafe_arena_set_allocated__spef_resistance_unit(
    ::Common::Types::ResistanceUnitEnum* _spef_resistance_unit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_._spef_resistance_unit_);
  }
  _impl_._spef_resistance_unit_ = _spef_resistance_unit;
  if (_spef_resistance_unit) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Rc.RcNetCommonInfoClass._spef_resistance_unit)
}
inline ::Common::Types::ResistanceUnitEnum* RcNetCommonInfoClass::release__spef_resistance_unit() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Common::Types::ResistanceUnitEnum* temp = _impl_._spef_resistance_unit_;
  _impl_._spef_resistance_unit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Common::Types::ResistanceUnitEnum* RcNetCommonInfoClass::unsafe_arena_release__spef_resistance_unit() {
  // @@protoc_insertion_point(field_release:Rc.RcNetCommonInfoClass._spef_resistance_unit)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Common::Types::ResistanceUnitEnum* temp = _impl_._spef_resistance_unit_;
  _impl_._spef_resistance_unit_ = nullptr;
  return temp;
}
inline ::Common::Types::ResistanceUnitEnum* RcNetCommonInfoClass::_internal_mutable__spef_resistance_unit() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_._spef_resistance_unit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Types::ResistanceUnitEnum>(GetArenaForAllocation());
    _impl_._spef_resistance_unit_ = p;
  }
  return _impl_._spef_resistance_unit_;
}
inline ::Common::Types::ResistanceUnitEnum* RcNetCommonInfoClass::mutable__spef_resistance_unit() {
  ::Common::Types::ResistanceUnitEnum* _msg = _internal_mutable__spef_resistance_unit();
  // @@protoc_insertion_point(field_mutable:Rc.RcNetCommonInfoClass._spef_resistance_unit)
  return _msg;
}
inline void RcNetCommonInfoClass::set_allocated__spef_resistance_unit(::Common::Types::ResistanceUnitEnum* _spef_resistance_unit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_._spef_resistance_unit_);
  }
  if (_spef_resistance_unit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_spef_resistance_unit));
    if (message_arena != submessage_arena) {
      _spef_resistance_unit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, _spef_resistance_unit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_._spef_resistance_unit_ = _spef_resistance_unit;
  // @@protoc_insertion_point(field_set_allocated:Rc.RcNetCommonInfoClass._spef_resistance_unit)
}

// -------------------------------------------------------------------

// EmptyRctClass

// required double load = 1;
inline bool EmptyRctClass::_internal_has_load() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EmptyRctClass::has_load() const {
  return _internal_has_load();
}
inline void EmptyRctClass::clear_load() {
  _impl_.load_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double EmptyRctClass::_internal_load() const {
  return _impl_.load_;
}
inline double EmptyRctClass::load() const {
  // @@protoc_insertion_point(field_get:Rc.EmptyRctClass.load)
  return _internal_load();
}
inline void EmptyRctClass::_internal_set_load(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.load_ = value;
}
inline void EmptyRctClass::set_load(double value) {
  _internal_set_load(value);
  // @@protoc_insertion_point(field_set:Rc.EmptyRctClass.load)
}

// -------------------------------------------------------------------

// RcNetClass

// required uint64 _net = 1;
inline bool RcNetClass::_internal_has__net() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RcNetClass::has__net() const {
  return _internal_has__net();
}
inline void RcNetClass::clear__net() {
  _impl_._net_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t RcNetClass::_internal__net() const {
  return _impl_._net_;
}
inline uint64_t RcNetClass::_net() const {
  // @@protoc_insertion_point(field_get:Rc.RcNetClass._net)
  return _internal__net();
}
inline void RcNetClass::_internal_set__net(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_._net_ = value;
}
inline void RcNetClass::set__net(uint64_t value) {
  _internal_set__net(value);
  // @@protoc_insertion_point(field_set:Rc.RcNetClass._net)
}

// .Rc.EmptyRctClass first = 2;
inline bool RcNetClass::_internal_has_first() const {
  return _rct_case() == kFirst;
}
inline bool RcNetClass::has_first() const {
  return _internal_has_first();
}
inline void RcNetClass::set_has_first() {
  _impl_._oneof_case_[0] = kFirst;
}
inline void RcNetClass::clear_first() {
  if (_internal_has_first()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_._rct_.first_;
    }
    clear_has__rct();
  }
}
inline ::Rc::EmptyRctClass* RcNetClass::release_first() {
  // @@protoc_insertion_point(field_release:Rc.RcNetClass.first)
  if (_internal_has_first()) {
    clear_has__rct();
    ::Rc::EmptyRctClass* temp = _impl_._rct_.first_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_._rct_.first_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Rc::EmptyRctClass& RcNetClass::_internal_first() const {
  return _internal_has_first()
      ? *_impl_._rct_.first_
      : reinterpret_cast< ::Rc::EmptyRctClass&>(::Rc::_EmptyRctClass_default_instance_);
}
inline const ::Rc::EmptyRctClass& RcNetClass::first() const {
  // @@protoc_insertion_point(field_get:Rc.RcNetClass.first)
  return _internal_first();
}
inline ::Rc::EmptyRctClass* RcNetClass::unsafe_arena_release_first() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Rc.RcNetClass.first)
  if (_internal_has_first()) {
    clear_has__rct();
    ::Rc::EmptyRctClass* temp = _impl_._rct_.first_;
    _impl_._rct_.first_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RcNetClass::unsafe_arena_set_allocated_first(::Rc::EmptyRctClass* first) {
  clear__rct();
  if (first) {
    set_has_first();
    _impl_._rct_.first_ = first;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Rc.RcNetClass.first)
}
inline ::Rc::EmptyRctClass* RcNetClass::_internal_mutable_first() {
  if (!_internal_has_first()) {
    clear__rct();
    set_has_first();
    _impl_._rct_.first_ = CreateMaybeMessage< ::Rc::EmptyRctClass >(GetArenaForAllocation());
  }
  return _impl_._rct_.first_;
}
inline ::Rc::EmptyRctClass* RcNetClass::mutable_first() {
  ::Rc::EmptyRctClass* _msg = _internal_mutable_first();
  // @@protoc_insertion_point(field_mutable:Rc.RcNetClass.first)
  return _msg;
}

// uint64 second = 3;
inline bool RcNetClass::_internal_has_second() const {
  return _rct_case() == kSecond;
}
inline bool RcNetClass::has_second() const {
  return _internal_has_second();
}
inline void RcNetClass::set_has_second() {
  _impl_._oneof_case_[0] = kSecond;
}
inline void RcNetClass::clear_second() {
  if (_internal_has_second()) {
    _impl_._rct_.second_ = uint64_t{0u};
    clear_has__rct();
  }
}
inline uint64_t RcNetClass::_internal_second() const {
  if (_internal_has_second()) {
    return _impl_._rct_.second_;
  }
  return uint64_t{0u};
}
inline void RcNetClass::_internal_set_second(uint64_t value) {
  if (!_internal_has_second()) {
    clear__rct();
    set_has_second();
  }
  _impl_._rct_.second_ = value;
}
inline uint64_t RcNetClass::second() const {
  // @@protoc_insertion_point(field_get:Rc.RcNetClass.second)
  return _internal_second();
}
inline void RcNetClass::set_second(uint64_t value) {
  _internal_set_second(value);
  // @@protoc_insertion_point(field_set:Rc.RcNetClass.second)
}

// repeated uint64 _rc_loop = 4;
inline int RcNetClass::_internal__rc_loop_size() const {
  return _impl_._rc_loop_.size();
}
inline int RcNetClass::_rc_loop_size() const {
  return _internal__rc_loop_size();
}
inline void RcNetClass::clear__rc_loop() {
  _impl_._rc_loop_.Clear();
}
inline uint64_t RcNetClass::_internal__rc_loop(int index) const {
  return _impl_._rc_loop_.Get(index);
}
inline uint64_t RcNetClass::_rc_loop(int index) const {
  // @@protoc_insertion_point(field_get:Rc.RcNetClass._rc_loop)
  return _internal__rc_loop(index);
}
inline void RcNetClass::set__rc_loop(int index, uint64_t value) {
  _impl_._rc_loop_.Set(index, value);
  // @@protoc_insertion_point(field_set:Rc.RcNetClass._rc_loop)
}
inline void RcNetClass::_internal_add__rc_loop(uint64_t value) {
  _impl_._rc_loop_.Add(value);
}
inline void RcNetClass::add__rc_loop(uint64_t value) {
  _internal_add__rc_loop(value);
  // @@protoc_insertion_point(field_add:Rc.RcNetClass._rc_loop)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
RcNetClass::_internal__rc_loop() const {
  return _impl_._rc_loop_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
RcNetClass::_rc_loop() const {
  // @@protoc_insertion_point(field_list:Rc.RcNetClass._rc_loop)
  return _internal__rc_loop();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
RcNetClass::_internal_mutable__rc_loop() {
  return &_impl_._rc_loop_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
RcNetClass::mutable__rc_loop() {
  // @@protoc_insertion_point(field_mutable_list:Rc.RcNetClass._rc_loop)
  return _internal_mutable__rc_loop();
}

// required bool _is_found_loop = 5;
inline bool RcNetClass::_internal_has__is_found_loop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RcNetClass::has__is_found_loop() const {
  return _internal_has__is_found_loop();
}
inline void RcNetClass::clear__is_found_loop() {
  _impl_._is_found_loop_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool RcNetClass::_internal__is_found_loop() const {
  return _impl_._is_found_loop_;
}
inline bool RcNetClass::_is_found_loop() const {
  // @@protoc_insertion_point(field_get:Rc.RcNetClass._is_found_loop)
  return _internal__is_found_loop();
}
inline void RcNetClass::_internal_set__is_found_loop(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_._is_found_loop_ = value;
}
inline void RcNetClass::set__is_found_loop(bool value) {
  _internal_set__is_found_loop(value);
  // @@protoc_insertion_point(field_set:Rc.RcNetClass._is_found_loop)
}

// required .Rc.RcNetCommonInfoClass _rc_net_common_info = 6;
inline bool RcNetClass::_internal_has__rc_net_common_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_._rc_net_common_info_ != nullptr);
  return value;
}
inline bool RcNetClass::has__rc_net_common_info() const {
  return _internal_has__rc_net_common_info();
}
inline void RcNetClass::clear__rc_net_common_info() {
  if (_impl_._rc_net_common_info_ != nullptr) _impl_._rc_net_common_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Rc::RcNetCommonInfoClass& RcNetClass::_internal__rc_net_common_info() const {
  const ::Rc::RcNetCommonInfoClass* p = _impl_._rc_net_common_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Rc::RcNetCommonInfoClass&>(
      ::Rc::_RcNetCommonInfoClass_default_instance_);
}
inline const ::Rc::RcNetCommonInfoClass& RcNetClass::_rc_net_common_info() const {
  // @@protoc_insertion_point(field_get:Rc.RcNetClass._rc_net_common_info)
  return _internal__rc_net_common_info();
}
inline void RcNetClass::unsafe_arena_set_allocated__rc_net_common_info(
    ::Rc::RcNetCommonInfoClass* _rc_net_common_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_._rc_net_common_info_);
  }
  _impl_._rc_net_common_info_ = _rc_net_common_info;
  if (_rc_net_common_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Rc.RcNetClass._rc_net_common_info)
}
inline ::Rc::RcNetCommonInfoClass* RcNetClass::release__rc_net_common_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Rc::RcNetCommonInfoClass* temp = _impl_._rc_net_common_info_;
  _impl_._rc_net_common_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Rc::RcNetCommonInfoClass* RcNetClass::unsafe_arena_release__rc_net_common_info() {
  // @@protoc_insertion_point(field_release:Rc.RcNetClass._rc_net_common_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Rc::RcNetCommonInfoClass* temp = _impl_._rc_net_common_info_;
  _impl_._rc_net_common_info_ = nullptr;
  return temp;
}
inline ::Rc::RcNetCommonInfoClass* RcNetClass::_internal_mutable__rc_net_common_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_._rc_net_common_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Rc::RcNetCommonInfoClass>(GetArenaForAllocation());
    _impl_._rc_net_common_info_ = p;
  }
  return _impl_._rc_net_common_info_;
}
inline ::Rc::RcNetCommonInfoClass* RcNetClass::mutable__rc_net_common_info() {
  ::Rc::RcNetCommonInfoClass* _msg = _internal_mutable__rc_net_common_info();
  // @@protoc_insertion_point(field_mutable:Rc.RcNetClass._rc_net_common_info)
  return _msg;
}
inline void RcNetClass::set_allocated__rc_net_common_info(::Rc::RcNetCommonInfoClass* _rc_net_common_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_._rc_net_common_info_;
  }
  if (_rc_net_common_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(_rc_net_common_info);
    if (message_arena != submessage_arena) {
      _rc_net_common_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, _rc_net_common_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_._rc_net_common_info_ = _rc_net_common_info;
  // @@protoc_insertion_point(field_set_allocated:Rc.RcNetClass._rc_net_common_info)
}

inline bool RcNetClass::has__rct() const {
  return _rct_case() != _RCT_NOT_SET;
}
inline void RcNetClass::clear_has__rct() {
  _impl_._oneof_case_[0] = _RCT_NOT_SET;
}
inline RcNetClass::RctCase RcNetClass::_rct_case() const {
  return RcNetClass::RctCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ArnoldiNetClass

// repeated .Common.Types.ULongUintPair node_id_pair = 1;
inline int ArnoldiNetClass::_internal_node_id_pair_size() const {
  return _impl_.node_id_pair_.size();
}
inline int ArnoldiNetClass::node_id_pair_size() const {
  return _internal_node_id_pair_size();
}
inline ::Common::Types::ULongUintPair* ArnoldiNetClass::mutable_node_id_pair(int index) {
  // @@protoc_insertion_point(field_mutable:Rc.ArnoldiNetClass.node_id_pair)
  return _impl_.node_id_pair_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Types::ULongUintPair >*
ArnoldiNetClass::mutable_node_id_pair() {
  // @@protoc_insertion_point(field_mutable_list:Rc.ArnoldiNetClass.node_id_pair)
  return &_impl_.node_id_pair_;
}
inline const ::Common::Types::ULongUintPair& ArnoldiNetClass::_internal_node_id_pair(int index) const {
  return _impl_.node_id_pair_.Get(index);
}
inline const ::Common::Types::ULongUintPair& ArnoldiNetClass::node_id_pair(int index) const {
  // @@protoc_insertion_point(field_get:Rc.ArnoldiNetClass.node_id_pair)
  return _internal_node_id_pair(index);
}
inline ::Common::Types::ULongUintPair* ArnoldiNetClass::_internal_add_node_id_pair() {
  return _impl_.node_id_pair_.Add();
}
inline ::Common::Types::ULongUintPair* ArnoldiNetClass::add_node_id_pair() {
  ::Common::Types::ULongUintPair* _add = _internal_add_node_id_pair();
  // @@protoc_insertion_point(field_add:Rc.ArnoldiNetClass.node_id_pair)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Common::Types::ULongUintPair >&
ArnoldiNetClass::node_id_pair() const {
  // @@protoc_insertion_point(field_list:Rc.ArnoldiNetClass.node_id_pair)
  return _impl_.node_id_pair_;
}

// required double _input_slew = 2;
inline bool ArnoldiNetClass::_internal_has__input_slew() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ArnoldiNetClass::has__input_slew() const {
  return _internal_has__input_slew();
}
inline void ArnoldiNetClass::clear__input_slew() {
  _impl_._input_slew_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ArnoldiNetClass::_internal__input_slew() const {
  return _impl_._input_slew_;
}
inline double ArnoldiNetClass::_input_slew() const {
  // @@protoc_insertion_point(field_get:Rc.ArnoldiNetClass._input_slew)
  return _internal__input_slew();
}
inline void ArnoldiNetClass::_internal_set__input_slew(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_._input_slew_ = value;
}
inline void ArnoldiNetClass::set__input_slew(double value) {
  _internal_set__input_slew(value);
  // @@protoc_insertion_point(field_set:Rc.ArnoldiNetClass._input_slew)
}

// required uint64 _lib_arc = 3;
inline bool ArnoldiNetClass::_internal_has__lib_arc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ArnoldiNetClass::has__lib_arc() const {
  return _internal_has__lib_arc();
}
inline void ArnoldiNetClass::clear__lib_arc() {
  _impl_._lib_arc_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t ArnoldiNetClass::_internal__lib_arc() const {
  return _impl_._lib_arc_;
}
inline uint64_t ArnoldiNetClass::_lib_arc() const {
  // @@protoc_insertion_point(field_get:Rc.ArnoldiNetClass._lib_arc)
  return _internal__lib_arc();
}
inline void ArnoldiNetClass::_internal_set__lib_arc(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_._lib_arc_ = value;
}
inline void ArnoldiNetClass::set__lib_arc(uint64_t value) {
  _internal_set__lib_arc(value);
  // @@protoc_insertion_point(field_set:Rc.ArnoldiNetClass._lib_arc)
}

// repeated double _nodal_caps = 4;
inline int ArnoldiNetClass::_internal__nodal_caps_size() const {
  return _impl_._nodal_caps_.size();
}
inline int ArnoldiNetClass::_nodal_caps_size() const {
  return _internal__nodal_caps_size();
}
inline void ArnoldiNetClass::clear__nodal_caps() {
  _impl_._nodal_caps_.Clear();
}
inline double ArnoldiNetClass::_internal__nodal_caps(int index) const {
  return _impl_._nodal_caps_.Get(index);
}
inline double ArnoldiNetClass::_nodal_caps(int index) const {
  // @@protoc_insertion_point(field_get:Rc.ArnoldiNetClass._nodal_caps)
  return _internal__nodal_caps(index);
}
inline void ArnoldiNetClass::set__nodal_caps(int index, double value) {
  _impl_._nodal_caps_.Set(index, value);
  // @@protoc_insertion_point(field_set:Rc.ArnoldiNetClass._nodal_caps)
}
inline void ArnoldiNetClass::_internal_add__nodal_caps(double value) {
  _impl_._nodal_caps_.Add(value);
}
inline void ArnoldiNetClass::add__nodal_caps(double value) {
  _internal_add__nodal_caps(value);
  // @@protoc_insertion_point(field_add:Rc.ArnoldiNetClass._nodal_caps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ArnoldiNetClass::_internal__nodal_caps() const {
  return _impl_._nodal_caps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ArnoldiNetClass::_nodal_caps() const {
  // @@protoc_insertion_point(field_list:Rc.ArnoldiNetClass._nodal_caps)
  return _internal__nodal_caps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ArnoldiNetClass::_internal_mutable__nodal_caps() {
  return &_impl_._nodal_caps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ArnoldiNetClass::mutable__nodal_caps() {
  // @@protoc_insertion_point(field_mutable_list:Rc.ArnoldiNetClass._nodal_caps)
  return _internal_mutable__nodal_caps();
}

// required .Common.Types.DoubleMatrix _conductances = 5;
inline bool ArnoldiNetClass::_internal_has__conductances() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_._conductances_ != nullptr);
  return value;
}
inline bool ArnoldiNetClass::has__conductances() const {
  return _internal_has__conductances();
}
inline const ::Common::Types::DoubleMatrix& ArnoldiNetClass::_internal__conductances() const {
  const ::Common::Types::DoubleMatrix* p = _impl_._conductances_;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Types::DoubleMatrix&>(
      ::Common::Types::_DoubleMatrix_default_instance_);
}
inline const ::Common::Types::DoubleMatrix& ArnoldiNetClass::_conductances() const {
  // @@protoc_insertion_point(field_get:Rc.ArnoldiNetClass._conductances)
  return _internal__conductances();
}
inline void ArnoldiNetClass::unsafe_arena_set_allocated__conductances(
    ::Common::Types::DoubleMatrix* _conductances) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_._conductances_);
  }
  _impl_._conductances_ = _conductances;
  if (_conductances) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Rc.ArnoldiNetClass._conductances)
}
inline ::Common::Types::DoubleMatrix* ArnoldiNetClass::release__conductances() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Common::Types::DoubleMatrix* temp = _impl_._conductances_;
  _impl_._conductances_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Common::Types::DoubleMatrix* ArnoldiNetClass::unsafe_arena_release__conductances() {
  // @@protoc_insertion_point(field_release:Rc.ArnoldiNetClass._conductances)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Common::Types::DoubleMatrix* temp = _impl_._conductances_;
  _impl_._conductances_ = nullptr;
  return temp;
}
inline ::Common::Types::DoubleMatrix* ArnoldiNetClass::_internal_mutable__conductances() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_._conductances_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Types::DoubleMatrix>(GetArenaForAllocation());
    _impl_._conductances_ = p;
  }
  return _impl_._conductances_;
}
inline ::Common::Types::DoubleMatrix* ArnoldiNetClass::mutable__conductances() {
  ::Common::Types::DoubleMatrix* _msg = _internal_mutable__conductances();
  // @@protoc_insertion_point(field_mutable:Rc.ArnoldiNetClass._conductances)
  return _msg;
}
inline void ArnoldiNetClass::set_allocated__conductances(::Common::Types::DoubleMatrix* _conductances) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_._conductances_);
  }
  if (_conductances) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_conductances));
    if (message_arena != submessage_arena) {
      _conductances = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, _conductances, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_._conductances_ = _conductances;
  // @@protoc_insertion_point(field_set_allocated:Rc.ArnoldiNetClass._conductances)
}

// optional .Common.Types.DoubleMatrixTuple _diag_B_W = 6;
inline bool ArnoldiNetClass::_internal_has__diag_b_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_._diag_b_w_ != nullptr);
  return value;
}
inline bool ArnoldiNetClass::has__diag_b_w() const {
  return _internal_has__diag_b_w();
}
inline const ::Common::Types::DoubleMatrixTuple& ArnoldiNetClass::_internal__diag_b_w() const {
  const ::Common::Types::DoubleMatrixTuple* p = _impl_._diag_b_w_;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Types::DoubleMatrixTuple&>(
      ::Common::Types::_DoubleMatrixTuple_default_instance_);
}
inline const ::Common::Types::DoubleMatrixTuple& ArnoldiNetClass::_diag_b_w() const {
  // @@protoc_insertion_point(field_get:Rc.ArnoldiNetClass._diag_B_W)
  return _internal__diag_b_w();
}
inline void ArnoldiNetClass::unsafe_arena_set_allocated__diag_b_w(
    ::Common::Types::DoubleMatrixTuple* _diag_b_w) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_._diag_b_w_);
  }
  _impl_._diag_b_w_ = _diag_b_w;
  if (_diag_b_w) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Rc.ArnoldiNetClass._diag_B_W)
}
inline ::Common::Types::DoubleMatrixTuple* ArnoldiNetClass::release__diag_b_w() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Common::Types::DoubleMatrixTuple* temp = _impl_._diag_b_w_;
  _impl_._diag_b_w_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Common::Types::DoubleMatrixTuple* ArnoldiNetClass::unsafe_arena_release__diag_b_w() {
  // @@protoc_insertion_point(field_release:Rc.ArnoldiNetClass._diag_B_W)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Common::Types::DoubleMatrixTuple* temp = _impl_._diag_b_w_;
  _impl_._diag_b_w_ = nullptr;
  return temp;
}
inline ::Common::Types::DoubleMatrixTuple* ArnoldiNetClass::_internal_mutable__diag_b_w() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_._diag_b_w_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Types::DoubleMatrixTuple>(GetArenaForAllocation());
    _impl_._diag_b_w_ = p;
  }
  return _impl_._diag_b_w_;
}
inline ::Common::Types::DoubleMatrixTuple* ArnoldiNetClass::mutable__diag_b_w() {
  ::Common::Types::DoubleMatrixTuple* _msg = _internal_mutable__diag_b_w();
  // @@protoc_insertion_point(field_mutable:Rc.ArnoldiNetClass._diag_B_W)
  return _msg;
}
inline void ArnoldiNetClass::set_allocated__diag_b_w(::Common::Types::DoubleMatrixTuple* _diag_b_w) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_._diag_b_w_);
  }
  if (_diag_b_w) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_diag_b_w));
    if (message_arena != submessage_arena) {
      _diag_b_w = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, _diag_b_w, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_._diag_b_w_ = _diag_b_w;
  // @@protoc_insertion_point(field_set_allocated:Rc.ArnoldiNetClass._diag_B_W)
}

// -------------------------------------------------------------------

// RcNetSyn

// required uint64 id = 1;
inline bool RcNetSyn::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RcNetSyn::has_id() const {
  return _internal_has_id();
}
inline void RcNetSyn::clear_id() {
  _impl_.id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t RcNetSyn::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t RcNetSyn::id() const {
  // @@protoc_insertion_point(field_get:Rc.RcNetSyn.id)
  return _internal_id();
}
inline void RcNetSyn::_internal_set_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void RcNetSyn::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Rc.RcNetSyn.id)
}

// required uint32 type = 2;
inline bool RcNetSyn::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RcNetSyn::has_type() const {
  return _internal_has_type();
}
inline void RcNetSyn::clear_type() {
  _impl_.type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t RcNetSyn::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t RcNetSyn::type() const {
  // @@protoc_insertion_point(field_get:Rc.RcNetSyn.type)
  return _internal_type();
}
inline void RcNetSyn::_internal_set_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.type_ = value;
}
inline void RcNetSyn::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Rc.RcNetSyn.type)
}

// required .Rc.RcNetClass parent = 3;
inline bool RcNetSyn::_internal_has_parent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.parent_ != nullptr);
  return value;
}
inline bool RcNetSyn::has_parent() const {
  return _internal_has_parent();
}
inline void RcNetSyn::clear_parent() {
  if (_impl_.parent_ != nullptr) _impl_.parent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Rc::RcNetClass& RcNetSyn::_internal_parent() const {
  const ::Rc::RcNetClass* p = _impl_.parent_;
  return p != nullptr ? *p : reinterpret_cast<const ::Rc::RcNetClass&>(
      ::Rc::_RcNetClass_default_instance_);
}
inline const ::Rc::RcNetClass& RcNetSyn::parent() const {
  // @@protoc_insertion_point(field_get:Rc.RcNetSyn.parent)
  return _internal_parent();
}
inline void RcNetSyn::unsafe_arena_set_allocated_parent(
    ::Rc::RcNetClass* parent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parent_);
  }
  _impl_.parent_ = parent;
  if (parent) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Rc.RcNetSyn.parent)
}
inline ::Rc::RcNetClass* RcNetSyn::release_parent() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Rc::RcNetClass* temp = _impl_.parent_;
  _impl_.parent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Rc::RcNetClass* RcNetSyn::unsafe_arena_release_parent() {
  // @@protoc_insertion_point(field_release:Rc.RcNetSyn.parent)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Rc::RcNetClass* temp = _impl_.parent_;
  _impl_.parent_ = nullptr;
  return temp;
}
inline ::Rc::RcNetClass* RcNetSyn::_internal_mutable_parent() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.parent_ == nullptr) {
    auto* p = CreateMaybeMessage<::Rc::RcNetClass>(GetArenaForAllocation());
    _impl_.parent_ = p;
  }
  return _impl_.parent_;
}
inline ::Rc::RcNetClass* RcNetSyn::mutable_parent() {
  ::Rc::RcNetClass* _msg = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:Rc.RcNetSyn.parent)
  return _msg;
}
inline void RcNetSyn::set_allocated_parent(::Rc::RcNetClass* parent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.parent_;
  }
  if (parent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(parent);
    if (message_arena != submessage_arena) {
      parent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:Rc.RcNetSyn.parent)
}

// optional .Rc.ArnoldiNetClass child = 4;
inline bool RcNetSyn::_internal_has_child() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.child_ != nullptr);
  return value;
}
inline bool RcNetSyn::has_child() const {
  return _internal_has_child();
}
inline void RcNetSyn::clear_child() {
  if (_impl_.child_ != nullptr) _impl_.child_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Rc::ArnoldiNetClass& RcNetSyn::_internal_child() const {
  const ::Rc::ArnoldiNetClass* p = _impl_.child_;
  return p != nullptr ? *p : reinterpret_cast<const ::Rc::ArnoldiNetClass&>(
      ::Rc::_ArnoldiNetClass_default_instance_);
}
inline const ::Rc::ArnoldiNetClass& RcNetSyn::child() const {
  // @@protoc_insertion_point(field_get:Rc.RcNetSyn.child)
  return _internal_child();
}
inline void RcNetSyn::unsafe_arena_set_allocated_child(
    ::Rc::ArnoldiNetClass* child) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.child_);
  }
  _impl_.child_ = child;
  if (child) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Rc.RcNetSyn.child)
}
inline ::Rc::ArnoldiNetClass* RcNetSyn::release_child() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Rc::ArnoldiNetClass* temp = _impl_.child_;
  _impl_.child_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Rc::ArnoldiNetClass* RcNetSyn::unsafe_arena_release_child() {
  // @@protoc_insertion_point(field_release:Rc.RcNetSyn.child)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Rc::ArnoldiNetClass* temp = _impl_.child_;
  _impl_.child_ = nullptr;
  return temp;
}
inline ::Rc::ArnoldiNetClass* RcNetSyn::_internal_mutable_child() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.child_ == nullptr) {
    auto* p = CreateMaybeMessage<::Rc::ArnoldiNetClass>(GetArenaForAllocation());
    _impl_.child_ = p;
  }
  return _impl_.child_;
}
inline ::Rc::ArnoldiNetClass* RcNetSyn::mutable_child() {
  ::Rc::ArnoldiNetClass* _msg = _internal_mutable_child();
  // @@protoc_insertion_point(field_mutable:Rc.RcNetSyn.child)
  return _msg;
}
inline void RcNetSyn::set_allocated_child(::Rc::ArnoldiNetClass* child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.child_;
  }
  if (child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(child);
    if (message_arena != submessage_arena) {
      child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.child_ = child;
  // @@protoc_insertion_point(field_set_allocated:Rc.RcNetSyn.child)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Rc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RcNet_2eproto
