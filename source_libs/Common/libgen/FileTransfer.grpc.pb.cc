// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: FileTransfer.proto

#include "FileTransfer.pb.h"
#include "FileTransfer.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace File {

static const char* FileTransfer_method_names[] = {
  "/File.FileTransfer/Upload",
  "/File.FileTransfer/Download",
};

std::unique_ptr< FileTransfer::Stub> FileTransfer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileTransfer::Stub> stub(new FileTransfer::Stub(channel, options));
  return stub;
}

FileTransfer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Upload_(FileTransfer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Download_(FileTransfer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientWriter< ::File::FileContent>* FileTransfer::Stub::UploadRaw(::grpc::ClientContext* context, ::File::FileId* response) {
  return ::grpc::internal::ClientWriterFactory< ::File::FileContent>::Create(channel_.get(), rpcmethod_Upload_, context, response);
}

void FileTransfer::Stub::async::Upload(::grpc::ClientContext* context, ::File::FileId* response, ::grpc::ClientWriteReactor< ::File::FileContent>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::File::FileContent>::Create(stub_->channel_.get(), stub_->rpcmethod_Upload_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::File::FileContent>* FileTransfer::Stub::AsyncUploadRaw(::grpc::ClientContext* context, ::File::FileId* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::File::FileContent>::Create(channel_.get(), cq, rpcmethod_Upload_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::File::FileContent>* FileTransfer::Stub::PrepareAsyncUploadRaw(::grpc::ClientContext* context, ::File::FileId* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::File::FileContent>::Create(channel_.get(), cq, rpcmethod_Upload_, context, response, false, nullptr);
}

::grpc::ClientReader< ::File::FileContent>* FileTransfer::Stub::DownloadRaw(::grpc::ClientContext* context, const ::File::FileId& request) {
  return ::grpc::internal::ClientReaderFactory< ::File::FileContent>::Create(channel_.get(), rpcmethod_Download_, context, request);
}

void FileTransfer::Stub::async::Download(::grpc::ClientContext* context, const ::File::FileId* request, ::grpc::ClientReadReactor< ::File::FileContent>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::File::FileContent>::Create(stub_->channel_.get(), stub_->rpcmethod_Download_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::File::FileContent>* FileTransfer::Stub::AsyncDownloadRaw(::grpc::ClientContext* context, const ::File::FileId& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::File::FileContent>::Create(channel_.get(), cq, rpcmethod_Download_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::File::FileContent>* FileTransfer::Stub::PrepareAsyncDownloadRaw(::grpc::ClientContext* context, const ::File::FileId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::File::FileContent>::Create(channel_.get(), cq, rpcmethod_Download_, context, request, false, nullptr);
}

FileTransfer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTransfer_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< FileTransfer::Service, ::File::FileContent, ::File::FileId>(
          [](FileTransfer::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::File::FileContent>* reader,
             ::File::FileId* resp) {
               return service->Upload(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTransfer_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FileTransfer::Service, ::File::FileId, ::File::FileContent>(
          [](FileTransfer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::File::FileId* req,
             ::grpc::ServerWriter<::File::FileContent>* writer) {
               return service->Download(ctx, req, writer);
             }, this)));
}

FileTransfer::Service::~Service() {
}

::grpc::Status FileTransfer::Service::Upload(::grpc::ServerContext* context, ::grpc::ServerReader< ::File::FileContent>* reader, ::File::FileId* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileTransfer::Service::Download(::grpc::ServerContext* context, const ::File::FileId* request, ::grpc::ServerWriter< ::File::FileContent>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace File

