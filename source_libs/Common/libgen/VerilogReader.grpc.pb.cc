// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: VerilogReader.proto

#include "VerilogReader.pb.h"
#include "VerilogReader.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace VerilogParser {

static const char* VerilogReaderService_method_names[] = {
  "/VerilogParser.VerilogReaderService/read",
};

std::unique_ptr< VerilogReaderService::Stub> VerilogReaderService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VerilogReaderService::Stub> stub(new VerilogReaderService::Stub(channel, options));
  return stub;
}

VerilogReaderService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_read_(VerilogReaderService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VerilogReaderService::Stub::read(::grpc::ClientContext* context, const ::Common::Types::StringMsg& request, ::Common::Types::BoolMsg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Common::Types::StringMsg, ::Common::Types::BoolMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_read_, context, request, response);
}

void VerilogReaderService::Stub::async::read(::grpc::ClientContext* context, const ::Common::Types::StringMsg* request, ::Common::Types::BoolMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Common::Types::StringMsg, ::Common::Types::BoolMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_read_, context, request, response, std::move(f));
}

void VerilogReaderService::Stub::async::read(::grpc::ClientContext* context, const ::Common::Types::StringMsg* request, ::Common::Types::BoolMsg* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_read_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>* VerilogReaderService::Stub::PrepareAsyncreadRaw(::grpc::ClientContext* context, const ::Common::Types::StringMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Common::Types::BoolMsg, ::Common::Types::StringMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_read_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Common::Types::BoolMsg>* VerilogReaderService::Stub::AsyncreadRaw(::grpc::ClientContext* context, const ::Common::Types::StringMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreadRaw(context, request, cq);
  result->StartCall();
  return result;
}

VerilogReaderService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VerilogReaderService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VerilogReaderService::Service, ::Common::Types::StringMsg, ::Common::Types::BoolMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VerilogReaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Common::Types::StringMsg* req,
             ::Common::Types::BoolMsg* resp) {
               return service->read(ctx, req, resp);
             }, this)));
}

VerilogReaderService::Service::~Service() {
}

::grpc::Status VerilogReaderService::Service::read(::grpc::ServerContext* context, const ::Common::Types::StringMsg* request, ::Common::Types::BoolMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace VerilogParser

