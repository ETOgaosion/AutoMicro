// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LaunchConfig.proto

#include "LaunchConfig.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Config {
PROTOBUF_CONSTEXPR ConfigMsg::ConfigMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.corner_max_lib_files_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.design_work_space_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.top_module_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verilog_src_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sdc_src_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spef_src_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thread_nums_)*/0
  , /*decltype(_impl_.n_worst_path_per_clock_)*/0
  , /*decltype(_impl_.significant_digits_)*/0} {}
struct ConfigMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigMsgDefaultTypeInternal() {}
  union {
    ConfigMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigMsgDefaultTypeInternal _ConfigMsg_default_instance_;
}  // namespace Config
static ::_pb::Metadata file_level_metadata_LaunchConfig_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_LaunchConfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_LaunchConfig_2eproto = nullptr;

const uint32_t TableStruct_LaunchConfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Config::ConfigMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Config::ConfigMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Config::ConfigMsg, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Config::ConfigMsg, _impl_.design_work_space_),
  PROTOBUF_FIELD_OFFSET(::Config::ConfigMsg, _impl_.thread_nums_),
  PROTOBUF_FIELD_OFFSET(::Config::ConfigMsg, _impl_.corner_max_lib_files_),
  PROTOBUF_FIELD_OFFSET(::Config::ConfigMsg, _impl_.n_worst_path_per_clock_),
  PROTOBUF_FIELD_OFFSET(::Config::ConfigMsg, _impl_.top_module_name_),
  PROTOBUF_FIELD_OFFSET(::Config::ConfigMsg, _impl_.verilog_src_),
  PROTOBUF_FIELD_OFFSET(::Config::ConfigMsg, _impl_.sdc_src_),
  PROTOBUF_FIELD_OFFSET(::Config::ConfigMsg, _impl_.spef_src_),
  PROTOBUF_FIELD_OFFSET(::Config::ConfigMsg, _impl_.significant_digits_),
  0,
  1,
  6,
  ~0u,
  7,
  2,
  3,
  4,
  5,
  8,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, -1, sizeof(::Config::ConfigMsg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Config::_ConfigMsg_default_instance_._instance,
};

const char descriptor_table_protodef_LaunchConfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022LaunchConfig.proto\022\006Config\032\021CommonType"
  "s.proto\"\362\001\n\tConfigMsg\022\n\n\002id\030\001 \002(\t\022\031\n\021des"
  "ign_work_space\030\002 \001(\t\022\023\n\013thread_nums\030\003 \001("
  "\005\022\034\n\024corner_max_lib_files\030\004 \003(\t\022\036\n\026n_wor"
  "st_path_per_clock\030\005 \001(\005\022\027\n\017top_module_na"
  "me\030\006 \001(\t\022\023\n\013verilog_src\030\007 \001(\t\022\017\n\007sdc_src"
  "\030\010 \001(\t\022\020\n\010spef_src\030\t \001(\t\022\032\n\022significant_"
  "digits\030\n \001(\0052\204\002\n\rConfigService\0229\n\016Transf"
  "erConfig\022\021.Config.ConfigMsg\032\024.Common.Typ"
  "es.IntMsg\022@\n\013readVerilog\022\032.Common.Types."
  "StrStrIntSet\032\025.Common.Types.BoolMsg\022<\n\007r"
  "eadLib\022\032.Common.Types.StrStrIntSet\032\025.Com"
  "mon.Types.BoolMsg\0228\n\007readSdc\022\026.Common.Ty"
  "pes.ULongMsg\032\025.Common.Types.BoolMsg"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_LaunchConfig_2eproto_deps[1] = {
  &::descriptor_table_CommonTypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_LaunchConfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_LaunchConfig_2eproto = {
    false, false, 555, descriptor_table_protodef_LaunchConfig_2eproto,
    "LaunchConfig.proto",
    &descriptor_table_LaunchConfig_2eproto_once, descriptor_table_LaunchConfig_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_LaunchConfig_2eproto::offsets,
    file_level_metadata_LaunchConfig_2eproto, file_level_enum_descriptors_LaunchConfig_2eproto,
    file_level_service_descriptors_LaunchConfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_LaunchConfig_2eproto_getter() {
  return &descriptor_table_LaunchConfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_LaunchConfig_2eproto(&descriptor_table_LaunchConfig_2eproto);
namespace Config {

// ===================================================================

class ConfigMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigMsg>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_design_work_space(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_thread_nums(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_n_worst_path_per_clock(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_top_module_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_verilog_src(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sdc_src(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_spef_src(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_significant_digits(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ConfigMsg::ConfigMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Config.ConfigMsg)
}
ConfigMsg::ConfigMsg(const ConfigMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfigMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.corner_max_lib_files_){from._impl_.corner_max_lib_files_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.design_work_space_){}
    , decltype(_impl_.top_module_name_){}
    , decltype(_impl_.verilog_src_){}
    , decltype(_impl_.sdc_src_){}
    , decltype(_impl_.spef_src_){}
    , decltype(_impl_.thread_nums_){}
    , decltype(_impl_.n_worst_path_per_clock_){}
    , decltype(_impl_.significant_digits_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.design_work_space_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.design_work_space_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_design_work_space()) {
    _this->_impl_.design_work_space_.Set(from._internal_design_work_space(), 
      _this->GetArenaForAllocation());
  }
  _impl_.top_module_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.top_module_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_top_module_name()) {
    _this->_impl_.top_module_name_.Set(from._internal_top_module_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verilog_src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verilog_src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_verilog_src()) {
    _this->_impl_.verilog_src_.Set(from._internal_verilog_src(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sdc_src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdc_src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sdc_src()) {
    _this->_impl_.sdc_src_.Set(from._internal_sdc_src(), 
      _this->GetArenaForAllocation());
  }
  _impl_.spef_src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spef_src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_spef_src()) {
    _this->_impl_.spef_src_.Set(from._internal_spef_src(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.thread_nums_, &from._impl_.thread_nums_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.significant_digits_) -
    reinterpret_cast<char*>(&_impl_.thread_nums_)) + sizeof(_impl_.significant_digits_));
  // @@protoc_insertion_point(copy_constructor:Config.ConfigMsg)
}

inline void ConfigMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.corner_max_lib_files_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.design_work_space_){}
    , decltype(_impl_.top_module_name_){}
    , decltype(_impl_.verilog_src_){}
    , decltype(_impl_.sdc_src_){}
    , decltype(_impl_.spef_src_){}
    , decltype(_impl_.thread_nums_){0}
    , decltype(_impl_.n_worst_path_per_clock_){0}
    , decltype(_impl_.significant_digits_){0}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.design_work_space_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.design_work_space_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.top_module_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.top_module_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verilog_src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verilog_src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sdc_src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdc_src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.spef_src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spef_src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConfigMsg::~ConfigMsg() {
  // @@protoc_insertion_point(destructor:Config.ConfigMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfigMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.corner_max_lib_files_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.design_work_space_.Destroy();
  _impl_.top_module_name_.Destroy();
  _impl_.verilog_src_.Destroy();
  _impl_.sdc_src_.Destroy();
  _impl_.spef_src_.Destroy();
}

void ConfigMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfigMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:Config.ConfigMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.corner_max_lib_files_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.design_work_space_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.top_module_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.verilog_src_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.sdc_src_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.spef_src_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.thread_nums_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.n_worst_path_per_clock_) -
        reinterpret_cast<char*>(&_impl_.thread_nums_)) + sizeof(_impl_.n_worst_path_per_clock_));
  }
  _impl_.significant_digits_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Config.ConfigMsg.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string design_work_space = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_design_work_space();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Config.ConfigMsg.design_work_space");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 thread_nums = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_thread_nums(&has_bits);
          _impl_.thread_nums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string corner_max_lib_files = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_corner_max_lib_files();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "Config.ConfigMsg.corner_max_lib_files");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 n_worst_path_per_clock = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_n_worst_path_per_clock(&has_bits);
          _impl_.n_worst_path_per_clock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string top_module_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_top_module_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Config.ConfigMsg.top_module_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string verilog_src = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_verilog_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Config.ConfigMsg.verilog_src");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string sdc_src = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_sdc_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Config.ConfigMsg.sdc_src");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string spef_src = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_spef_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Config.ConfigMsg.spef_src");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 significant_digits = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_significant_digits(&has_bits);
          _impl_.significant_digits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Config.ConfigMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Config.ConfigMsg.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional string design_work_space = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_design_work_space().data(), static_cast<int>(this->_internal_design_work_space().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Config.ConfigMsg.design_work_space");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_design_work_space(), target);
  }

  // optional int32 thread_nums = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_thread_nums(), target);
  }

  // repeated string corner_max_lib_files = 4;
  for (int i = 0, n = this->_internal_corner_max_lib_files_size(); i < n; i++) {
    const auto& s = this->_internal_corner_max_lib_files(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Config.ConfigMsg.corner_max_lib_files");
    target = stream->WriteString(4, s, target);
  }

  // optional int32 n_worst_path_per_clock = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_n_worst_path_per_clock(), target);
  }

  // optional string top_module_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_top_module_name().data(), static_cast<int>(this->_internal_top_module_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Config.ConfigMsg.top_module_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_top_module_name(), target);
  }

  // optional string verilog_src = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_verilog_src().data(), static_cast<int>(this->_internal_verilog_src().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Config.ConfigMsg.verilog_src");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_verilog_src(), target);
  }

  // optional string sdc_src = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sdc_src().data(), static_cast<int>(this->_internal_sdc_src().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Config.ConfigMsg.sdc_src");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_sdc_src(), target);
  }

  // optional string spef_src = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_spef_src().data(), static_cast<int>(this->_internal_spef_src().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Config.ConfigMsg.spef_src");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_spef_src(), target);
  }

  // optional int32 significant_digits = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_significant_digits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Config.ConfigMsg)
  return target;
}

size_t ConfigMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Config.ConfigMsg)
  size_t total_size = 0;

  // required string id = 1;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string corner_max_lib_files = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.corner_max_lib_files_.size());
  for (int i = 0, n = _impl_.corner_max_lib_files_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.corner_max_lib_files_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional string design_work_space = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_design_work_space());
    }

    // optional string top_module_name = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_top_module_name());
    }

    // optional string verilog_src = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_verilog_src());
    }

    // optional string sdc_src = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sdc_src());
    }

    // optional string spef_src = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_spef_src());
    }

    // optional int32 thread_nums = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_thread_nums());
    }

    // optional int32 n_worst_path_per_clock = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_n_worst_path_per_clock());
    }

  }
  // optional int32 significant_digits = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_significant_digits());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfigMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigMsg::GetClassData() const { return &_class_data_; }


void ConfigMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfigMsg*>(&to_msg);
  auto& from = static_cast<const ConfigMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Config.ConfigMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.corner_max_lib_files_.MergeFrom(from._impl_.corner_max_lib_files_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_design_work_space(from._internal_design_work_space());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_top_module_name(from._internal_top_module_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_verilog_src(from._internal_verilog_src());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_sdc_src(from._internal_sdc_src());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_spef_src(from._internal_spef_src());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.thread_nums_ = from._impl_.thread_nums_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.n_worst_path_per_clock_ = from._impl_.n_worst_path_per_clock_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_significant_digits(from._internal_significant_digits());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigMsg::CopyFrom(const ConfigMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Config.ConfigMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ConfigMsg::InternalSwap(ConfigMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.corner_max_lib_files_.InternalSwap(&other->_impl_.corner_max_lib_files_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.design_work_space_, lhs_arena,
      &other->_impl_.design_work_space_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.top_module_name_, lhs_arena,
      &other->_impl_.top_module_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verilog_src_, lhs_arena,
      &other->_impl_.verilog_src_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sdc_src_, lhs_arena,
      &other->_impl_.sdc_src_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.spef_src_, lhs_arena,
      &other->_impl_.spef_src_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigMsg, _impl_.significant_digits_)
      + sizeof(ConfigMsg::_impl_.significant_digits_)
      - PROTOBUF_FIELD_OFFSET(ConfigMsg, _impl_.thread_nums_)>(
          reinterpret_cast<char*>(&_impl_.thread_nums_),
          reinterpret_cast<char*>(&other->_impl_.thread_nums_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_LaunchConfig_2eproto_getter, &descriptor_table_LaunchConfig_2eproto_once,
      file_level_metadata_LaunchConfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Config
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Config::ConfigMsg*
Arena::CreateMaybeMessage< ::Config::ConfigMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Config::ConfigMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
