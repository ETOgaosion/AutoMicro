// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StatusManager.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_StatusManager_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_StatusManager_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "CommonTypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_StatusManager_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_StatusManager_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_StatusManager_2eproto;
namespace StatusManager {
class StatusMsg;
struct StatusMsgDefaultTypeInternal;
extern StatusMsgDefaultTypeInternal _StatusMsg_default_instance_;
}  // namespace StatusManager
PROTOBUF_NAMESPACE_OPEN
template<> ::StatusManager::StatusMsg* Arena::CreateMaybeMessage<::StatusManager::StatusMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace StatusManager {

// ===================================================================

class StatusMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StatusManager.StatusMsg) */ {
 public:
  inline StatusMsg() : StatusMsg(nullptr) {}
  ~StatusMsg() override;
  explicit PROTOBUF_CONSTEXPR StatusMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusMsg(const StatusMsg& from);
  StatusMsg(StatusMsg&& from) noexcept
    : StatusMsg() {
    *this = ::std::move(from);
  }

  inline StatusMsg& operator=(const StatusMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusMsg& operator=(StatusMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusMsg* internal_default_instance() {
    return reinterpret_cast<const StatusMsg*>(
               &_StatusMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StatusMsg& a, StatusMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatusMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatusMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatusMsg& from) {
    StatusMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StatusManager.StatusMsg";
  }
  protected:
  explicit StatusMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentsFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // repeated string components = 1;
  int components_size() const;
  private:
  int _internal_components_size() const;
  public:
  void clear_components();
  const std::string& components(int index) const;
  std::string* mutable_components(int index);
  void set_components(int index, const std::string& value);
  void set_components(int index, std::string&& value);
  void set_components(int index, const char* value);
  void set_components(int index, const char* value, size_t size);
  std::string* add_components();
  void add_components(const std::string& value);
  void add_components(std::string&& value);
  void add_components(const char* value);
  void add_components(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& components() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_components();
  private:
  const std::string& _internal_components(int index) const;
  std::string* _internal_add_components();
  public:

  // repeated string status = 2;
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  const std::string& status(int index) const;
  std::string* mutable_status(int index);
  void set_status(int index, const std::string& value);
  void set_status(int index, std::string&& value);
  void set_status(int index, const char* value);
  void set_status(int index, const char* value, size_t size);
  std::string* add_status();
  void add_status(const std::string& value);
  void add_status(std::string&& value);
  void add_status(const char* value);
  void add_status(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_status();
  private:
  const std::string& _internal_status(int index) const;
  std::string* _internal_add_status();
  public:

  // @@protoc_insertion_point(class_scope:StatusManager.StatusMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> components_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_StatusManager_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StatusMsg

// repeated string components = 1;
inline int StatusMsg::_internal_components_size() const {
  return _impl_.components_.size();
}
inline int StatusMsg::components_size() const {
  return _internal_components_size();
}
inline void StatusMsg::clear_components() {
  _impl_.components_.Clear();
}
inline std::string* StatusMsg::add_components() {
  std::string* _s = _internal_add_components();
  // @@protoc_insertion_point(field_add_mutable:StatusManager.StatusMsg.components)
  return _s;
}
inline const std::string& StatusMsg::_internal_components(int index) const {
  return _impl_.components_.Get(index);
}
inline const std::string& StatusMsg::components(int index) const {
  // @@protoc_insertion_point(field_get:StatusManager.StatusMsg.components)
  return _internal_components(index);
}
inline std::string* StatusMsg::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:StatusManager.StatusMsg.components)
  return _impl_.components_.Mutable(index);
}
inline void StatusMsg::set_components(int index, const std::string& value) {
  _impl_.components_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StatusManager.StatusMsg.components)
}
inline void StatusMsg::set_components(int index, std::string&& value) {
  _impl_.components_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StatusManager.StatusMsg.components)
}
inline void StatusMsg::set_components(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.components_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StatusManager.StatusMsg.components)
}
inline void StatusMsg::set_components(int index, const char* value, size_t size) {
  _impl_.components_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StatusManager.StatusMsg.components)
}
inline std::string* StatusMsg::_internal_add_components() {
  return _impl_.components_.Add();
}
inline void StatusMsg::add_components(const std::string& value) {
  _impl_.components_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StatusManager.StatusMsg.components)
}
inline void StatusMsg::add_components(std::string&& value) {
  _impl_.components_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StatusManager.StatusMsg.components)
}
inline void StatusMsg::add_components(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.components_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StatusManager.StatusMsg.components)
}
inline void StatusMsg::add_components(const char* value, size_t size) {
  _impl_.components_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StatusManager.StatusMsg.components)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StatusMsg::components() const {
  // @@protoc_insertion_point(field_list:StatusManager.StatusMsg.components)
  return _impl_.components_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StatusMsg::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:StatusManager.StatusMsg.components)
  return &_impl_.components_;
}

// repeated string status = 2;
inline int StatusMsg::_internal_status_size() const {
  return _impl_.status_.size();
}
inline int StatusMsg::status_size() const {
  return _internal_status_size();
}
inline void StatusMsg::clear_status() {
  _impl_.status_.Clear();
}
inline std::string* StatusMsg::add_status() {
  std::string* _s = _internal_add_status();
  // @@protoc_insertion_point(field_add_mutable:StatusManager.StatusMsg.status)
  return _s;
}
inline const std::string& StatusMsg::_internal_status(int index) const {
  return _impl_.status_.Get(index);
}
inline const std::string& StatusMsg::status(int index) const {
  // @@protoc_insertion_point(field_get:StatusManager.StatusMsg.status)
  return _internal_status(index);
}
inline std::string* StatusMsg::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:StatusManager.StatusMsg.status)
  return _impl_.status_.Mutable(index);
}
inline void StatusMsg::set_status(int index, const std::string& value) {
  _impl_.status_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StatusManager.StatusMsg.status)
}
inline void StatusMsg::set_status(int index, std::string&& value) {
  _impl_.status_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StatusManager.StatusMsg.status)
}
inline void StatusMsg::set_status(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.status_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StatusManager.StatusMsg.status)
}
inline void StatusMsg::set_status(int index, const char* value, size_t size) {
  _impl_.status_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StatusManager.StatusMsg.status)
}
inline std::string* StatusMsg::_internal_add_status() {
  return _impl_.status_.Add();
}
inline void StatusMsg::add_status(const std::string& value) {
  _impl_.status_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StatusManager.StatusMsg.status)
}
inline void StatusMsg::add_status(std::string&& value) {
  _impl_.status_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StatusManager.StatusMsg.status)
}
inline void StatusMsg::add_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.status_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StatusManager.StatusMsg.status)
}
inline void StatusMsg::add_status(const char* value, size_t size) {
  _impl_.status_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StatusManager.StatusMsg.status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StatusMsg::status() const {
  // @@protoc_insertion_point(field_list:StatusManager.StatusMsg.status)
  return _impl_.status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StatusMsg::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:StatusManager.StatusMsg.status)
  return &_impl_.status_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace StatusManager

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_StatusManager_2eproto
